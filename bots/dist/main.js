'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const mmoShardNames = new Set(['shard0', 'shard1', 'shard2', 'shard3']);
const roomTypeProperties = new Set([
    'remotes',
    'deposits',
    'powerBanks',
    'NC',
    'PC',
    'MHC',
    'HU',
    'AT',
    'LAT',
    'CN',
    'RE',
    'data',
    'owner',
    'level',
    'powerEnabled',
    'towers',
    'hasTerminal',
    'energy',
    'OS',
    'DS',
    'portalsTo',
]);
const roomTypes = {
    commune: new Set(['remotes', 'deposits', 'powerBanks', 'PC', 'MHC', 'HU', 'AT', 'LAT']),
    remote: new Set(['CN', 'RE', 'data', 'NC', 'PC']),
    ally: new Set(['owner', 'level', 'NC', 'PC']),
    allyRemote: new Set(['owner', 'NC', 'PC']),
    enemy: new Set(['owner', 'level', 'powerEnabled', 'towers', 'hasTerminal', 'energy', 'NC', 'PC', 'OS', 'DS']),
    enemyRemote: new Set(['owner', 'NC', 'PC']),
    neutral: new Set(['NC', 'PC']),
    keeper: new Set(['owner']),
    keeperCenter: new Set(['owner']),
    highway: new Set([]),
    intersection: new Set(['portalsTo']),
};
const stagnantRoomTypes = new Set(['keeper', 'keeperCenter', 'highway', 'intersection']);
const roomTypesUsedForStats = ['commune', 'remote'];
const creepRoles = [
    'source1Harvester',
    'source2Harvester',
    'hauler',
    'requestHauler',
    'controllerUpgrader',
    'builder',
    'maintainer',
    'mineralHarvester',
    'hubHauler',
    'fastFiller',
    'meleeDefender',
    'rangedDefender',
    'remoteSourceHarvester0',
    'remoteSourceHarvester1',
    'remoteHauler',
    'remoteReserver',
    'remoteDefender',
    'remoteCoreAttacker',
    'remoteDismantler',
    'scout',
    'claimer',
    'vanguard',
    'allyVanguard',
    'antifaRangedAttacker',
    'antifaAttacker',
    'antifaHealer',
    'antifaDismantler',
    'antifaDowngrader',
];
const roomLogisticsRoles = new Set([
    'hauler',
    'builder',
    'maintainer',
    'controllerUpgrader',
    'remoteSourceHarvester0',
    'remoteSourceHarvester1',
    'remoteHauler',
    'hubHauler',
]);
const powerCreepClassNames = ['operator'];
var TrafficPriorities;
(function (TrafficPriorities) {
    TrafficPriorities[TrafficPriorities["remoteHauler"] = 0] = "remoteHauler";
    TrafficPriorities[TrafficPriorities["hauler"] = 1] = "hauler";
    TrafficPriorities[TrafficPriorities["requestHauler"] = 2] = "requestHauler";
    TrafficPriorities[TrafficPriorities["scout"] = 3] = "scout";
    TrafficPriorities[TrafficPriorities["hubHauler"] = 4] = "hubHauler";
    TrafficPriorities[TrafficPriorities["fastFiller"] = 5] = "fastFiller";
    TrafficPriorities[TrafficPriorities["source1Harvester"] = 6] = "source1Harvester";
    TrafficPriorities[TrafficPriorities["source2Harvester"] = 7] = "source2Harvester";
    TrafficPriorities[TrafficPriorities["mineralHarvester"] = 8] = "mineralHarvester";
    TrafficPriorities[TrafficPriorities["remoteSourceHarvester0"] = 9] = "remoteSourceHarvester0";
    TrafficPriorities[TrafficPriorities["remoteSourceHarvester1"] = 10] = "remoteSourceHarvester1";
    TrafficPriorities[TrafficPriorities["remoteReserver"] = 11] = "remoteReserver";
    TrafficPriorities[TrafficPriorities["remoteDismantler"] = 12] = "remoteDismantler";
    TrafficPriorities[TrafficPriorities["remoteCoreAttacker"] = 13] = "remoteCoreAttacker";
    TrafficPriorities[TrafficPriorities["vanguard"] = 14] = "vanguard";
    TrafficPriorities[TrafficPriorities["allyVanguard"] = 15] = "allyVanguard";
    TrafficPriorities[TrafficPriorities["controllerUpgrader"] = 16] = "controllerUpgrader";
    TrafficPriorities[TrafficPriorities["builder"] = 17] = "builder";
    TrafficPriorities[TrafficPriorities["claimer"] = 18] = "claimer";
    TrafficPriorities[TrafficPriorities["remoteDefender"] = 19] = "remoteDefender";
    TrafficPriorities[TrafficPriorities["meleeDefender"] = 20] = "meleeDefender";
    TrafficPriorities[TrafficPriorities["rangedDefender"] = 21] = "rangedDefender";
    TrafficPriorities[TrafficPriorities["maintainer"] = 22] = "maintainer";
    TrafficPriorities[TrafficPriorities["antifaDismantler"] = 23] = "antifaDismantler";
    TrafficPriorities[TrafficPriorities["antifaDowngrader"] = 24] = "antifaDowngrader";
    TrafficPriorities[TrafficPriorities["antifaHealer"] = 25] = "antifaHealer";
    TrafficPriorities[TrafficPriorities["antifaAttacker"] = 26] = "antifaAttacker";
    TrafficPriorities[TrafficPriorities["antifaRangedAttacker"] = 27] = "antifaRangedAttacker";
})(TrafficPriorities || (TrafficPriorities = {}));
const communeSign = 'A commune of the proletariat. Bourgeoisie not welcome here!';
const nonCommuneSigns = [
    'The top 1% have more money than the poorest 4.5 billion',
    'McDonalds workers in the US make $10/hour. In Denmark, as a result of unions, they make $22/hour',
    'We have democracy in our policial system, should we not have it in our companies too?',
    'Workers of the world, unite; you have nothing to lose but your chains!',
    'Real democracy requires democracy in the workplace - Richard Wolff',
    'Adults spend a combined 13 years of their life under a dictatorship: the workplace',
    'Socialism is about worker ownership over the workplace',
    'Are trans women women? Yes. Obviously.',
    'Advancing the LGBTQ+ agenda <3',
    'Does Jeff Bezos work 56,000 times harder than his average worker? Because he gets paid like it',
];
const chant = [
    'Creeps',
    'of',
    Game.shard.name,
    'unite',
    'you',
    'have',
    'nothing',
    'to',
    'lose',
    'but',
    'your',
    'chains!',
    undefined,
    'Die',
    'Tigga',
    'die!',
    undefined,
    'Read',
    'Das',
    'Kapital',
    'on',
    'marxists',
    '.org',
    undefined,
];
const roomDimensions = 50;
const allStructureTypes = [
    STRUCTURE_SPAWN,
    STRUCTURE_EXTENSION,
    STRUCTURE_ROAD,
    STRUCTURE_WALL,
    STRUCTURE_RAMPART,
    STRUCTURE_KEEPER_LAIR,
    STRUCTURE_PORTAL,
    STRUCTURE_CONTROLLER,
    STRUCTURE_LINK,
    STRUCTURE_STORAGE,
    STRUCTURE_TOWER,
    STRUCTURE_OBSERVER,
    STRUCTURE_POWER_BANK,
    STRUCTURE_POWER_SPAWN,
    STRUCTURE_EXTRACTOR,
    STRUCTURE_LAB,
    STRUCTURE_TERMINAL,
    STRUCTURE_CONTAINER,
    STRUCTURE_NUKER,
    STRUCTURE_FACTORY,
    STRUCTURE_INVADER_CORE,
];
const impassibleStructureTypes = [
    STRUCTURE_SPAWN,
    STRUCTURE_EXTENSION,
    STRUCTURE_WALL,
    STRUCTURE_KEEPER_LAIR,
    STRUCTURE_CONTROLLER,
    STRUCTURE_LINK,
    STRUCTURE_STORAGE,
    STRUCTURE_TOWER,
    STRUCTURE_OBSERVER,
    STRUCTURE_POWER_BANK,
    STRUCTURE_POWER_SPAWN,
    STRUCTURE_EXTRACTOR,
    STRUCTURE_LAB,
    STRUCTURE_TERMINAL,
    STRUCTURE_NUKER,
    STRUCTURE_FACTORY,
    STRUCTURE_INVADER_CORE,
];
const impassibleStructureTypesSet = new Set(impassibleStructureTypes);
const structureTypesByBuildPriority = [
    STRUCTURE_SPAWN,
    STRUCTURE_EXTENSION,
    STRUCTURE_CONTAINER,
    STRUCTURE_ROAD,
    STRUCTURE_STORAGE,
    STRUCTURE_TOWER,
    STRUCTURE_WALL,
    STRUCTURE_RAMPART,
    STRUCTURE_LINK,
    STRUCTURE_TERMINAL,
    STRUCTURE_EXTRACTOR,
    STRUCTURE_LAB,
    STRUCTURE_FACTORY,
    STRUCTURE_POWER_SPAWN,
    STRUCTURE_NUKER,
    STRUCTURE_OBSERVER,
];
({
    0: 'empty',
    1: STRUCTURE_SPAWN,
    2: STRUCTURE_EXTENSION,
    3: STRUCTURE_CONTAINER,
    4: STRUCTURE_TOWER,
    5: STRUCTURE_STORAGE,
    6: STRUCTURE_ROAD,
    7: STRUCTURE_WALL,
    8: STRUCTURE_RAMPART,
    9: STRUCTURE_TERMINAL,
    10: STRUCTURE_EXTRACTOR,
    11: STRUCTURE_LINK,
    12: STRUCTURE_LAB,
    13: STRUCTURE_FACTORY,
    14: STRUCTURE_POWER_SPAWN,
    15: STRUCTURE_NUKER,
    16: STRUCTURE_OBSERVER,
});
const customColors = {
    white: '#ffffff',
    lightGrey: '#eaeaea',
    midGrey: '#bcbcbc',
    darkGrey: '#5e5e5e',
    lightBlue: '#0f66fc',
    darkBlue: '#02007d',
    black: '#000000',
    yellow: '#d8f100',
    red: '#d10000',
    green: '#00d137',
    brown: '#aa7253',
    purple: '#8b06a3',
    pink: '#d60ef9',
    orange: '#f27602',
    teal: '#02f2e2',
};
const stamps = {
    fastFiller: {
        offset: 3,
        protectionOffset: 7,
        size: 4,
        structures: {
            extension: [
                { x: 1, y: 1 },
                { x: 2, y: 1 },
                { x: 3, y: 1 },
                { x: 3, y: 2 },
                { x: 2, y: 3 },
                { x: 4, y: 1 },
                { x: 5, y: 1 },
                { x: 4, y: 3 },
                { x: 1, y: 4 },
                { x: 3, y: 4 },
                { x: 1, y: 5 },
                { x: 2, y: 5 },
                { x: 4, y: 5 },
                { x: 5, y: 5 },
                { x: 5, y: 4 },
            ],
            road: [
                { x: 3, y: 0 },
                { x: 2, y: 0 },
                { x: 1, y: 0 },
                { x: 0, y: 1 },
                { x: 0, y: 2 },
                { x: 0, y: 3 },
                { x: 0, y: 4 },
                { x: 4, y: 0 },
                { x: 5, y: 0 },
                { x: 6, y: 1 },
                { x: 6, y: 2 },
                { x: 6, y: 4 },
                { x: 6, y: 3 },
                { x: 6, y: 5 },
                { x: 5, y: 6 },
                { x: 4, y: 6 },
                { x: 3, y: 6 },
                { x: 2, y: 6 },
                { x: 1, y: 6 },
                { x: 0, y: 5 },
            ],
            spawn: [
                { x: 1, y: 2 },
                { x: 5, y: 2 },
                { x: 3, y: 5 },
            ],
            container: [
                { x: 1, y: 3 },
                { x: 5, y: 3 },
            ],
            link: [{ x: 3, y: 3 }],
            empty: [
                { x: 2, y: 2 },
                { x: 4, y: 2 },
                { x: 2, y: 4 },
                { x: 4, y: 4 },
            ],
        },
    },
    hub: {
        offset: 2,
        protectionOffset: 5,
        size: 3,
        structures: {
            road: [
                { x: 1, y: 1 },
                { x: 2, y: 0 },
                { x: 3, y: 0 },
                { x: 0, y: 3 },
                { x: 0, y: 2 },
                { x: 1, y: 4 },
                { x: 2, y: 4 },
                { x: 4, y: 2 },
                { x: 4, y: 1 },
                { x: 3, y: 3 },
            ],
            link: [{ x: 2, y: 3 }],
            factory: [{ x: 2, y: 1 }],
            nuker: [{ x: 1, y: 2 }],
            terminal: [{ x: 1, y: 3 }],
            storage: [{ x: 3, y: 1 }],
            powerSpawn: [{ x: 3, y: 2 }],
            empty: [{ x: 2, y: 2 }],
        },
    },
    extensions: {
        offset: 2,
        protectionOffset: 4,
        size: 3,
        structures: {
            extension: [
                { x: 1, y: 2 },
                { x: 2, y: 1 },
                { x: 2, y: 3 },
                { x: 2, y: 2 },
                { x: 3, y: 2 },
            ],
            road: [
                { x: 1, y: 3 },
                { x: 0, y: 2 },
                { x: 1, y: 1 },
                { x: 2, y: 0 },
                { x: 3, y: 1 },
                { x: 4, y: 2 },
                { x: 3, y: 3 },
                { x: 2, y: 4 },
            ],
        },
    },
    labs: {
        offset: 1,
        protectionOffset: 5,
        size: 2,
        asymmetry: 1,
        structures: {
            road: [
                { x: 2, y: 2 },
                { x: 1, y: 1 },
            ],
            lab: [
                { x: 0, y: 1 },
                { x: 0, y: 2 },
                { x: 1, y: 2 },
                { x: 1, y: 3 },
                { x: 2, y: 3 },
                { x: 1, y: 0 },
                { x: 2, y: 0 },
                { x: 2, y: 1 },
                { x: 3, y: 1 },
                { x: 3, y: 2 },
            ],
        },
    },
    tower: {
        offset: 0,
        protectionOffset: 2,
        size: 1,
        structures: {
            tower: [{ x: 0, y: 0 }],
        },
    },
    extension: {
        offset: 0,
        protectionOffset: 0,
        size: 1,
        structures: {
            extension: [{ x: 0, y: 0 }],
        },
    },
    observer: {
        offset: 0,
        protectionOffset: 0,
        size: 1,
        structures: {
            observer: [{ x: 0, y: 0 }],
        },
    },
    sourceLink: {
        offset: 0,
        protectionOffset: 0,
        size: 1,
        structures: {
            link: [{ x: 0, y: 0 }],
        },
    },
    sourceExtension: {
        offset: 0,
        protectionOffset: 0,
        size: 1,
        structures: {
            extension: [{ x: 0, y: 0 }],
        },
    },
    container: {
        offset: 0,
        protectionOffset: 0,
        size: 1,
        structures: {
            container: [{ x: 0, y: 0 }],
        },
    },
    extractor: {
        offset: 0,
        protectionOffset: 0,
        size: 1,
        structures: {
            extractor: [{ x: 0, y: 0 }],
        },
    },
    road: {
        offset: 0,
        protectionOffset: 0,
        size: 1,
        structures: {
            road: [{ x: 0, y: 0 }],
        },
    },
    rampart: {
        offset: 0,
        protectionOffset: 0,
        size: 1,
        structures: {
            rampart: [{ x: 0, y: 0 }],
        },
    },
};
const minerals = [
    RESOURCE_HYDROGEN,
    RESOURCE_OXYGEN,
    RESOURCE_UTRIUM,
    RESOURCE_KEANIUM,
    RESOURCE_LEMERGIUM,
    RESOURCE_ZYNTHIUM,
    RESOURCE_CATALYST,
];
[RESOURCE_CATALYZED_GHODIUM_ACID];
const dismantleBoosts = [RESOURCE_ZYNTHIUM_HYDRIDE, RESOURCE_ZYNTHIUM_ACID, RESOURCE_CATALYZED_ZYNTHIUM_ACID];
new Set(RESOURCES_ALL);
const terminalResourceTargets = [
    {
        resource: RESOURCE_BATTERY,
        conditions: function (communeManager) {
            return communeManager.room.structures.factory.length;
        },
        min: 0.005,
        max: 0.015,
    },
    {
        resource: RESOURCE_ENERGY,
        min: 0.08,
        max: 0.2,
    },
    {
        resource: RESOURCE_HYDROGEN,
        min: 0.01,
        max: 0.027,
    },
    {
        resource: RESOURCE_OXYGEN,
        min: 0.01,
        max: 0.027,
    },
    {
        resource: RESOURCE_UTRIUM,
        min: 0.01,
        max: 0.027,
    },
    {
        resource: RESOURCE_KEANIUM,
        min: 0.01,
        max: 0.027,
    },
    {
        resource: RESOURCE_LEMERGIUM,
        min: 0.01,
        max: 0.027,
    },
    {
        resource: RESOURCE_ZYNTHIUM,
        min: 0.01,
        max: 0.027,
    },
    {
        resource: RESOURCE_CATALYST,
        min: 0.01,
        max: 0.027,
    },
    {
        resource: RESOURCE_OXIDANT,
        min: 0,
        max: 0.01,
    },
    {
        resource: RESOURCE_REDUCTANT,
        min: 0,
        max: 0.01,
    },
    {
        resource: RESOURCE_ZYNTHIUM_BAR,
        min: 0,
        max: 0.01,
    },
    {
        resource: RESOURCE_LEMERGIUM_BAR,
        min: 0,
        max: 0.01,
    },
    {
        resource: RESOURCE_UTRIUM_BAR,
        min: 0,
        max: 0.01,
    },
    {
        resource: RESOURCE_KEANIUM_BAR,
        min: 0,
        max: 0.01,
    },
    {
        resource: RESOURCE_PURIFIER,
        min: 0,
        max: 0.01,
    },
    {
        resource: RESOURCE_GHODIUM_MELT,
        min: 0,
        max: 0.01,
    },
    {
        resource: RESOURCE_POWER,
        conditions: function (communeManager) {
            return communeManager.room.structures.powerSpawn.length;
        },
        min: 0.002,
        max: 0.015,
    },
    {
        resource: RESOURCE_METAL,
        min: 0,
        max: 0.00001,
    },
    {
        resource: RESOURCE_BIOMASS,
        min: 0,
        max: 0.00001,
    },
    {
        resource: RESOURCE_SILICON,
        min: 0,
        max: 0.00001,
    },
    {
        resource: RESOURCE_MIST,
        min: 0,
        max: 0.00001,
    },
    {
        resource: RESOURCE_ALLOY,
        min: 0,
        max: 0,
    },
    {
        resource: RESOURCE_CELL,
        min: 0,
        max: 0,
    },
    {
        resource: RESOURCE_WIRE,
        min: 0,
        max: 0,
    },
    {
        resource: RESOURCE_CONDENSATE,
        min: 0,
        max: 0,
    },
];
var PlayerData;
(function (PlayerData) {
    PlayerData[PlayerData["offensiveStrength"] = 0] = "offensiveStrength";
    PlayerData[PlayerData["defensiveStrength"] = 1] = "defensiveStrength";
    PlayerData[PlayerData["hate"] = 2] = "hate";
    PlayerData[PlayerData["lastAttack"] = 3] = "lastAttack";
})(PlayerData || (PlayerData = {}));
var RemoteData;
(function (RemoteData) {
    RemoteData[RemoteData["remoteSourceHarvester0"] = 0] = "remoteSourceHarvester0";
    RemoteData[RemoteData["remoteSourceHarvester1"] = 1] = "remoteSourceHarvester1";
    RemoteData[RemoteData["remoteHauler0"] = 2] = "remoteHauler0";
    RemoteData[RemoteData["remoteHauler1"] = 3] = "remoteHauler1";
    RemoteData[RemoteData["remoteReserver"] = 4] = "remoteReserver";
    RemoteData[RemoteData["remoteCoreAttacker"] = 5] = "remoteCoreAttacker";
    RemoteData[RemoteData["remoteBuilder"] = 6] = "remoteBuilder";
    RemoteData[RemoteData["remoteDismantler"] = 7] = "remoteDismantler";
    RemoteData[RemoteData["minDamage"] = 8] = "minDamage";
    RemoteData[RemoteData["minHeal"] = 9] = "minHeal";
    RemoteData[RemoteData["enemyReserved"] = 10] = "enemyReserved";
    RemoteData[RemoteData["invaderCore"] = 11] = "invaderCore";
    RemoteData[RemoteData["abandon"] = 12] = "abandon";
    RemoteData[RemoteData["onlyInvader"] = 13] = "onlyInvader";
    RemoteData[RemoteData["disableCachedPaths"] = 14] = "disableCachedPaths";
})(RemoteData || (RemoteData = {}));
var ClaimRequestData;
(function (ClaimRequestData) {
    ClaimRequestData[ClaimRequestData["claimer"] = 0] = "claimer";
    ClaimRequestData[ClaimRequestData["vanguard"] = 1] = "vanguard";
    ClaimRequestData[ClaimRequestData["minDamage"] = 2] = "minDamage";
    ClaimRequestData[ClaimRequestData["minHeal"] = 3] = "minHeal";
    ClaimRequestData[ClaimRequestData["abandon"] = 4] = "abandon";
    ClaimRequestData[ClaimRequestData["score"] = 5] = "score";
})(ClaimRequestData || (ClaimRequestData = {}));
var CombatRequestData;
(function (CombatRequestData) {
    CombatRequestData[CombatRequestData["abandon"] = 0] = "abandon";
    CombatRequestData[CombatRequestData["rangedAttack"] = 1] = "rangedAttack";
    CombatRequestData[CombatRequestData["attack"] = 2] = "attack";
    CombatRequestData[CombatRequestData["dismantle"] = 3] = "dismantle";
    CombatRequestData[CombatRequestData["downgrade"] = 4] = "downgrade";
    CombatRequestData[CombatRequestData["minDamage"] = 5] = "minDamage";
    CombatRequestData[CombatRequestData["minMeleeHeal"] = 6] = "minMeleeHeal";
    CombatRequestData[CombatRequestData["minRangedHeal"] = 7] = "minRangedHeal";
    CombatRequestData[CombatRequestData["maxTowerDamage"] = 8] = "maxTowerDamage";
    CombatRequestData[CombatRequestData["quads"] = 9] = "quads";
    CombatRequestData[CombatRequestData["priority"] = 10] = "priority";
    CombatRequestData[CombatRequestData["quadQuota"] = 11] = "quadQuota";
    CombatRequestData[CombatRequestData["inactionTimerMax"] = 12] = "inactionTimerMax";
    CombatRequestData[CombatRequestData["inactionTimer"] = 13] = "inactionTimer";
    CombatRequestData[CombatRequestData["maxThreat"] = 14] = "maxThreat";
    CombatRequestData[CombatRequestData["abandonments"] = 15] = "abandonments";
})(CombatRequestData || (CombatRequestData = {}));
var HaulRequestData;
(function (HaulRequestData) {
    HaulRequestData[HaulRequestData["transfer"] = 0] = "transfer";
    HaulRequestData[HaulRequestData["distance"] = 1] = "distance";
    HaulRequestData[HaulRequestData["timer"] = 2] = "timer";
    HaulRequestData[HaulRequestData["priority"] = 3] = "priority";
    HaulRequestData[HaulRequestData["abandon"] = 4] = "abandon";
})(HaulRequestData || (HaulRequestData = {}));
var AllyCreepRequestData;
(function (AllyCreepRequestData) {
    AllyCreepRequestData[AllyCreepRequestData["allyVanguard"] = 0] = "allyVanguard";
    AllyCreepRequestData[AllyCreepRequestData["abandon"] = 1] = "abandon";
})(AllyCreepRequestData || (AllyCreepRequestData = {}));
var DepositNeeds;
(function (DepositNeeds) {
    DepositNeeds[DepositNeeds["depositHarvester"] = 0] = "depositHarvester";
    DepositNeeds[DepositNeeds["depositHauler"] = 1] = "depositHauler";
})(DepositNeeds || (DepositNeeds = {}));
const remoteHarvesterRoles = [
    'remoteSourceHarvester0',
    'remoteSourceHarvester1',
];
const antifaRoles = ['antifaRangedAttacker', 'antifaAttacker', 'antifaHealer', 'antifaDismantler', 'antifaDowngrader'];
const remoteRoles = [
    'remoteSourceHarvester0',
    'remoteSourceHarvester1',
    'remoteReserver',
    'remoteDefender',
    'remoteCoreAttacker',
    'remoteDismantler',
];
var RemoteHarvesterRolesBySourceIndex;
(function (RemoteHarvesterRolesBySourceIndex) {
    RemoteHarvesterRolesBySourceIndex[RemoteHarvesterRolesBySourceIndex["remoteSourceHarvester0"] = 0] = "remoteSourceHarvester0";
    RemoteHarvesterRolesBySourceIndex[RemoteHarvesterRolesBySourceIndex["remoteSourceHarvester1"] = 1] = "remoteSourceHarvester1";
})(RemoteHarvesterRolesBySourceIndex || (RemoteHarvesterRolesBySourceIndex = {}));
var RemoteHaulerRolesBySourceIndex;
(function (RemoteHaulerRolesBySourceIndex) {
    RemoteHaulerRolesBySourceIndex[RemoteHaulerRolesBySourceIndex["remoteHauler0"] = 0] = "remoteHauler0";
    RemoteHaulerRolesBySourceIndex[RemoteHaulerRolesBySourceIndex["remoteHauler1"] = 1] = "remoteHauler1";
})(RemoteHaulerRolesBySourceIndex || (RemoteHaulerRolesBySourceIndex = {}));
const CPUMaxPerTick = 500;
const CPUBucketRenewThreshold = 5000;
const prefferedCommuneRange = 6;
const controllerDowngradeUpgraderNeed = 10000;
const minHarvestWorkRatio = 1.66666666667;
const UNWALKABLE = -1;
const NORMAL = 0;
const PROTECTED = 1;
const TO_EXIT = 2;
const EXIT = 3;
const safemodeTargets = [
    STRUCTURE_SPAWN,
    STRUCTURE_TOWER,
    STRUCTURE_STORAGE,
    STRUCTURE_TERMINAL,
];
const haulerUpdateDefault = 1500;
const rampartUpkeepCost = RAMPART_DECAY_AMOUNT / REPAIR_POWER / RAMPART_DECAY_TIME;
const roadUpkeepCost = ROAD_DECAY_AMOUNT / REPAIR_POWER / ROAD_DECAY_TIME;
const containerUpkeepCost = CONTAINER_DECAY / REPAIR_POWER / CONTAINER_DECAY_TIME_OWNED;
CONTAINER_DECAY / REPAIR_POWER / CONTAINER_DECAY_TIME;
const minOnboardingRamparts = 1;
const maxRampartGroupSize = 12;
const linkSendThreshold = 0.9;
const linkReceiveTreshold = 0.25;
const powerSpawnRefillThreshold = 0.1;
const relayOffsets = {
    horizontal: [
        {
            x: 0,
            y: 0,
        },
        {
            x: -1,
            y: 0,
        },
        {
            x: 1,
            y: 0,
        },
    ],
    vertical: [
        {
            x: 0,
            y: 0,
        },
        {
            x: 0,
            y: -1,
        },
        {
            x: 0,
            y: 1,
        },
    ],
    topLeft: [
        {
            x: 0,
            y: 0,
        },
        {
            x: 1,
            y: 0,
        },
        {
            x: 0,
            y: 1,
        },
    ],
    topRight: [
        {
            x: 0,
            y: 0,
        },
        {
            x: -1,
            y: 0,
        },
        {
            x: 0,
            y: 1,
        },
    ],
    bottomLeft: [
        {
            x: 0,
            y: 0,
        },
        {
            x: 1,
            y: 0,
        },
        {
            x: 0,
            y: -1,
        },
    ],
    bottomRight: [
        {
            x: 0,
            y: 0,
        },
        {
            x: -1,
            y: 0,
        },
        {
            x: 0,
            y: -1,
        },
    ],
};
const allowedSquadCombinations = {
    2: {
        antifaRangedAttacker: new Set(['antifaRangedAttacker']),
        antifaAttacker: new Set(['antifaHealer']),
        antifaDismantler: new Set(['antifaHealer']),
        antifaHealer: new Set(['antifaAttacker', 'antifaDismantler']),
    },
    4: {
        antifaRangedAttacker: new Set(['antifaRangedAttacker', 'antifaAttacker', 'antifaDismantler']),
        antifaAttacker: new Set(['antifaRangedAttacker', 'antifaAttacker', 'antifaDismantler']),
        antifaDismantler: new Set(['antifaRangedAttacker', 'antifaAttacker', 'antifaDismantler']),
    },
};
const defaultPlainCost = 1;
const defaultRoadPlanningPlainCost = 2;
const defaultSwampCost = 3;
const defaultCreepSwampCost = 8;
const quadAttackMemberOffsets = [
    {
        x: 0,
        y: 0,
    },
    {
        x: 0,
        y: 1,
    },
    {
        x: 1,
        y: 1,
    },
    {
        x: 1,
        y: 0,
    },
];
const quadTransformOffsets = {
    none: [
        {
            x: 0,
            y: 0,
        },
        {
            x: 0,
            y: 0,
        },
        {
            x: 0,
            y: 0,
        },
        {
            x: 0,
            y: 0,
        },
    ],
    rotateLeft: [
        {
            x: 0,
            y: 1,
        },
        {
            x: 1,
            y: 0,
        },
        {
            x: 0,
            y: -1,
        },
        {
            x: -1,
            y: 0,
        },
    ],
    rotateRight: [
        {
            x: 1,
            y: 0,
        },
        {
            x: 0,
            y: -1,
        },
        {
            x: -1,
            y: 0,
        },
        {
            x: 0,
            y: 1,
        },
    ],
    tradeHorizontal: [
        {
            x: 1,
            y: 0,
        },
        {
            x: 1,
            y: 0,
        },
        {
            x: -1,
            y: 0,
        },
        {
            x: -1,
            y: 0,
        },
    ],
    tradeVertical: [
        {
            x: 0,
            y: 1,
        },
        {
            x: 0,
            y: -1,
        },
        {
            x: 0,
            y: -1,
        },
        {
            x: 0,
            y: 1,
        },
    ],
};
const quadTransformIndexes = {
    none: [0, 1, 2, 3],
    rotateLeft: [1, 2, 3, 0],
    rotateRight: [3, 2, 1, 0],
    tradeHorizontal: [3, 2, 1, 0],
    tradeVertical: [1, 0, 3, 2],
};
const RESULT_FAIL = 0;
const RESULT_SUCCESS = 1;
const RESULT_ACTION = 2;
const RESULT_NO_ACTION = 3;
const RESULT_STOP = 4;
const maxRemoteRoomDistance = 5;
const offsetsByDirection = [,
    [0, -1],
    [1, -1],
    [1, 0],
    [1, 1],
    [0, 1],
    [-1, 1],
    [-1, 0],
    [-1, -1],
];
const towerPowers = [PWR_OPERATE_TOWER, PWR_DISRUPT_TOWER];
const remoteTypeWeights = {
    keeper: Infinity,
    enemy: Infinity,
    enemyRemote: Infinity,
    ally: Infinity,
    allyRemote: Infinity,
};
const maxClaimRequestDistance = 10;
const maxCombatDistance = 20;
const maxHaulDistance = 15;
const partsByPriority = [
    'tough',
    'claim',
    'attack',
    'ranged_attack',
    'secondaryTough',
    'work',
    'carry',
    'move',
    'secondaryAttack',
    'heal',
];
const partsByPriorityPartType = {
    [TOUGH]: TOUGH,
    [CLAIM]: CLAIM,
    [ATTACK]: ATTACK,
    [RANGED_ATTACK]: RANGED_ATTACK,
    secondaryTough: TOUGH,
    [WORK]: WORK,
    [CARRY]: CARRY,
    [MOVE]: MOVE,
    secondaryAttack: ATTACK,
    [HEAL]: HEAL,
};
const rangedMassAttackMultiplierByRange = [1, 1, 0.4, 0.1];

const importantStructures = [STRUCTURE_SPAWN, STRUCTURE_STORAGE, STRUCTURE_TERMINAL];
global.clearGlobal = function () {
    var _a;
    (_a = Game.cpu) === null || _a === void 0 ? void 0 : _a.halt();
};
global.CG = global.clearGlobal;
global.clearMemory = function (avoidKeys = []) {
    for (const key in Memory) {
        if (avoidKeys.includes(key))
            continue;
        delete Memory[key];
    }
    return 'Cleared all of Memory';
};
global.CM = global.clearMemory;
global.killCreeps = function (roles) {
    for (const roomName in Game.rooms) {
        const room = Game.rooms[roomName];
        if (!room.controller || !room.controller.my)
            continue;
        for (const spawn of room.structures.spawn) {
            if (!spawn.spawning)
                continue;
            if (roles && !roles.includes(Game.creeps[spawn.spawning.name].role))
                continue;
            spawn.spawning.cancel();
        }
    }
    const filteredCreeps = Object.values(Game.creeps).filter(creep => {
        return !roles || roles.includes(creep.role);
    });
    let killedCreepCount = 0;
    for (const creep of filteredCreeps)
        if (creep.suicide() === OK)
            killedCreepCount += 1;
    return `Killed an total of ${killedCreepCount} creeps ${roles ? `with the roles ${roles}` : ''}`;
};
global.marxistLeninism = global.killCreeps;
global.genocide = global.killCreeps;
global.removeCSites = function (removeInProgress, types) {
    let removedCSCount = 0;
    for (const cSiteID in Game.constructionSites) {
        const cSite = Game.constructionSites[cSiteID];
        if (cSite.progress && removeInProgress)
            continue;
        if (types && !types.includes(cSite.structureType))
            continue;
        if (cSite.remove() === OK)
            removedCSCount += 1;
    }
    return `Removed a total of ${removedCSCount} construction sites ${types ? `with the types ${types}` : ''}`;
};
global.destroyStructures = function (roomName, types) {
    if (!roomName) {
        if (global.communes.size > 1)
            return 'Provide a room name';
        roomName = Array.from(global.communes)[0];
    }
    const room = Game.rooms[roomName];
    if (!room)
        return `You have no vision in ${roomName}`;
    let destroyedStructureCount = 0;
    for (const structureType of allStructureTypes) {
        if ((types && !types.includes(structureType)) || (importantStructures.includes(structureType) && !types))
            continue;
        const structures = room.structures[structureType];
        for (const structure of structures) {
            if (structure.destroy() === OK)
                destroyedStructureCount += 1;
        }
    }
    return `Destroyed a total of ${destroyedStructureCount} structures in ${roomName} ${types ? `with the types ${types}` : ''}`;
};
global.destroyCommuneStructures = function (types) {
    let log = ``;
    let destroyedStructureCount;
    for (const roomName of global.communes) {
        const room = Game.rooms[roomName];
        destroyedStructureCount = 0;
        for (const structureType of allStructureTypes) {
            if ((types && !types.includes(structureType)) || (importantStructures.includes(structureType) && !types))
                continue;
            const structures = room.structures[structureType];
            for (const structure of structures) {
                if (structure.destroy() === OK)
                    destroyedStructureCount += 1;
            }
            log += `Destroyed a total of ${destroyedStructureCount} structures in ${roomName}
               `;
        }
    }
    return log + ` ${types ? `with the types ${types}` : ''}`;
};
global.claim = function (requestName, communeName) {
    if (!Memory.claimRequests[requestName]) {
        Memory.claimRequests[requestName] = {
            responder: communeName,
            data: [0],
        };
    }
    const request = Memory.claimRequests[requestName];
    request.data[ClaimRequestData.score] = 0;
    request.data[ClaimRequestData.abandon] = 0;
    if (communeName) {
        const roomMemory = Memory.rooms[communeName];
        if (!roomMemory)
            return `No memory for ${communeName}`;
        roomMemory.claimRequest = requestName;
    }
    return `${communeName ? `${communeName} is responding to the` : `created`} claimRequest for ${requestName}`;
};
global.deleteClaimRequests = function () {
    let deleteCount = 0;
    for (const requestName in Memory.claimRequests) {
        const request = Memory.claimRequests[requestName];
        deleteCount += 1;
        if (request.responder)
            delete Memory.rooms[request.responder].claimRequest;
        delete Memory.claimRequests[requestName];
    }
    return `Deleted ${deleteCount} claim requests`;
};
global.combat = function (requestName, type, opts, communeName) {
    if (!Memory.combatRequests[requestName]) {
        const request = Memory.combatRequests[requestName] = {
            T: type || 'attack',
            data: [0],
        };
        for (const key in CombatRequestData)
            request.data[key] = 0;
    }
    const request = Memory.combatRequests[requestName];
    request.data[CombatRequestData.abandon] = 0;
    request.data[CombatRequestData.inactionTimer] = 0;
    for (const key in opts) {
        request.data[CombatRequestData[key]] =
            opts[key];
    }
    if (communeName) {
        const roomMemory = Memory.rooms[communeName];
        if (!roomMemory)
            return `No memory for ${communeName}`;
        request.responder = communeName;
        roomMemory.combatRequests.push(requestName);
    }
    return `${communeName ? `${communeName} is responding to the` : `created`} combatRequest for ${requestName}`;
};
global.deleteCombatRequest = function (requestName) {
    if (!Memory.combatRequests[requestName])
        return 'No combatRequest for that room';
    const responder = Memory.combatRequests[requestName].responder;
    if (responder)
        Memory.rooms[responder].combatRequests.splice(Memory.rooms[responder].combatRequests.indexOf(requestName), 1);
    delete Memory.combatRequests[requestName];
    return `deleted combatRequest for ${requestName}`;
};
global.DCR = global.deleteCombatRequest;
global.allyCreepRequest = function (requestName, communeName) {
    if (!Memory.allyCreepRequests[requestName]) {
        Memory.allyCreepRequests[requestName] = {
            responder: communeName,
            data: [0],
        };
    }
    const request = Memory.allyCreepRequests[requestName];
    request.data[AllyCreepRequestData.abandon] = 0;
    if (communeName) {
        const roomMemory = Memory.rooms[communeName];
        if (!roomMemory)
            return `No memory for ${communeName}`;
        roomMemory.allyCreepRequest = requestName;
    }
    return `${communeName ? `${communeName} is responding to the` : `created`} allyCreepRequest for ${requestName}`;
};
global.ACR = global.allyCreepRequest;
global.deleteBasePlans = function (roomName) {
    if (!roomName) {
        if (global.communes.size > 1)
            return 'Provide a room name';
        roomName = Array.from(global.communes)[0];
    }
    const room = Game.rooms[roomName];
    if (!room)
        return 'No vision in ' + roomName;
    delete room.memory.PC;
    delete room.memory.stampAnchors;
    return 'Deleted base plans for ' + roomName;
};

function getAvgPrice(resourceType, days = 2) {
    const history = Game.market.getHistory(resourceType);
    if (!history.length)
        return 1;
    let totalPrice = 0;
    for (let index = 0; index <= days; index += 1)
        totalPrice += history[index].avgPrice;
    return totalPrice / days;
}
function findObjectWithID(ID) {
    return Game.getObjectById(ID) || undefined;
}
function doesCoordExist(coord) {
    return coord.x >= 0 && coord.x < roomDimensions && coord.y >= 0 && coord.y < roomDimensions;
}
function findCoordsInsideRect(x1, y1, x2, y2) {
    const positions = [];
    for (let x = x1; x <= x2; x += 1) {
        for (let y = y1; y <= y2; y += 1) {
            if (x < 0 || x >= roomDimensions || y < 0 || y >= roomDimensions)
                continue;
            positions.push({ x, y });
        }
    }
    return positions;
}
function areCoordsEqual(coord1, coord2) {
    return coord1.x === coord2.x && coord1.y === coord2.y;
}
function arePositionsEqual(pos1, pos2) {
    return pos1.roomName === pos2.roomName && pos1.x === pos2.x && pos1.y === pos2.y;
}
function customLog(title, message, opts) {
    var _a;
    if (!Memory.logging)
        return;
    if (!opts)
        opts = {};
    if (!opts.textColor)
        opts.textColor = customColors.black;
    if (!opts.bgColor)
        opts.bgColor = customColors.white;
    global.logs += `<div style='width: 85vw; text-align: center; align-items: center; justify-content: left; display: flex; background: ${opts.bgColor}; margin-left: ${((_a = opts.superPosition) !== null && _a !== void 0 ? _a : 0) * 8}px;'><div style='padding: 3px; font-size: 14px; font-weigth: 400; color: ${opts.textColor};'>${title}:</div>`;
    global.logs += `<div style='box-shadow: inset rgb(0, 0, 0, 0.1) 0 0 0 10000px; padding: 3px; font-size: 14px; font-weight: 200; color: ${opts.textColor};'>${message !== null && message !== void 0 ? message : ''}</div></div>`;
}
function newID() {
    return (Memory.ID += 1).toString();
}
function advancedFindDistance(originRoomName, goalRoomName, opts = {}) {
    const findRouteResult = Game.map.findRoute(originRoomName, goalRoomName, {
        routeCallback(roomName) {
            const roomMemory = Memory.rooms[roomName];
            if (!roomMemory) {
                if (roomName === goalRoomName)
                    return 1;
                return Infinity;
            }
            if (opts.avoidAbandonedRemotes && roomMemory.T === 'remote' && roomMemory.data[RemoteData.abandon])
                return Infinity;
            if (roomName === goalRoomName)
                return 1;
            if (opts.typeWeights && opts.typeWeights[roomMemory.T])
                return opts.typeWeights[roomMemory.T];
            return 1;
        },
    });
    if (findRouteResult === ERR_NO_PATH)
        return Infinity;
    return findRouteResult.length;
}
function findCarryPartsRequired(distance, income) {
    return Math.ceil((distance * 2 * income) / CARRY_CAPACITY);
}
function findLinkThroughput(range, income = 1) {
    return Math.min(LINK_CAPACITY / range, LINK_CAPACITY / income);
}
function findAvgBetweenCoords(pos1, pos2) {
    return {
        x: Math.floor((pos1.x + pos2.x) / 2),
        y: Math.floor((pos1.y + pos2.y) / 2),
    };
}
function getRange(x1, x2, y1, y2) {
    return Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));
}
function getRangeOfCoords(coord1, coord2) {
    return getRange(coord1.x, coord2.x, coord1.y, coord2.y);
}
function findClosestObject(target, objects) {
    let minRange = Infinity;
    let closest = undefined;
    for (const object of objects) {
        const range = getRange(target.x, object.pos.x, target.y, object.pos.y);
        if (range > minRange)
            continue;
        minRange = range;
        closest = object;
    }
    return closest;
}
function findClosestObjectInRange(target, objects, range) {
    let minRange = Infinity;
    let closest = undefined;
    for (const object of objects) {
        const range = getRange(target.x, object.pos.x, target.y, object.pos.y);
        if (range > minRange)
            continue;
        minRange = range;
        closest = object;
    }
    if (minRange <= range)
        return closest;
    return false;
}
function findClosestPos(target, positions) {
    let minRange = Infinity;
    let closest = undefined;
    for (const pos of positions) {
        const range = getRange(target.x, pos.x, target.y, pos.y);
        if (range > minRange)
            continue;
        minRange = range;
        closest = pos;
    }
    return closest;
}
function getRangeEuc(x1, x2, y1, y2) {
    return Math.round(Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)) * 10) / 10;
}
function findClosestObjectEuc(target, objects) {
    let minRange = Infinity;
    let closest = undefined;
    for (const object of objects) {
        const range = getRangeEuc(target.x, object.pos.x, target.y, object.pos.y);
        if (range > minRange)
            continue;
        minRange = range;
        closest = object;
    }
    return closest;
}
function findCPUColor() {
    const CPU = Game.cpu.getUsed();
    if (CPU > Game.cpu.limit * 0.6)
        return customColors.green;
    if (CPU > Game.cpu.limit * 0.9)
        return customColors.green;
    return customColors.green;
}
function packAsNum(pos) {
    return pos.x * roomDimensions + pos.y;
}
function packXYAsNum(x, y) {
    return x * roomDimensions + y;
}
function unpackNumAsCoord(packedPos) {
    return {
        x: Math.floor(packedPos / roomDimensions),
        y: Math.floor(packedPos % roomDimensions),
    };
}
function unpackNumAsPos(packedPos, roomName) {
    return new RoomPosition(Math.floor(packedPos / roomDimensions), Math.floor(packedPos % roomDimensions), roomName);
}
function findLargestTransactionAmount(budget, amount, roomName1, roomName2) {
    budget = Math.max(budget, 1);
    while (Game.market.calcTransactionCost(amount, roomName1, roomName2) >= budget) {
        amount = (amount - 1) * 0.8;
    }
    return Math.floor(amount);
}
function findClosestClaimType(roomName) {
    return Array.from(global.communes).sort((a, b) => Game.map.getRoomLinearDistance(roomName, a) - Game.map.getRoomLinearDistance(roomName, b))[0];
}
function findClosestRoomName(start, targets) {
    let minRange = Infinity;
    let closest = undefined;
    for (const target of targets) {
        const range = Game.map.getRoomLinearDistance(start, target);
        if (range > minRange)
            continue;
        minRange = range;
        closest = target;
    }
    return closest;
}
function randomIntRange(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}
function isCoordExit(coord) {
    return coord.x <= 0 || coord.x >= roomDimensions - 1 || coord.y <= 0 || coord.y >= roomDimensions - 1;
}
function randomTick(max = 20) {
    return Game.time % Math.floor(Math.random() * max) === 0;
}
function randomRange(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}
function cleanRoomMemory(roomName) {
    const roomMemory = Memory.rooms[roomName];
    for (const key in roomMemory) {
        if (!roomTypeProperties.has(key))
            continue;
        if (roomTypes[roomMemory.T].has(key))
            continue;
        delete roomMemory[key];
    }
}
function findSquadTradeableParts(tradeTypes, totalTradeableParts) {
    let smallestTradeType;
    let smallestRatio = Infinity;
    for (const type in tradeTypes) {
        const ratio = tradeTypes[type] / totalTradeableParts;
        if (ratio >= smallestRatio)
            continue;
        smallestTradeType = type;
        smallestRatio = ratio;
    }
    return Math.ceil(tradeTypes[smallestTradeType] * smallestRatio * 1.5);
}
function isNearRoomEdge(coord, minRange) {
    if (coord.x <= minRange)
        return true;
    if (coord.x - roomDimensions - 1 <= minRange)
        return true;
    if (coord.y <= minRange)
        return true;
    if (coord.y - roomDimensions - 1 <= minRange)
        return true;
    return false;
}
function scalePriority(capacity, amount, multiplier = 1, reverse) {
    if (reverse) {
        return (1 - amount / capacity) * multiplier;
    }
    return amount / capacity * multiplier;
}

class InternationalManager {
    update() {
        this.creepsByCombatRequest = {};
        this.creepsByHaulRequest = {};
        this.unspawnedPowerCreepNames = [];
        this.terminalRequests = {};
        this.tickID = 0;
        delete this._myOrders;
        delete this._orders;
        delete this._myOrdersCount;
        delete this._claimRequestsByScore;
        delete this._defaultMinCacheAmount;
    }
    orderManager() {
        if (MARKET_MAX_ORDERS * 0.8 > this.myOrdersCount)
            return;
        for (const ID in Game.market.orders) {
            if (!Game.market.orders[ID].active)
                Game.market.cancelOrder(ID);
        }
    }
    getSellOrder(resourceType, maxPrice = getAvgPrice(resourceType) * 1.2) {
        var _a;
        const orders = ((_a = this.orders.sell) === null || _a === void 0 ? void 0 : _a[resourceType]) || [];
        let bestOrder;
        for (const order of orders) {
            if (order.price >= maxPrice)
                continue;
            if (order.price < (bestOrder ? bestOrder.price : Infinity))
                bestOrder = order;
        }
        return bestOrder;
    }
    getBuyOrder(resourceType, minPrice = getAvgPrice(resourceType) * 0.8) {
        var _a;
        const orders = ((_a = this.orders.buy) === null || _a === void 0 ? void 0 : _a[resourceType]) || [];
        let bestOrder;
        for (const order of orders) {
            if (order.price <= minPrice)
                continue;
            if (order.price > (bestOrder ? bestOrder.price : 0))
                bestOrder = order;
        }
        return bestOrder;
    }
    advancedSellPixels() {
        if (!Memory.pixelSelling)
            return;
        if (Game.resources[PIXEL] === 0)
            return;
        const avgPrice = getAvgPrice(PIXEL, 7);
        const minPrice = avgPrice * 0.8;
        const buyOrder = this.getBuyOrder(PIXEL, minPrice);
        if (buyOrder) {
            Game.market.deal(buyOrder.id, Math.min(buyOrder.amount, Game.resources[PIXEL]));
            return;
        }
        const myPixelOrder = _.filter(Game.market.orders, o => o.type == 'sell' && o.resourceType == PIXEL)[0];
        const sellOrder = this.getSellOrder(PIXEL, Infinity);
        let price;
        if (sellOrder.price < avgPrice) {
            price = avgPrice;
        }
        else {
            price = sellOrder.price;
        }
        if (myPixelOrder) {
            if (Game.time % 100 == 0) {
                if (myPixelOrder.remainingAmount < Game.resources[PIXEL]) {
                    Game.market.extendOrder(myPixelOrder.id, Game.resources[PIXEL] - myPixelOrder.remainingAmount);
                    return;
                }
                else {
                    if (myPixelOrder.price == price)
                        return;
                    Game.market.changeOrderPrice(myPixelOrder.id, price - 0.001);
                    return;
                }
            }
            else {
                return;
            }
        }
        Game.market.createOrder({
            type: ORDER_SELL,
            resourceType: PIXEL,
            price: price - 0.001,
            totalAmount: Game.resources[PIXEL],
        });
    }
    advancedGeneratePixel() {
        if (!Memory.pixelGeneration)
            return;
        if (!mmoShardNames.has(Game.shard.name))
            return;
        if (Game.cpu.bucket !== 10000)
            return;
        Game.cpu.generatePixel();
    }
    getTerrainCoords(roomName) {
        if (!global.terrainCoords)
            global.terrainCoords = {};
        if (global.terrainCoords[roomName])
            return global.terrainCoords[roomName];
        global.terrainCoords[roomName] = new Uint8Array(2500);
        const terrain = Game.map.getRoomTerrain(roomName);
        for (let x = 0; x < roomDimensions; x += 1) {
            for (let y = 0; y < roomDimensions; y += 1) {
                global.terrainCoords[roomName][packXYAsNum(x, y)] = terrain.get(x, y) === TERRAIN_MASK_WALL ? 255 : 0;
            }
        }
        return global.terrainCoords[roomName];
    }
    newTickID() {
        return (this.tickID += 1).toString();
    }
    get myOrders() {
        if (this._myOrders)
            return this._myOrders;
        this._myOrders = {};
        for (const orderID in Game.market.orders) {
            const order = Game.market.orders[orderID];
            if (order.remainingAmount == 0)
                continue;
            if (!this._myOrders[order.roomName]) {
                this._myOrders[order.roomName] = {
                    sell: {},
                    buy: {},
                };
            }
            if (!this._myOrders[order.roomName][order.type][order.resourceType])
                this._myOrders[order.roomName][order.type][order.resourceType] = [];
            this._myOrders[order.roomName][order.type][order.resourceType].push(order);
        }
        return this._myOrders;
    }
    get orders() {
        if (this._orders)
            return this._orders;
        this._orders = {
            buy: {},
            sell: {},
        };
        const orders = Game.market.getAllOrders();
        for (const orderID in orders) {
            const order = orders[orderID];
            this._orders[order.type][order.resourceType]
                ? this._orders[order.type][order.resourceType].push(order)
                : (this._orders[order.type][order.resourceType] = [order]);
        }
        return this._orders;
    }
    get myOrdersCount() {
        if (this._myOrdersCount)
            return this._myOrdersCount;
        return (this._myOrdersCount = Object.keys(Game.market.orders).length);
    }
    get claimRequestsByScore() {
        if (this._claimRequestsByScore)
            return this._claimRequestsByScore;
        return (this._claimRequestsByScore = Object.keys(Memory.claimRequests).sort((a, b) => Memory.claimRequests[a].data[ClaimRequestData.score] -
            Memory.claimRequests[b].data[ClaimRequestData.score]));
    }
    get defaultMinCacheAmount() {
        if (this._defaultMinCacheAmount !== undefined)
            return this._defaultMinCacheAmount;
        const avgCPUUsagePercent = (Memory.stats.cpu.usage) / Game.cpu.limit;
        return this._defaultMinCacheAmount = Math.floor(Math.pow(avgCPUUsagePercent * 10, 2.2)) + 1;
    }
    get marketIsFunctional() {
        if (this._marketIsFunctional !== undefined)
            return this._marketIsFunctional;
        return (this._marketIsFunctional = Game.market.getHistory(RESOURCE_ENERGY).length);
    }
}
const internationalManager = new InternationalManager();

const settings = {
    breakingVersion: 90,
    roomVisuals: false,
    baseVisuals: false,
    dataVisuals: false,
    mapVisuals: false,
    CPULogging: false,
    roomStats: 2,
    allyPlayers: [
        'MarvinTMB',
        'PandaMaster',
        'lokenwow',
        'LittleBitBlue',
        'DefaultO',
        'Allorrian',
        'Aerics',
        'PlaidRabbit',
    ],
    nonAggressionPlayers: ['Q13214', 'HerrKai', 'Raggy', 'somygame', 'shley92822212'],
    tradeBlacklist: [''],
    pixelSelling: false,
    pixelGeneration: false,
    autoClaim: true,
    autoAttack: false,
    publicRamparts: false,
    allyTrading: true,
    marketUsage: true,
    logging: false,
    doChant: true,
    simpleAlliesSegment: 90,
};

const CPUUsers = {
    imcu: 0,
    cocu: 0,
    mvmcu: 0,
    pccu: 0,
    tccu: 0,
    roomcu: 0,
    smcu: 0,
};
function GetLevelOfStatName(statName) {
    const roomStatsLevel = Memory.roomStats;
    switch (statName) {
        case 'su':
        case 'eih':
            if (roomStatsLevel >= 1)
                return 1;
            else
                return 0;
        case 'cc':
        case 'tcc':
        case 'pcc':
        case 'cl':
        case 'bes':
        case 'es':
            if (roomStatsLevel >= 1)
                return 1.5;
            else
                return 0;
        case 'mh':
        case 'eib':
        case 'eos':
        case 'eou':
        case 'eob':
        case 'eoro':
        case 'eorwr':
        case 'eosp':
        case 'eop':
        case 'rc':
        case 'res':
        case 'reih':
        case 'reoro':
        case 'reob':
            if (roomStatsLevel >= 2)
                return 2;
            else
                return 0;
        case 'rrvmcu':
        case 'rcmcu':
        case 'rrolmcu':
        case 'retcmcu':
        case 'rprmcu':
        case 'acrmcu':
        case 'clrmcu':
        case 'tmcu':
        case 'smcu':
        case 'cormcu':
        case 'dmcu':
        case 'srmcu':
        case 'rocu':
        case 'rvmcu':
        case 'cmcu':
        case 'rolmcu':
        case 'rolmpccu':
        case 'rrolmpccu':
        case 'etcmcu':
        case 'prmcu':
        case 'prmpccu':
        case 'rprmpccu':
        case 'rrocu':
            if (Memory.CPULogging === true)
                return 3;
            else
                return 0;
        default:
            return 0;
    }
}
function GetRemoteStatsName(name) {
    switch (name) {
        case 'es':
        case 'eih':
        case 'eoro':
        case 'eob':
        case 'rocu':
        case 'rvmcu':
        case 'cmcu':
        case 'rolmcu':
        case 'rolmpccu':
        case 'etcmcu':
        case 'prmcu':
        case 'prmpccu':
            return ('r' + name);
        default:
            return name;
    }
}
class StatsManager {
    roomConfig(roomName, roomType) {
        const remoteLevel1 = {
            res: 0,
            gt: 0,
            reih: 0,
        };
        const remoteLevel2 = {
            ...remoteLevel1,
            reoro: 0,
            reob: 0,
            res: 0,
        };
        const remoteLevel3 = {
            rrocu: 0,
            rrvmcu: 0,
            rcmcu: 0,
            rrolmcu: 0,
            rrolmpccu: 0,
            retcmcu: 0,
            rprmcu: 0,
            rprmpccu: 0,
        };
        const communeLevel1 = {
            su: 0,
            eih: 0,
            cc: 0,
            tcc: 0,
            pcc: 0,
            cl: 0,
            bes: 0,
            es: 0,
            gt: 0,
        };
        const communeLevel2 = {
            ...communeLevel1,
            mh: 0,
            eib: 0,
            eos: 0,
            eou: 0,
            eob: 0,
            eoro: 0,
            eorwr: 0,
            eosp: 0,
            eop: 0,
            rc: 0,
            res: 0,
            reih: 0,
            reoro: 0,
            reob: 0,
        };
        const communeLevel3 = {
            rrvmcu: 0,
            rcmcu: 0,
            rrolmcu: 0,
            rolmcu: 0,
            rolmpccu: 0,
            rrolmpccu: 0,
            retcmcu: 0,
            prmcu: 0,
            rprmcu: 0,
            prmpccu: 0,
            rprmpccu: 0,
            acrmcu: 0,
            clrmcu: 0,
            tmcu: 0,
            smcu: 0,
            cormcu: 0,
            dmcu: 0,
            srmcu: 0,
            rocu: 0,
            rvmcu: 0,
            cmcu: 0,
            etcmcu: 0,
        };
        const roomStats = Memory.roomStats;
        let stats = undefined;
        if (roomType === 'commune') {
            switch (roomStats) {
                case 1:
                    stats = communeLevel1;
                    break;
                case 2:
                    stats = communeLevel2;
                    break;
                default:
                    stats = communeLevel1;
                    break;
            }
            if (Memory.CPULogging === true) {
                stats = {
                    ...stats,
                    ...communeLevel3,
                };
            }
            if (stats) {
                global.roomStats.commune[roomName] = stats;
                if (!Memory.stats.rooms[roomName])
                    Memory.stats.rooms[roomName] = stats;
            }
            return;
        }
        switch (roomStats) {
            case 1:
                stats = remoteLevel1;
                break;
            case 2:
                stats = remoteLevel2;
                break;
            default:
                stats = remoteLevel1;
                break;
        }
        if (Memory.CPULogging === true) {
            stats = {
                ...stats,
                ...remoteLevel3,
            };
        }
        if (stats)
            global.roomStats.remote[roomName] = stats;
    }
    roomPreTick(roomName, roomType) {
        this.roomConfig(roomName, roomType);
    }
    roomEndTick(roomName, roomType) {
        if (roomType === 'commune') {
            const globalStats = global.roomStats.commune[roomName];
            if (globalStats) {
                globalStats.gt = Game.time;
            }
        }
        else if (roomType === 'remote') {
            const globalStats = global.roomStats.remote[roomName];
            if (globalStats) {
                globalStats.gt = Game.time;
            }
        }
    }
    roomCommuneFinalEndTick(roomName, room, forceUpdate = false) {
        const roomMemory = Memory.rooms[roomName];
        const roomStats = Memory.stats.rooms[roomName];
        const globalCommuneStats = global.roomStats.commune[roomName];
        if (globalCommuneStats.gt !== Game.time && !forceUpdate) {
            customLog('StatsManager', `RoomCommuneFinalEndTick: ${roomName} stats not updated`, {
                textColor: customColors.white,
                bgColor: customColors.red,
            });
            return;
        }
        const each250Ticks = Game.time % 250 === 0;
        Object.entries(global.roomStats.remote)
            .filter(([roomName]) => roomMemory.remotes.includes(roomName))
            .forEach(([remoteRoomName, remoteRoomStats]) => {
            var _a;
            if (globalCommuneStats.gt === Game.time) {
                globalCommuneStats.rc += 1;
                globalCommuneStats.reih += remoteRoomStats.reih;
                globalCommuneStats.reoro += remoteRoomStats.reoro;
                globalCommuneStats.reob += remoteRoomStats.reob;
                if (Memory.CPULogging === true) {
                    globalCommuneStats.rrocu += remoteRoomStats.rrocu;
                    globalCommuneStats.rrvmcu += remoteRoomStats.rrvmcu;
                    globalCommuneStats.rcmcu += remoteRoomStats.rcmcu;
                    globalCommuneStats.rrolmcu += remoteRoomStats.rrolmcu;
                    globalCommuneStats.rrolmpccu += remoteRoomStats.rrolmpccu;
                    globalCommuneStats.retcmcu += remoteRoomStats.retcmcu;
                    globalCommuneStats.rprmcu += remoteRoomStats.rprmcu;
                    globalCommuneStats.rprmpccu += remoteRoomStats.rprmpccu;
                }
                if (each250Ticks)
                    globalCommuneStats.res += ((_a = Game.rooms[remoteRoomName]) === null || _a === void 0 ? void 0 : _a.resourcesInStoringStructures.energy) || 0;
            }
        });
        if (room) {
            globalCommuneStats.cc = room.myCreepsAmount;
            globalCommuneStats.tcc = room.creepsFromRoomAmount;
            globalCommuneStats.pcc = room.myPowerCreepsAmount;
            const spawns = room.structures.spawn;
            if (spawns.length > 0)
                globalCommuneStats.su =
                    spawns.reduce((sum, spawn) => sum +
                        ((spawn.spawning && spawn.spawning.remainingTime) || spawn.renewed || !spawn.RCLActionable
                            ? 1
                            : 0), 0) / spawns.length;
            if (each250Ticks || forceUpdate) {
                if (room.controller && room.controller.my) {
                    const progressPercentage = room.controller.progress / room.controller.progressTotal;
                    globalCommuneStats.cl =
                        progressPercentage < 1 ? room.controller.level + progressPercentage : room.controller.level;
                }
                globalCommuneStats.es = room.resourcesInStoringStructures.energy;
                globalCommuneStats.bes = room.resourcesInStoringStructures.battery * 10;
            }
            else {
                globalCommuneStats.es = roomStats.es;
                globalCommuneStats.bes = roomStats.bes;
                globalCommuneStats.cl = roomStats.cl;
            }
        }
        const activeGlobalStatNames = Object.keys(globalCommuneStats);
        const activeStatNames = Object.keys(roomStats);
        const nonActiveStats = activeStatNames.filter(stat => !activeGlobalStatNames.includes(stat));
        nonActiveStats.forEach(name => {
            delete globalCommuneStats[name];
            delete roomStats[name];
        });
        activeGlobalStatNames.forEach(name => {
            const statLevel = GetLevelOfStatName(name);
            if (statLevel > 0) {
                let globalValue = globalCommuneStats[name];
                const value = roomStats[name];
                if (!value)
                    roomStats[name] = 0;
                if (!globalValue)
                    globalValue = 0;
                switch (statLevel) {
                    case 1:
                        roomStats[name] = this.average(value, globalValue);
                        break;
                    case 1.5:
                        roomStats[name] = this.round(globalValue);
                        break;
                    case 2:
                        if (forceUpdate || (Memory.roomStats && Memory.roomStats >= 2))
                            roomStats[name] = this.average(value, globalValue);
                        else
                            roomStats[name] = 0;
                        break;
                    case 3:
                        if (forceUpdate || Memory.CPULogging === true) {
                            roomStats[name] = this.average(value, globalValue);
                        }
                        else
                            roomStats[name] = 0;
                        break;
                }
            }
        });
    }
    internationalConfig() {
        Memory.stats = {
            lastReset: 0,
            tickLength: 0,
            lastTickTimestamp: 0,
            resources: {
                pixels: 0,
                cpuUnlocks: 0,
                accessKeys: 0,
                credits: 0,
            },
            cpu: {
                bucket: 0,
                usage: Game.cpu.limit,
                limit: 0,
            },
            memory: {
                usage: 0,
                limit: 2097,
            },
            gcl: {
                level: 0,
                progress: 0,
                progressTotal: 0,
            },
            gpl: {
                level: 0,
                progress: 0,
                progressTotal: 0,
            },
            rooms: {},
            constructionSiteCount: 0,
            CPUUsers,
        };
        global.roomStats = { commune: {}, remote: {} };
        global.CPUUsers = CPUUsers;
        this.internationalEndTick();
    }
    internationalPreTick() {
        global.CPUUsers = CPUUsers;
        global.roomStats = { commune: {}, remote: {} };
    }
    internationalEndTick() {
        const managerCPUStart = Game.cpu.getUsed();
        const timestamp = Date.now();
        global.lastReset = (global.lastReset || 0) + 1;
        Memory.stats.lastReset = global.lastReset;
        Memory.stats.tickLength = timestamp - Memory.stats.lastTickTimestamp;
        Memory.stats.lastTickTimestamp = timestamp;
        Memory.stats.constructionSiteCount = global.constructionSitesCount || 0;
        Memory.stats.resources = {
            pixels: Game.resources[PIXEL],
            cpuUnlocks: Game.resources[CPU_UNLOCK],
            accessKeys: Game.resources[ACCESS_KEY],
            credits: Game.market.credits,
        };
        Memory.stats.cpu = {
            bucket: Game.cpu.bucket,
            limit: Game.cpu.limit,
            usage: this.average(Memory.stats.cpu.usage, Game.cpu.getUsed()),
        };
        Memory.stats.memory.usage = Math.floor(RawMemory.get().length / 1000);
        Memory.stats.gcl = {
            progress: Game.gcl.progress,
            progressTotal: Game.gcl.progressTotal,
            level: Game.gcl.level,
        };
        Memory.stats.gpl = {
            progress: Game.gpl.progress,
            progressTotal: Game.gpl.progressTotal,
            level: Game.gpl.level,
        };
        Memory.stats.heap = Game.cpu.getHeapStatistics();
        const globalRoomKeys = Object.keys(global.roomStats.commune);
        const notCheckedCommuneRooms = Object.keys(Memory.stats.rooms).filter(room => !globalRoomKeys.includes(room));
        globalRoomKeys.forEach(roomName => {
            this.roomCommuneFinalEndTick(roomName, Game.rooms[roomName]);
        });
        notCheckedCommuneRooms.forEach(roomName => {
            const roomType = Memory.rooms[roomName].T;
            if (roomType === 'commune') {
                this.roomConfig(roomName, roomType);
                this.roomCommuneFinalEndTick(roomName, Game.rooms[roomName], true);
            }
            else {
                delete Memory.stats.rooms[roomName];
            }
        });
        delete global.roomStats;
        if (Memory.CPULogging === true && Memory.stats.CPUUsers !== undefined) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            const CPUUsers = Memory.stats.CPUUsers;
            Memory.stats.CPUUsers = {
                cocu: this.average(CPUUsers.cocu, global.CPUUsers.cocu),
                imcu: this.average(CPUUsers.imcu, global.CPUUsers.imcu),
                mvmcu: this.average(CPUUsers.mvmcu, global.CPUUsers.mvmcu),
                pccu: this.average(CPUUsers.pccu, global.CPUUsers.pccu),
                tccu: this.average(CPUUsers.tccu, global.CPUUsers.tccu),
                roomcu: this.average(CPUUsers.roomcu, global.CPUUsers.roomcu),
                smcu: this.average(CPUUsers.smcu, cpuUsed),
            };
            customLog('Stats Manager', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
        }
        else {
            Memory.stats.CPUUsers = {
                cocu: undefined,
                imcu: undefined,
                mvmcu: undefined,
                pccu: undefined,
                tccu: undefined,
                roomcu: undefined,
                smcu: undefined,
            };
        }
    }
    round(value, decimals = 8) {
        const multiplier = Math.pow(10, decimals || 0);
        return Math.round(value * multiplier) / multiplier;
    }
    average(avg, number, averagedOverTickCount = 1000, precision) {
        if (!avg)
            avg = 0;
        if (!number)
            number = 0;
        avg -= avg / averagedOverTickCount;
        avg += number / averagedOverTickCount;
        return this.round(avg, precision);
    }
}
const statsManager = new StatsManager();
const globalStatsUpdater = function (roomName, name, value, nonRoomStat = false) {
    if (nonRoomStat) {
        global.CPUUsers[name] = value;
        return;
    }
    const roomStatName = name;
    const updateStats = GetLevelOfStatName(roomStatName) > 0;
    if (updateStats && global.roomStats) {
        if (global.roomStats.commune[roomName])
            global.roomStats.commune[roomName][roomStatName] += value;
        else if (global.roomStats.remote[roomName])
            global.roomStats.remote[roomName][GetRemoteStatsName(roomStatName)] += value;
    }
};

class ConfigManager {
    run() {
        this.configMemory();
        this.configGlobal();
    }
    configMemory() {
        var _a, _b, _c, _d;
        if (Memory.breakingVersion)
            return;
        Memory.breakingVersion = settings.breakingVersion;
        Memory.me =
            ((_b = (_a = Object.values(Game.structures)[0]) === null || _a === void 0 ? void 0 : _a.owner) === null || _b === void 0 ? void 0 : _b.username) ||
                ((_d = (_c = Object.values(Game.creeps)[0]) === null || _c === void 0 ? void 0 : _c.owner) === null || _d === void 0 ? void 0 : _d.username) ||
                'username';
        Memory.roomVisuals = settings.roomVisuals;
        Memory.baseVisuals = settings.baseVisuals;
        Memory.dataVisuals = settings.dataVisuals;
        Memory.mapVisuals = settings.mapVisuals;
        Memory.CPULogging = Game.shard.name === 'performanceServer' ? true : settings.CPULogging;
        Memory.roomStats = Game.shard.name === 'performanceServer' ? 2 : settings.roomStats;
        Memory.allyPlayers = settings.allyPlayers;
        Memory.nonAggressionPlayers = settings.nonAggressionPlayers;
        Memory.pixelSelling = settings.pixelSelling;
        Memory.pixelGeneration = settings.pixelGeneration;
        Memory.tradeBlacklist = settings.tradeBlacklist;
        Memory.autoClaim = settings.autoClaim;
        Memory.autoAttack = settings.autoAttack;
        Memory.publicRamparts = settings.publicRamparts;
        Memory.allyTrading = settings.allyTrading;
        Memory.marketUsage = settings.marketUsage;
        Memory.logging =
            Game.shard.name !== 'performanceServer'
                ? Object.keys(Game.spawns).length > 0 || Game.shard.name.search('shard[0-3]') === -1
                : false;
        Memory.doChant = settings.doChant;
        Memory.simpleAlliesSegment = settings.simpleAlliesSegment;
        Memory.ID = 0;
        Memory.chantIndex = 0;
        Memory.constructionSites = {};
        Memory.players = {};
        Memory.claimRequests = {};
        Memory.combatRequests = {};
        Memory.allyCreepRequests = {};
        statsManager.internationalConfig();
    }
    configGlobal() {
        if (global.constructed)
            return;
        global.constructed = true;
        global.roomManagers = {};
        global.communeManagers = {};
        global.packedRoomNames = {};
        global.unpackedRoomNames = {};
    }
}
const configManager = new ConfigManager();

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var lodash = {exports: {}};

/**
 * @license
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

(function (module, exports) {
(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined$1;

  /** Used as the semantic version number. */
  var VERSION = '3.10.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled regexes. */
  var regexpEscapes = {
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined$1,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined$1,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * ((order === 'asc' || order === true) ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = context.ArrayBuffer,
        clearTimeout = context.clearTimeout,
        parseFloat = context.parseFloat,
        pow = Math.pow,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = getNative(context, 'Set'),
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = context.Uint8Array,
        WeakMap = getNative(context, 'WeakMap');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeCreate = getNative(Object, 'create'),
        nativeFloor = Math.floor,
        nativeIsArray = getNative(Array, 'isArray'),
        nativeIsFinite = context.isFinite,
        nativeKeys = getNative(Object, 'keys'),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = getNative(Date, 'now'),
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.support = {};

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = arrayCopy(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = arrayCopy(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = arrayCopy(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined$1 : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
    function arrayConcat(array, other) {
      var index = -1,
          length = array.length,
          othIndex = -1,
          othLength = other.length,
          result = Array(length + othLength);

      while (++index < length) {
        result[index] = array[index];
      }
      while (++othIndex < othLength) {
        result[index++] = other[othIndex];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function arrayExtremum(array, iteratee, comparator, exValue) {
      var index = -1,
          length = array.length,
          computed = exValue,
          result = computed;

      while (++index < length) {
        var value = array[index],
            current = +iteratee(value);

        if (comparator(current, computed)) {
          computed = current;
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function arraySum(array, iteratee) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +iteratee(array[length]) || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined$1 ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined$1 || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var index = -1,
          props = keys(source),
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined$1 && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return source == null
        ? object
        : baseCopy(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          isNil = collection == null,
          isArr = !isNil && isArrayLike(collection),
          length = isArr ? collection.length : 0,
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined$1;
        } else {
          result[index] = isNil ? undefined$1 : collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined$1
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined$1
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined$1) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined$1;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(collection, iteratee, comparator, exValue) {
      var computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = +iteratee(value, index, collection);
        if (comparator(current, computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined$1 || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isObjectLike(value) && isArrayLike(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined$1 && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined$1;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined$1 && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : undefined$1;
          if (!(result === undefined$1 ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== undefined$1 || (key in toObject(object)));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(srcValue),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue
          ? (srcValue !== undefined$1 || (key in object))
          : baseIsEqual(srcValue, object[key], undefined$1, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
          props = isSrcArr ? undefined$1 : keys(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined$1,
              isCommon = result === undefined$1;

          if (isCommon) {
            result = srcValue;
          }
          if ((result !== undefined$1 || (isSrcArr && !(key in object))) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined$1,
          isCommon = result === undefined$1;

      if (isCommon) {
        result = srcValue;
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (isArrayLike(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined$1 : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0;
      while (length--) {
        var index = indexes[length];
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + nativeFloor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined$1 || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var action = actions[index];
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined$1;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined$1,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined$1) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      var result = new ArrayBuffer(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 ? sources[length - 2] : undefined$1,
            guard = length > 2 ? sources[2] : undefined$1,
            thisArg = length > 1 ? sources[length - 1] : undefined$1;

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : undefined$1;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined$1 : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    function createCache(values) {
      return (nativeCreate && Set) ? new SetCache(values) : null;
    }

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = undefined$1;
        }
        var result = createWrapper(func, flag, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
    function createDefaults(assigner, customizer) {
      return restParam(function(args) {
        var object = args[0];
        if (object == null) {
          return object;
        }
        args.push(customizer);
        return assigner.apply(undefined$1, args);
      });
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(comparator, exValue) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined$1;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        if (iteratee.length == 1) {
          collection = isArray(collection) ? collection : toIterable(collection);
          var result = arrayExtremum(collection, iteratee, comparator, exValue);
          if (!(collection.length && result === exValue)) {
            return result;
          }
        }
        return baseExtremum(collection, iteratee, comparator, exValue);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined$1;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var wrapper,
            length = arguments.length,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
            wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined$1;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined$1 && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined$1) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined$1) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
    function createObjectMapper(isMapKeys) {
      return function(object, iteratee, thisArg) {
        var result = {};
        iteratee = getCallback(iteratee, thisArg, 3);

        baseForOwn(object, function(value, key, object) {
          var mapped = iteratee(value, key, object);
          key = isMapKeys ? mapped : key;
          value = isMapKeys ? value : mapped;
          result[key] = value;
        });
        return result;
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, undefined$1, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined$1 && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          Ctor = isBindKey ? undefined$1 : createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : undefined$1,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : undefined$1,
                newHoldersRight = isCurry ? undefined$1 : argsHolders,
                newPartials = isCurry ? args : undefined$1,
                newPartialsRight = isCurry ? undefined$1 : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined$1, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(func);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        precision = precision === undefined$1 ? 0 : (+precision || 0);
        if (precision) {
          precision = pow(10, precision);
          return func(number * precision) / precision;
        }
        return func(number);
      };
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var callback = getCallback(iteratee);
        return (iteratee == null && callback === baseCallback)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined$1;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined$1;
      }
      var data = isBindKey ? undefined$1 : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined$1, newData);
      } else {
        result = createHybridWrapper.apply(undefined$1, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index],
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined$1;

        if (result !== undefined$1) {
          if (result) {
            continue;
          }
          return false;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isLoose) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key],
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined$1;

        // Recursively compare objects (susceptible to call stack limits).
        if (!(result === undefined$1 ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name,
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = pairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined$1 : object[key];
      return isNative(value) ? value : undefined$1;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined$1 : func.apply(object, args);
    }

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      if (!(funcName in LazyWrapper.prototype)) {
        return false;
      }
      var other = lodash[funcName];
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function mergeDefaults(objectValue, sourceValue) {
      return objectValue === undefined$1 ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length;

      var allowIndexes = !!length && isLength(length) &&
        (isArray(object) || isArguments(object));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isArrayLike(value)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(nativeFloor(size) || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return (isObjectLike(array) && isArrayLike(array))
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined$1;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value);
        if (index < length &&
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    var intersection = restParam(function(arrays) {
      var othLength = arrays.length,
          othIndex = othLength,
          caches = Array(length),
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (othIndex--) {
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
      }
      var array = arrays[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined$1;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined$1 : isSorted;
        isSorted = false;
      }
      var callback = getCallback();
      if (!(iteratee == null && callback === baseCallback)) {
        iteratee = callback(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var index = -1,
          length = 0;

      array = arrayFilter(array, function(group) {
        if (isArrayLike(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      var result = Array(length);
      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      iteratee = bindCallback(iteratee, thisArg, 4);
      return arrayMap(result, function(group) {
        return arrayReduce(group, iteratee, undefined$1, true);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArrayLike(array)) {
          var result = result
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
    var zipWith = restParam(function(arrays) {
      var length = arrays.length,
          iteratee = length > 2 ? arrays[length - 2] : undefined$1,
          thisArg = length > 1 ? arrays[length - 1] : undefined$1;

      if (length > 2 && typeof iteratee == 'function') {
        length -= 2;
      } else {
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined$1;
        thisArg = undefined$1;
      }
      arrays.length = length;
      return unzipWith(arrays, iteratee, thisArg);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a new array joining a wrapped array with any additional arrays
     * and/or values.
     *
     * @name concat
     * @memberOf _
     * @category Chain
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var wrapped = _(array).concat(2, [3], [[4]]);
     *
     * console.log(wrapped.value());
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var wrapperConcat = restParam(function(values) {
      values = baseFlatten(values);
      return this.thru(function(array) {
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
      });
    });

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;

      var interceptor = function(value) {
        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
      };
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(interceptor);
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined$1;
      }
      if (typeof predicate != 'function' || thisArg !== undefined$1) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined$1);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
     * and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined$1;
      }
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sample(collection, POSITIVE_INFINITY);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined$1;
      }
      if (typeof predicate != 'function' || thisArg !== undefined$1) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined$1;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = undefined$1;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = undefined$1;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined$1;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        maxTimeoutId = timeoutId = trailingCall = undefined$1;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined$1;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined$1;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined$1;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that runs each argument through a corresponding
     * transform function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified as individual functions or arrays of functions.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * modded(1, 2);
     * // => [1, 4]
     *
     * modded(5, 10);
     * // => [25, 20]
     */
    var modArgs = restParam(function(func, transforms) {
      transforms = baseFlatten(transforms);
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = transforms.length;
      return restParam(function(args) {
        var index = nativeMin(args.length, length);
        while (index--) {
          args[index] = transforms[index](args[index]);
        }
        return func.apply(this, args);
      });
    });

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined$1, undefined$1, undefined$1, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined$1 ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, undefined$1, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      return typeof customizer == 'function'
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
        : baseClone(value, isDeep);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      return typeof customizer == 'function'
        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
        : baseClone(value, true);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return isObjectLike(value) && isArrayLike(value) &&
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !value.length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined$1;
      var result = customizer ? customizer(value, other) : undefined$1;
      return  result === undefined$1 ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return isObject(value) && objToString.call(value) == funcTag;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined$1;
      return baseIsMatch(object, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      var Ctor;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined$1 || hasOwnProperty.call(value, result);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined$1;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = undefined$1;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = createDefaults(assign, assignDefaults);

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = createDefaults(merge, mergeDefaults);

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined$1 : baseGet(object, toPath(path), path + '');
      return result === undefined$1 ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        path = last(path);
        result = hasOwnProperty.call(object, path);
      }
      return result || (isLength(object.length) && isIndex(path, object.length) &&
        (isArray(object) || isArguments(object)));
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = undefined$1;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? undefined$1 : object.constructor;
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isArrayLike(object))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || isArguments(object)) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    var mapKeys = createObjectMapper(true);

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    var mapValues = createObjectMapper();

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      object = toObject(object);

      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined$1 : object[path];
      if (result === undefined$1) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined$1 : object[last(path)];
        }
        result = result === undefined$1 ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == lastIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined$1);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (end === undefined$1) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = undefined$1;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined$1
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, escapeRegExpChar)
        : (string || '(?:)');
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = trim(string);
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = undefined$1;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined$1, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined$1;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = undefined$1;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined$1, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = undefined$1;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj ? keys(source) : undefined$1,
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined$1;

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      root._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = undefined$1;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = nativeFloor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Calculates `n` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Calculates `n` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(gt, NEGATIVE_INFINITY);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(lt, POSITIVE_INFINITY);

    /**
     * Calculates `n` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined$1;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      return iteratee.length == 1
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.modArgs = modArgs;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.floor = floor;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.eq = isEqual;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(result.__takeCount__, n);
        } else {
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type != LAZY_MAP_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined$1) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
      return this.reverse().takeWhile(predicate, thisArg).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(POSITIVE_INFINITY);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName),
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var args = retUnwrapped ? [1] : arguments,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var interceptor = function(value) {
          return (retUnwrapped && chainAll)
            ? lodashFunc(value, 1)[0]
            : lodashFunc.apply(undefined$1, arrayPush([value], args));
        };

        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 },
            onlyLazy = isLazy && !isHybrid;

        if (retUnwrapped && !chainAll) {
          if (onlyLazy) {
            value = value.clone();
            value.__actions__.push(action);
            return func.call(value);
          }
          return lodashFunc.call(undefined$1, this.value())[0];
        }
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push(action);
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined$1, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined$1 }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.concat = wrapperConcat;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Rhino with CommonJS support.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(commonjsGlobal));
}(lodash, lodash.exports));

Room.prototype.advancedSell = function (resourceType, amount, targetAmount) {
    var _a;
    const mySpecificOrders = ((_a = internationalManager.myOrders[this.name]) === null || _a === void 0 ? void 0 : _a[ORDER_SELL][resourceType]) || [];
    for (const order of mySpecificOrders)
        amount -= order.remainingAmount;
    if (amount <= targetAmount * 0.5)
        return false;
    const order = internationalManager.getBuyOrder(resourceType);
    if (order) {
        const dealAmount = findLargestTransactionAmount(this.terminal.store.energy * 0.75, amount, this.name, order.roomName);
        const result = Game.market.deal(order.id, Math.min(dealAmount, order.remainingAmount), this.name);
        if (result === OK && resourceType === 'energy') {
            globalStatsUpdater(this.name, 'eos', amount);
        }
        return result == OK;
    }
    if (mySpecificOrders.length)
        return false;
    if (internationalManager.myOrdersCount === MARKET_MAX_ORDERS)
        return false;
    const orders = internationalManager.orders[ORDER_SELL][resourceType];
    const price = Math.max(Math.min.apply(Math, orders.map(o => o.price)) * 0.99, getAvgPrice(resourceType) * 0.8);
    const result = Game.market.createOrder({
        roomName: this.name,
        type: ORDER_SELL,
        resourceType,
        price,
        totalAmount: amount,
    });
    if (result === OK && resourceType === 'energy') {
        globalStatsUpdater(this.name, 'eos', amount);
    }
    return result == OK;
};
Room.prototype.advancedBuy = function (resourceType, amount, targetAmount) {
    var _a;
    const mySpecificOrders = ((_a = internationalManager.myOrders[this.name]) === null || _a === void 0 ? void 0 : _a[ORDER_BUY][resourceType]) || [];
    for (const order of mySpecificOrders)
        amount -= order.remainingAmount;
    if (amount <= targetAmount * 0.5)
        return false;
    const order = internationalManager.getSellOrder(resourceType, getAvgPrice(resourceType) * 1.2);
    if (order) {
        const dealAmount = findLargestTransactionAmount(this.terminal.store.energy * 0.75, amount, this.name, order.roomName);
        const result = Game.market.deal(order.id, Math.min(dealAmount, order.remainingAmount), this.name);
        if (result === OK && resourceType === 'energy') {
            globalStatsUpdater(this.name, 'eib', amount);
        }
        return result == OK;
    }
    if (mySpecificOrders.length)
        return false;
    if (internationalManager.myOrdersCount === MARKET_MAX_ORDERS)
        return false;
    const orders = internationalManager.orders[ORDER_BUY][resourceType];
    const price = Math.min(Math.max.apply(Math, orders.map(o => o.price)) * 1.01, getAvgPrice(resourceType) * 1.2);
    const result = Game.market.createOrder({
        roomName: this.name,
        type: ORDER_BUY,
        resourceType,
        price,
        totalAmount: amount,
    });
    if (result === OK && resourceType === 'energy') {
        globalStatsUpdater(this.name, 'eib', amount);
    }
    return result == OK;
};

var AllyRequestTypes;
(function (AllyRequestTypes) {
    AllyRequestTypes[AllyRequestTypes["resource"] = 0] = "resource";
    AllyRequestTypes[AllyRequestTypes["defense"] = 1] = "defense";
    AllyRequestTypes[AllyRequestTypes["attack"] = 2] = "attack";
    AllyRequestTypes[AllyRequestTypes["execute"] = 3] = "execute";
    AllyRequestTypes[AllyRequestTypes["hate"] = 4] = "hate";
    AllyRequestTypes[AllyRequestTypes["funnel"] = 5] = "funnel";
    AllyRequestTypes[AllyRequestTypes["build"] = 6] = "build";
})(AllyRequestTypes || (AllyRequestTypes = {}));
class AllyManager {
    getAllyRequests() {
        if (!Memory.allyTrading)
            return;
        const allyArray = Array.from(Memory.allyPlayers);
        if (!allyArray.length)
            return;
        if (Game.time % (10 + allyArray.length) >= allyArray.length)
            return;
        const currentAllyName = allyArray[Game.time % allyArray.length];
        if (RawMemory.foreignSegment && RawMemory.foreignSegment.username === currentAllyName) {
            this.allyRequests = JSON.parse(RawMemory.foreignSegment.data);
        }
        const nextAllyName = allyArray[(Game.time + 1) % allyArray.length];
        RawMemory.setActiveForeignSegment(nextAllyName, Memory.simpleAlliesSegment);
    }
    tickConfig() {
        this.myRequests = [];
        this.allyRequests = [];
    }
    endTickManager() {
        if (!Memory.allyTrading)
            return;
        if (Object.keys(RawMemory.segments).length < 10) {
            RawMemory.segments[Memory.simpleAlliesSegment] = JSON.stringify(this.myRequests || []);
            RawMemory.setPublicSegments([Memory.simpleAlliesSegment]);
        }
    }
    requestAttack(roomName, playerName, minDamage = 0, minMeleeHeal = 0, minRangedHeal = 0, priority = 0) {
        this.myRequests.push({
            requestType: AllyRequestTypes.attack,
            roomName,
            playerName,
            minDamage,
            minMeleeHeal,
            minRangedHeal,
            priority,
        });
    }
    requestDefense(roomName, minDamage = 0, minMeleeHeal = 0, minRangedHeal = 0, priority = 0) {
        this.myRequests.push({
            requestType: AllyRequestTypes.defense,
            roomName,
            minDamage,
            minMeleeHeal,
            minRangedHeal,
            priority,
        });
    }
    requestHate(playerName, hateAmount, priority = 0) {
        this.myRequests.push({
            requestType: AllyRequestTypes.hate,
            playerName,
            hateAmount,
            priority,
        });
    }
    requestResource(roomName, resourceType, maxAmount, priority = 0) {
        this.myRequests.push({
            requestType: AllyRequestTypes.resource,
            resourceType,
            maxAmount,
            roomName,
            priority,
        });
    }
    requestBuild(roomName, priority = 0) {
        this.myRequests.push({
            requestType: AllyRequestTypes.build,
            roomName,
            priority,
        });
    }
}
const allyManager = new AllyManager();

function loadLocalMarketMemory() {
    let segment = JSON.parse(InterShardMemory.getLocal() || '{}');
    return segment.market || { departures: {} };
}
function storeLocalMarketMemory(memory) {
    let segment = JSON.parse(InterShardMemory.getLocal() || '{}');
    segment.market = memory;
    InterShardMemory.setLocal(JSON.stringify(segment));
}
const tradeBlacklistRoomNames = [
    'W21N9',
    'W21N8',
    'W17N16',
];
class TerminalManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    preTickRun() {
        const { terminal } = this.communeManager.room;
        if (!terminal)
            return;
        if (!terminal.RCLActionable)
            return;
        this.createTerminalRequests();
    }
    createTerminalRequests() {
        const { room } = this.communeManager;
        const { terminal } = room;
        for (const resourceTarget of terminalResourceTargets) {
            if (resourceTarget.max <= 0)
                continue;
            if (resourceTarget.conditions && !resourceTarget.conditions(this.communeManager))
                continue;
            let targetAmount = (terminal.store.getCapacity() * resourceTarget.max) / 2;
            if (terminal.store[resourceTarget.resource] >= targetAmount * 0.7)
                continue;
            const ID = newID();
            internationalManager.terminalRequests[ID] = {
                ID,
                priority: 1 - terminal.store[resourceTarget.resource] / targetAmount,
                resource: resourceTarget.resource,
                amount: targetAmount * 0.9 - terminal.store[resourceTarget.resource],
                roomName: room.name,
            };
        }
    }
    run() {
        const { room } = this.communeManager;
        const { terminal } = room;
        if (!terminal)
            return;
        if (!terminal.RCLActionable)
            return;
        this.createAllyRequests();
        if (terminal.cooldown > 0)
            return;
        if (this.respondToTerminalRequests())
            return;
        if (this.respondToAllyRequests())
            return;
        if (!Memory.marketUsage)
            return;
        if (!internationalManager.marketIsFunctional)
            return;
        this.manageResources();
    }
    createAllyRequests() {
        const { room } = this.communeManager;
        const { terminal } = room;
        let targetAmount = this.communeManager.minStoredEnergy * 1.5;
        let resource = RESOURCE_ENERGY;
        if (terminal.store.getUsedCapacity(resource) < targetAmount) {
            let priority;
            const { controller } = this.communeManager.room;
            if (controller.level < 8) {
                priority = Math.max(Math.min(controller.progress / controller.progressTotal, 0.9), 0.2);
            }
            else
                priority = 0.5;
            allyManager.requestResource(room.name, resource, targetAmount * 1.2 - room.resourcesInStoringStructures[resource], priority);
        }
        for (resource of minerals) {
            const mineralAmount = terminal.store.getUsedCapacity(resource);
            if (mineralAmount > 5000)
                continue;
            allyManager.requestResource(room.name, resource, 7000 - mineralAmount, 0.25);
        }
    }
    findBestTerminalRequest() {
        let lowestScore = Infinity;
        let bestRequest;
        for (const ID in internationalManager.terminalRequests) {
            const request = internationalManager.terminalRequests[ID];
            const score = Game.map.getRoomLinearDistance(this.communeManager.room.name, request.roomName) + request.priority * 100;
            if (score >= lowestScore)
                continue;
            if (request.roomName === this.communeManager.room.name)
                continue;
            if (Game.market.calcTransactionCost(request.amount, this.communeManager.room.name, request.roomName) * 2 >
                this.communeManager.room.terminal.store.energy)
                continue;
            if (this.communeManager.room.terminal.store.getUsedCapacity(request.resource) < request.amount * 2)
                continue;
            bestRequest = request;
            lowestScore = score;
        }
        return bestRequest;
    }
    respondToTerminalRequests() {
        if (this.communeManager.room.resourcesInStoringStructures.energy < this.communeManager.minStoredEnergy)
            return false;
        const request = this.findBestTerminalRequest();
        if (!request)
            return false;
        this.communeManager.room.terminal.send(request.resource, request.amount, request.roomName, 'Terminal request response');
        delete internationalManager.terminalRequests[request.ID];
        return true;
    }
    respondToAllyRequests() {
        const { room } = this.communeManager;
        const { terminal } = room;
        if (!allyManager.allyRequests)
            return false;
        const resourceRequests = allyManager.allyRequests.filter(request => request.requestType === AllyRequestTypes.resource);
        resourceRequests.sort((a, b) => a.priority - b.priority).reverse();
        let amount = 0;
        for (const request of resourceRequests) {
            if (!request.maxAmount)
                continue;
            amount = 0;
            if (minerals.includes(request.resourceType)) {
                if (terminal.store.getUsedCapacity(request.resourceType) < 20000)
                    continue;
                amount = Math.min(request.maxAmount, terminal.store.getUsedCapacity(request.resourceType) / 2);
                terminal.send(request.resourceType, amount, request.roomName, `Sending ${request} to ally`);
                terminal.intended = true;
                return true;
            }
            if (request.resourceType === RESOURCE_ENERGY) {
                if (room.resourcesInStoringStructures.energy < room.communeManager.minStoredEnergy * 2)
                    continue;
                if (request.priority >
                    1 -
                        Math.pow(terminal.store.getUsedCapacity(request.resourceType) / (terminal.store.getCapacity() / 2), 1.2))
                    continue;
                amount = Math.min(request.maxAmount, terminal.store.getUsedCapacity(request.resourceType) / 2);
                terminal.send(request.resourceType, amount, request.roomName, `Sending ${request} to ally`);
                terminal.intended = true;
                return true;
            }
            continue;
        }
        return false;
    }
    manageResources() {
        const { room } = this.communeManager;
        const { terminal } = room;
        for (const resourceTarget of terminalResourceTargets) {
            if (resourceTarget.conditions && !resourceTarget.conditions(this.communeManager))
                continue;
            let min = terminal.store.getCapacity() * resourceTarget.min;
            if (terminal.store[resourceTarget.resource] < min) {
                min *= 1.2;
                if (room.advancedBuy(resourceTarget.resource, min - terminal.store[resourceTarget.resource], min))
                    return;
                continue;
            }
            let max = terminal.store.getCapacity() * resourceTarget.max;
            if (terminal.store[resourceTarget.resource] < max)
                continue;
            max *= 0.8;
            if (room.advancedSell(resourceTarget.resource, terminal.store[resourceTarget.resource] - max, max))
                return;
        }
    }
    isTradingPossible() {
        return this.room.terminal && this.room.storage;
    }
    runNewVersion() {
        this.room = this.communeManager.room;
        this.terminal = this.room.terminal;
        if (!this.room.storage || !this.room.terminal)
            return;
        if (Game.cpu.bucket > 6000 || (Game.cpu.bucket > 3000 && Game.time % 10 == 0)) {
            this.doTransfers();
        }
        if (this.room.name != 'W17N16' && this.room.name != 'W21N9' && this.room.name != 'W21N8')
            return;
        if (!this.isTradingPossible())
            return;
        if (Game.cpu.bucket > 6000 || (Game.cpu.bucket > 3000 && Game.time % 10 == 0)) {
            this.doTrading();
        }
    }
    amountInRoom(resource, roomName = null) {
        let room = this.room;
        if (roomName)
            room = Game.rooms[roomName];
        if (!room)
            console.log('Somethings wrong.  room is null.  RN: ' + roomName);
        return ((room.terminal.store[resource] || 0) +
            (room.storage.store[resource] || 0) +
            (room.structures.factory ? room.structures.factory[0].store[resource] || 0 : 0));
    }
    sendResourceToRoom(resource, rooms) {
        for (let room of rooms) {
            if (this.room.name == room)
                continue;
            if (this.amountInRoom(resource) > this.amountInRoom(resource, room) * 2) {
                let transferAmount = Math.min(this.amountInRoom(resource) / 2, this.terminal.store[resource], this.terminal.store[RESOURCE_ENERGY]);
                if (transferAmount == 0)
                    continue;
                let result = this.terminal.send(resource, transferAmount, room);
                if (result != OK) {
                    console.log(`Error ${result} in transfer from ${this.room.name} to ${room}. ${resource}`);
                }
                else
                    return true;
            }
        }
        return false;
    }
    doTransfers() {
        if (this.terminal.cooldown > 0)
            return false;
        if (Game.shard.name != 'shard3')
            return false;
        let amountOfEnergy = this.amountInRoom(RESOURCE_ENERGY);
        if (amountOfEnergy > 450000) {
            let result = _.min(_.filter(Game.rooms, rm => rm.controller &&
                rm.controller.my &&
                rm.storage &&
                rm.terminal &&
                rm.name != 'W19N15' &&
                rm.name != 'W15N18'), room => (room.terminal.store[RESOURCE_ENERGY] || 0) + (room.storage.store[RESOURCE_ENERGY] || 0));
            let lowestRoom = result === Infinity ? null : result;
            if (lowestRoom != null &&
                lowestRoom.name != this.room.name &&
                amountOfEnergy - this.amountInRoom(RESOURCE_ENERGY, lowestRoom.name) > 100000 &&
                lowestRoom.terminal &&
                lowestRoom.terminal.store.getFreeCapacity(RESOURCE_ENERGY) > 50000) {
                console.log('LowTransfer to: ' + lowestRoom.name);
                let amountToTransfer = Math.min(this.terminal.store[RESOURCE_ENERGY], 50000);
                let transactionCost = Game.market.calcTransactionCost(1000, this.room.name, lowestRoom.name);
                amountToTransfer = (1000 / (1000 + transactionCost)) * amountToTransfer * 0.99;
                let result = this.terminal.send(RESOURCE_ENERGY, amountToTransfer, lowestRoom.name);
                if (result != OK) {
                    console.log('Error in energy balance transfer.  ' + result);
                }
                return result == OK;
            }
        }
        if (this.room.name == 'W19N15') {
            for (let resource of [RESOURCE_MIST, RESOURCE_WIRE, RESOURCE_CONDENSATE, RESOURCE_CELL]) {
                if (this.terminal.store[resource] > 100) {
                    let result = this.terminal.send(resource, this.terminal.store[resource], 'W17N16');
                    if (result != OK) {
                        console.log('Error in transfer.  ' + result + resource);
                    }
                    return result == OK;
                }
            }
        }
        if (this.sendResourceToRoom(RESOURCE_MIST, ['W14N18']))
            return true;
        if (this.sendResourceToRoom(RESOURCE_CONDENSATE, ['W15N18', 'W17N16']))
            return true;
        if (this.sendAllToRooms(RESOURCE_MUSCLE, ['W17N16']))
            return true;
        if (this.sendAllToRooms(RESOURCE_TISSUE, ['W18N16']))
            return true;
        if (this.sendAllToRooms(RESOURCE_PHLEGM, ['W18N16', 'W15N18']))
            return true;
        if (this.sendAllToRooms(RESOURCE_CELL, ['W17N16', 'W15N18']))
            return true;
        if (this.sendAllToRooms('XGH2O', ['W17N16']))
            return true;
        if (this.sendAllToRooms(RESOURCE_WIRE, ['W17N16', 'W18N16', 'W15N18']))
            return true;
        if (this.sendAllToRooms(RESOURCE_SWITCH, ['W15N18']))
            return true;
        if (this.sendSomeToRooms(RESOURCE_COMPOSITE, ['W18N16']))
            return true;
        if (this.sendAllToRooms(RESOURCE_TRANSISTOR, ['W18N16']))
            return true;
        if (this.sendAllToRooms(RESOURCE_MICROCHIP, ['W17N16']))
            return true;
        if (this.terminal.store[RESOURCE_CONCENTRATE] > 100 &&
            this.room.name != 'W18N16' &&
            this.room.name != 'W15N18') {
            let result = this.terminal.send(RESOURCE_CONCENTRATE, this.terminal.store[RESOURCE_CONCENTRATE], 'W15N18');
            if (result != OK) {
                console.log('Error in transfer.  ' + result + RESOURCE_CONCENTRATE);
            }
            return result == OK;
        }
        if (this.amountInRoom(RESOURCE_OPS) > this.amountInRoom(RESOURCE_OPS, 'W15N18') * 2 &&
            this.room.name != 'W15N18' &&
            this.terminal.store[RESOURCE_OPS]) {
            let result = this.terminal.send(RESOURCE_OPS, Math.min(this.amountInRoom(RESOURCE_OPS) / 2, this.terminal.store[RESOURCE_OPS], this.terminal.store[RESOURCE_ENERGY]), 'W15N18');
            if (result != OK) {
                console.log('Error in transfer.  ' + result + RESOURCE_OPS);
            }
            return result == OK;
        }
        if (this.amountInRoom(RESOURCE_OPS) > this.amountInRoom(RESOURCE_OPS, 'W17N16') * 2 &&
            this.room.name != 'W17N16' &&
            this.terminal.store[RESOURCE_OPS]) {
            let result = this.terminal.send(RESOURCE_OPS, Math.min(this.amountInRoom(RESOURCE_OPS) / 2, this.terminal.store[RESOURCE_OPS], this.terminal.store[RESOURCE_ENERGY]), 'W17N16');
            if (result != OK) {
                console.log('Error in transfer.  ' + result + RESOURCE_OPS);
            }
            return result == OK;
        }
        if (this.amountInRoom(RESOURCE_CONCENTRATE) > this.amountInRoom(RESOURCE_CONCENTRATE, 'W18N16') * 2 &&
            this.room.name != 'W18N16' &&
            this.terminal.store[RESOURCE_CONCENTRATE]) {
            let result = this.terminal.send(RESOURCE_CONCENTRATE, Math.min(this.amountInRoom(RESOURCE_CONCENTRATE) / 2, this.terminal.store[RESOURCE_CONCENTRATE], this.terminal.store[RESOURCE_ENERGY]), 'W18N16');
            if (result != OK) {
                console.log('Error in transfer.  ' + result + RESOURCE_CONCENTRATE);
            }
            return result == OK;
        }
        if (this.amountInRoom(RESOURCE_CONCENTRATE) > this.amountInRoom(RESOURCE_CONCENTRATE, 'W15N18') * 2 &&
            this.room.name != 'W15N18' &&
            this.terminal.store[RESOURCE_CONCENTRATE]) {
            let result = this.terminal.send(RESOURCE_CONCENTRATE, Math.min(this.amountInRoom(RESOURCE_CONCENTRATE) / 2, this.terminal.store[RESOURCE_CONCENTRATE], this.terminal.store[RESOURCE_ENERGY]), 'W15N18');
            if (result != OK) {
                console.log('Error in transfer.  ' + result + RESOURCE_CONCENTRATE);
            }
            return result == OK;
        }
        if (this.amountInRoom(RESOURCE_EXTRACT) > this.amountInRoom(RESOURCE_EXTRACT, 'W18N16') * 2 &&
            this.room.name != 'W18N16' &&
            this.terminal.store[RESOURCE_EXTRACT]) {
            let result = this.terminal.send(RESOURCE_EXTRACT, Math.min(this.amountInRoom(RESOURCE_EXTRACT) / 2, this.terminal.store[RESOURCE_EXTRACT], this.terminal.store[RESOURCE_ENERGY]), 'W18N16');
            if (result != OK) {
                console.log('Error in transfer.  ' + result + RESOURCE_EXTRACT);
            }
            return result == OK;
        }
        if (this.amountInRoom(RESOURCE_KEANIUM_BAR) > this.amountInRoom(RESOURCE_KEANIUM_BAR, 'W17N16') * 2 &&
            this.room.name != 'W17N16' &&
            this.terminal.store[RESOURCE_KEANIUM_BAR]) {
            let result = this.terminal.send(RESOURCE_KEANIUM_BAR, Math.min(this.amountInRoom(RESOURCE_KEANIUM_BAR) / 2, this.terminal.store[RESOURCE_KEANIUM_BAR], this.terminal.store[RESOURCE_ENERGY]), 'W17N16');
            if (result != OK) {
                console.log('Error in transfer.  ' + result + RESOURCE_KEANIUM_BAR);
            }
            return result == OK;
        }
        if (this.amountInRoom(RESOURCE_REDUCTANT) > this.amountInRoom(RESOURCE_REDUCTANT, 'W17N16') * 2 &&
            this.room.name != 'W17N16' &&
            this.terminal.store[RESOURCE_REDUCTANT]) {
            let result = this.terminal.send(RESOURCE_REDUCTANT, Math.min(this.amountInRoom(RESOURCE_REDUCTANT) / 2, this.terminal.store[RESOURCE_REDUCTANT], this.terminal.store[RESOURCE_ENERGY]), 'W17N16');
            if (result != OK) {
                console.log('Error in transfer.  ' + result + RESOURCE_REDUCTANT);
            }
            return result == OK;
        }
        if (this.amountInRoom(RESOURCE_REDUCTANT) > this.amountInRoom(RESOURCE_REDUCTANT, 'W15N18') * 2 &&
            this.room.name != 'W15N18' &&
            this.terminal.store[RESOURCE_REDUCTANT]) {
            let result = this.terminal.send(RESOURCE_REDUCTANT, Math.min(this.amountInRoom(RESOURCE_REDUCTANT) / 2, this.terminal.store[RESOURCE_REDUCTANT], this.terminal.store[RESOURCE_ENERGY]), 'W15N18');
            if (result != OK) {
                console.log('Error in transfer.  ' + result + RESOURCE_REDUCTANT);
            }
            return result == OK;
        }
        if (this.amountInRoom(RESOURCE_REDUCTANT) > this.amountInRoom(RESOURCE_REDUCTANT, 'W18N16') * 2 &&
            this.room.name != 'W18N16' &&
            this.terminal.store[RESOURCE_REDUCTANT]) {
            let result = this.terminal.send(RESOURCE_REDUCTANT, Math.min(this.amountInRoom(RESOURCE_REDUCTANT) / 2, this.terminal.store[RESOURCE_REDUCTANT], this.terminal.store[RESOURCE_ENERGY]), 'W18N16');
            if (result != OK) {
                console.log('Error in transfer.  ' + result + RESOURCE_REDUCTANT);
            }
            return result == OK;
        }
        if (this.sendResourceToRoom(RESOURCE_REDUCTANT, ['W18N16', 'W17N16']))
            return true;
        if (this.balanceResourceToRCL8Rooms([RESOURCE_POWER])) ;
        if (this.room.name != 'W17N16')
            for (let resource of [RESOURCE_SPIRIT]) {
                if (this.terminal.store[resource] > 0) {
                    let result = this.terminal.send(resource, Math.min(this.terminal.store[resource], this.terminal.store[RESOURCE_ENERGY]), 'W17N16');
                    if (result != OK) {
                        console.log(`Error ${result} in ${resource} transfer.`);
                    }
                    return result == OK;
                }
            }
        return false;
    }
    sendAllToRooms(resource, rooms) {
        if (!this.room.terminal.store[resource])
            return false;
        let result = _.min(rooms.map(rm => Game.rooms[rm]).filter(rm => rm.terminal && rm.storage && rm != this.room), rm => (rm.storage.store[resource] || 0) + (rm.terminal.store[resource] || 0));
        let neediestRoom = result === Infinity ? null : result;
        if (neediestRoom != null) {
            let amount = Math.min(this.terminal.store[resource], this.terminal.store[RESOURCE_ENERGY]);
            if (rooms.length > 1)
                amount = Math.min(amount, Math.ceil((Memory.masterPlan.resources[resource] || 0) / (rooms.length + 1)));
            if (rooms.includes(this.room.name)) {
                if (this.amountInRoom(resource) / 2 < this.amountInRoom(resource, neediestRoom.name))
                    return false;
                amount = Math.min((this.amountInRoom(resource) - this.amountInRoom(resource, neediestRoom.name)) / 2, this.terminal.store[resource], this.terminal.store[RESOURCE_ENERGY]);
            }
            if (amount <= 0)
                return false;
            let result = this.terminal.send(resource, amount, neediestRoom.name);
            if (result != OK) {
                console.log(`sendAllToRooms: Error ${result} in ${resource} transfer from ${this.room.name}.`);
            }
            return result == OK;
        }
        return false;
    }
    sendSomeToRooms(resource, rooms) {
        if (!this.room.terminal.store[resource])
            return false;
        for (let room of rooms) {
            if (this.amountInRoom(resource) > this.amountInRoom(resource, room) * 2 &&
                this.room.name != room &&
                this.terminal.store[resource]) {
                let result = this.terminal.send(resource, Math.min(this.amountInRoom(resource) / 2, this.terminal.store[resource], this.terminal.store[RESOURCE_ENERGY]), room);
                console.log(`Sending some ${resource} from ${this.room.name} to ${room}.`);
                if (result != OK) {
                    console.log('Error in transfer.  ' + result + resource);
                }
                return result == OK;
            }
        }
        return false;
    }
    balanceResourceToRCL8Rooms(resources) {
        let possibleRooms = _.filter(Game.rooms, rm => rm.controller && rm.controller.my && rm.controller.level == 8 && rm.terminal && rm != this.room);
        for (let resource of resources) {
            let thisRoomAmount = (this.terminal.store[resource] || 0) + (this.room.storage.store[resource] || 0);
            if (thisRoomAmount === 0)
                continue;
            for (let targetRoom of possibleRooms) {
                let targetRoomAmount = (targetRoom.terminal.store[resource] || 0) + (targetRoom.storage.store[resource] || 0);
                if (thisRoomAmount > targetRoomAmount * 2) {
                    let amount = Math.min(thisRoomAmount / 2, this.terminal.store[resource], this.terminal.store[RESOURCE_ENERGY]);
                    if (amount == 0)
                        continue;
                    let result = this.terminal.send(resource, amount, targetRoom.name);
                    if (result != OK) {
                        console.log(`balanceResourceToRCL8Rooms: Error ${result} in ${resource} transfer from ${this.room.name}.`);
                    }
                    return result == OK;
                }
            }
        }
        return false;
    }
    getBestSell(resource, energyPrice) {
        return _.first(_.sortBy(_.map(this.dataCache[ORDER_SELL][resource].filter(ord => ord.remainingAmount > 0), order => ({
            orderId: order.id,
            remainingAmount: order.remainingAmount,
            adjCost: order.price +
                (energyPrice * Game.market.calcTransactionCost(1000, this.room.name, order.roomName)) /
                    1000,
            origPrice: order.price,
        })), o => o.adjCost));
    }
    getBestBuy(resource, energyPrice) {
        return _.first(_.sortBy(_.map(this.dataCache[ORDER_BUY][resource]
            .filter(ord => !tradeBlacklistRoomNames.includes(ord.roomName))
            .filter(ord => ord.remainingAmount > 0 && ord.amount > 0), order => ({
            orderId: order.id,
            remainingAmount: order.remainingAmount,
            adjCost: order.price -
                (energyPrice * Game.market.calcTransactionCost(1000, this.room.name, order.roomName)) /
                    1000,
            origPrice: order.price,
        })), o => -o.adjCost));
    }
    updateBuyAvg(energyPrice) {
        if (Game.time % 10 == 0) {
            if (!this.room.memory.marketData.buyAvg)
                this.room.memory.marketData.buyAvg = {};
            let resourceToTrackBuy = [
                RESOURCE_METAL,
                RESOURCE_BIOMASS,
                RESOURCE_SILICON,
                RESOURCE_MIST,
                RESOURCE_ZYNTHIUM_KEANITE,
                RESOURCE_UTRIUM_LEMERGITE,
                RESOURCE_POWER,
                ..._.keys(COMMODITIES),
            ];
            for (let resource of resourceToTrackBuy) {
                let bestBuy = this.getBestBuy(resource, energyPrice);
                if (bestBuy) {
                    if (!this.room.memory.marketData.buyAvg[resource])
                        this.room.memory.marketData.buyAvg[resource] = bestBuy.adjCost;
                    else
                        this.room.memory.marketData.buyAvg[resource] =
                            this.room.memory.marketData.buyAvg[resource] * 0.98 + bestBuy.adjCost * 0.02;
                }
                else {
                    this.room.memory.marketData.buyAvg[resource] = this.room.memory.marketData.buyAvg[resource] * 0.995;
                    if (!this.room.memory.marketData.buyAvg[resource])
                        this.room.memory.marketData.buyAvg[resource] = 0;
                }
            }
            let marketData = loadLocalMarketMemory();
            marketData[this.room.name] = this.room.memory.marketData;
            storeLocalMarketMemory(marketData);
        }
    }
    updateSellAvg(energyPrice) {
        if (Game.time % 10 == 0) {
            if (!this.room.memory.marketData.sellAvg)
                this.room.memory.marketData.sellAvg = {};
            let resourceToTrackSell = [
                RESOURCE_ZYNTHIUM_KEANITE,
                RESOURCE_UTRIUM_LEMERGITE,
                RESOURCE_POWER,
                RESOURCE_METAL,
                RESOURCE_BIOMASS,
                RESOURCE_SILICON,
                RESOURCE_MIST,
                ..._.keys(COMMODITIES),
            ];
            for (let resource of resourceToTrackSell) {
                let bestSell = this.getBestSell(resource, energyPrice);
                if (bestSell) {
                    let daysOutside3Sigma = _.filter(Game.market.getHistory(resource), mh => bestSell.origPrice > mh.avgPrice + 3 * mh.stddevPrice).length;
                    if (daysOutside3Sigma >= 12) {
                        continue;
                    }
                    if (!this.room.memory.marketData.sellAvg[resource])
                        this.room.memory.marketData.sellAvg[resource] = bestSell.adjCost;
                    else
                        this.room.memory.marketData.sellAvg[resource] =
                            this.room.memory.marketData.sellAvg[resource] * 0.995 + bestSell.adjCost * 0.005;
                }
                else {
                    this.room.memory.marketData.sellAvg[resource] =
                        this.room.memory.marketData.sellAvg[resource] * 1.005;
                    if (!this.room.memory.marketData.sellAvg[resource])
                        this.room.memory.marketData.sellAvg[resource] = 99999999;
                }
            }
            this.room.memory.marketData.aquire = {};
            for (let resource of [..._.keys(COMMODITIES)]) {
                if (resource == RESOURCE_ENERGY)
                    continue;
                this.room.memory.marketData.aquire[resource] = null;
            }
            this.room.memory.marketData.aquire[RESOURCE_ENERGY] = Math.min(this.room.memory.marketData[RESOURCE_ENERGY], (this.room.memory.marketData.sellAvg[RESOURCE_BATTERY] *
                COMMODITIES[RESOURCE_ENERGY].components[RESOURCE_BATTERY]) /
                COMMODITIES[RESOURCE_ENERGY].amount);
            for (let resource of [
                RESOURCE_HYDROGEN,
                RESOURCE_OXYGEN,
                RESOURCE_UTRIUM,
                RESOURCE_KEANIUM,
                RESOURCE_LEMERGIUM,
                RESOURCE_ZYNTHIUM,
                RESOURCE_CATALYST,
                RESOURCE_UTRIUM_BAR,
                RESOURCE_LEMERGIUM_BAR,
                RESOURCE_ZYNTHIUM_BAR,
                RESOURCE_KEANIUM_BAR,
                RESOURCE_OXIDANT,
                RESOURCE_REDUCTANT,
                RESOURCE_PURIFIER,
                RESOURCE_BATTERY,
            ]) {
                let buildCost = 0;
                for (let comp in COMMODITIES[resource].components) {
                    let amount = COMMODITIES[resource].components[comp];
                    if (comp == RESOURCE_ENERGY) {
                        buildCost += this.room.memory.marketData.aquire[RESOURCE_ENERGY] * amount;
                    }
                    else {
                        buildCost +=
                            this.room.memory.marketData.sellAvg[comp] * amount;
                    }
                }
                this.room.memory.marketData.aquire[resource] = Math.min(this.room.memory.marketData.sellAvg[resource], buildCost / COMMODITIES[resource].amount);
            }
            for (let resource of [RESOURCE_ZYNTHIUM_KEANITE, RESOURCE_UTRIUM_LEMERGITE, RESOURCE_HYDROXIDE]) {
                let buildCost = 0;
                switch (resource) {
                    case RESOURCE_ZYNTHIUM_KEANITE:
                        buildCost =
                            this.room.memory.marketData.aquire[RESOURCE_ZYNTHIUM] +
                                this.room.memory.marketData.aquire[RESOURCE_KEANIUM];
                        break;
                    case RESOURCE_UTRIUM_LEMERGITE:
                        buildCost =
                            this.room.memory.marketData.aquire[RESOURCE_UTRIUM] +
                                this.room.memory.marketData.aquire[RESOURCE_LEMERGIUM];
                        break;
                    case RESOURCE_HYDROXIDE:
                        buildCost =
                            this.room.memory.marketData.aquire[RESOURCE_OXYGEN] +
                                this.room.memory.marketData.aquire[RESOURCE_HYDROGEN];
                        break;
                }
                this.room.memory.marketData.aquire[resource] = Math.min(this.room.memory.marketData.sellAvg[resource], buildCost);
            }
            let gReactionCost = this.room.memory.marketData.aquire[RESOURCE_ZYNTHIUM_KEANITE] +
                this.room.memory.marketData.aquire[RESOURCE_UTRIUM_LEMERGITE];
            for (let resource of [RESOURCE_GHODIUM, RESOURCE_GHODIUM_MELT]) {
                let buildCost = 0;
                for (let comp in COMMODITIES[resource].components) {
                    let amount = COMMODITIES[resource].components[comp];
                    if (comp == RESOURCE_ENERGY) {
                        buildCost += this.room.memory.marketData.aquire[RESOURCE_ENERGY] * amount;
                    }
                    else if (comp == RESOURCE_GHODIUM) {
                        buildCost += gReactionCost * amount;
                    }
                    else {
                        buildCost +=
                            this.room.memory.marketData.sellAvg[comp] * amount;
                    }
                }
                this.room.memory.marketData.aquire[resource] = Math.min(this.room.memory.marketData.sellAvg[resource], buildCost / COMMODITIES[resource].amount);
                if (resource == RESOURCE_GHODIUM)
                    this.room.memory.marketData.aquire[resource] = Math.min(this.room.memory.marketData.aquire[resource], gReactionCost);
            }
            for (let resource of [RESOURCE_METAL, RESOURCE_BIOMASS, RESOURCE_SILICON, RESOURCE_MIST]) {
                let priceToUse = this.room.memory.marketData.sellAvg[resource];
                if (priceToUse === undefined || priceToUse === null || priceToUse >= 99999999) {
                    this.room.memory.marketData.buyAvg
                        ? (priceToUse = this.room.memory.marketData.buyAvg[resource] * 1.5)
                        : 99999999;
                }
                this.room.memory.marketData.aquire[resource] = priceToUse;
            }
            let didWork = true;
            while (didWork) {
                didWork = false;
                for (let resource of [
                    ..._.keys(COMMODITIES),
                ]) {
                    if (resource == RESOURCE_ENERGY)
                        continue;
                    if (this.room.memory.marketData.aquire[resource])
                        continue;
                    let buildCost = 0;
                    for (let comp in COMMODITIES[resource].components) {
                        let amount = COMMODITIES[resource].components[comp];
                        buildCost +=
                            this.room.memory.marketData.aquire[comp] * amount;
                    }
                    if (buildCost) {
                        this.room.memory.marketData.aquire[resource] = Math.min(this.room.memory.marketData.sellAvg[resource] || 99999999, buildCost / COMMODITIES[resource].amount);
                        if (this.room.memory.marketData.aquire[resource])
                            didWork = true;
                    }
                }
            }
            let marketData = loadLocalMarketMemory();
            marketData[this.room.name] = this.room.memory.marketData;
            storeLocalMarketMemory(marketData);
        }
    }
    useTerminal(bestEnergySellOrder) {
        if (this.room.name == 'W21N8') {
            let purchaseTarget = [
                { valuePrice: 1.8, targetAmount: 20000, orderSize: 2000, resource: RESOURCE_HYDROGEN },
                { valuePrice: 10, targetAmount: 20000, orderSize: 2000, resource: RESOURCE_REDUCTANT },
                { valuePrice: 0.7, targetAmount: 10000, orderSize: 2000, resource: RESOURCE_ZYNTHIUM },
                { valuePrice: 0.8, targetAmount: 10000, orderSize: 2000, resource: RESOURCE_KEANIUM },
            ];
            this.extendBuyOrders(purchaseTarget);
        }
        return;
    }
    buyAt(resource, price, energyPrice) {
        let amountOnHand = (this.room.terminal.store[resource] || 0) + (this.room.storage.store[resource] || 0);
        let targetAmount = 10000;
        let epislon = Math.ceil(targetAmount / 10);
        if (amountOnHand < targetAmount) {
            let bestSell = this.getBestSell(resource, energyPrice);
            if (!bestSell)
                return false;
            let amountToBuy = targetAmount - amountOnHand;
            amountToBuy += epislon;
            amountToBuy = Math.min(amountToBuy, Math.floor(this.terminal.store[RESOURCE_ENERGY] / 2));
            let rate = 1;
            let avg = this.room.memory.marketData.sellAvg[resource];
            if (bestSell.adjCost > price) {
                return false;
            }
            console.log('buyAt ' +
                resource +
                ' bestSell: ' +
                JSON.stringify(bestSell) +
                ' qty: ' +
                amountToBuy +
                ' avg*rate: ' +
                avg * rate);
            let result = Game.market.deal(bestSell.orderId, amountToBuy, this.room.name);
            if (result != 0)
                console.log(result);
            else
                return true;
        }
        return false;
    }
    sellAt(resource, price, energyPrice) {
        if (!this.terminal.store[resource])
            return false;
        let bestSell = this.getBestBuy(resource, energyPrice);
        if (bestSell && bestSell.adjCost > price) {
            let result = Game.market.deal(bestSell.orderId, Math.min(this.terminal.store[resource], bestSell.remainingAmount), this.room.name);
            if (result != OK)
                console.log('Error ' +
                    result +
                    ' while sellAt the order. ' +
                    JSON.stringify({
                        orderId: bestSell.orderId,
                        amount: this.terminal.store[resource],
                        roomName: this.room.name,
                        order: Game.market.getOrderById(bestSell.orderId),
                    }));
            return true;
        }
        return false;
    }
    extendSellOrders(sellTarget) {
        for (let thisTarget of sellTarget) {
            let resource = thisTarget.resource;
            let sellOrder = _.head(_.filter(_.values(Game.market.orders), ord => ord.resourceType == resource && ord.roomName == this.room.name && ord.type == ORDER_SELL));
            if (!sellOrder)
                continue;
            let totalBetweenStorageAndTerminal = (this.room.terminal.store[resource] || 0) + (this.room.storage.store[resource] || 0);
            let targetOrderSize = Math.min(totalBetweenStorageAndTerminal - thisTarget.sellPast, thisTarget.orderSize);
            let amountToAdjust = Math.min(targetOrderSize, totalBetweenStorageAndTerminal) - sellOrder.remainingAmount;
            if (amountToAdjust > 0) {
                let result = Game.market.extendOrder(sellOrder.id, amountToAdjust);
                if (result != OK) {
                    console.log('doTrading extendOrder failed in ' +
                        this.room.name +
                        ' for ' +
                        resource +
                        '.  Error code' +
                        result +
                        '.');
                }
            }
        }
    }
    extendBuyOrders(purchaseTarget) {
        for (let thisTarget of purchaseTarget) {
            let targetOrderPrice = thisTarget.valuePrice;
            let result = _.min(this.dataCache[ORDER_BUY][thisTarget.resource], ord => -ord.price);
            let highestOrder = result === Infinity ? null : result;
            if (highestOrder)
                targetOrderPrice = Math.min(thisTarget.valuePrice, highestOrder.price);
            let totalBetweenStorageAndTerminal = (this.room.terminal.store[thisTarget.resource] || 0) +
                (this.room.storage.store[thisTarget.resource] || 0);
            let buyOrder = _.head(_.filter(_.values(Game.market.orders), ord => ord.resourceType == thisTarget.resource &&
                ord.roomName == this.room.name &&
                ord.type == ORDER_BUY));
            if (!buyOrder) {
                let amountToBuy = Math.min(thisTarget.orderSize, thisTarget.targetAmount - totalBetweenStorageAndTerminal);
                if (amountToBuy > 0) {
                    console.log('Creating order: rsc:' +
                        thisTarget.resource +
                        ' qty:' +
                        amountToBuy +
                        ' price:' +
                        targetOrderPrice +
                        JSON.stringify([totalBetweenStorageAndTerminal, thisTarget]));
                    let result = Game.market.createOrder({
                        roomName: this.room.name,
                        type: ORDER_BUY,
                        resourceType: thisTarget.resource,
                        price: targetOrderPrice,
                        totalAmount: amountToBuy,
                    });
                    if (result != OK)
                        console.log('Error ' +
                            result +
                            ' while creating the order.' +
                            JSON.stringify({
                                ORDER_BUY,
                                resource: thisTarget.resource,
                                targetOrderPrice,
                                amountToBuy,
                                roomName: this.room.name,
                            }));
                }
                continue;
            }
            let amountToAdjust = thisTarget.targetAmount - totalBetweenStorageAndTerminal - buyOrder.remainingAmount;
            amountToAdjust = Math.min(amountToAdjust, thisTarget.orderSize - buyOrder.remainingAmount);
            if (amountToAdjust < thisTarget.orderSize * 0.05)
                continue;
            if (amountToAdjust > 0) {
                console.log('Extending order.  ' +
                    JSON.stringify({
                        amountToAdjust: amountToAdjust,
                        totalBetweenStorageAndTerminal: totalBetweenStorageAndTerminal,
                        buyOrder: buyOrder,
                    }));
                let result = Game.market.extendOrder(buyOrder.id, amountToAdjust);
                if (result != OK) {
                    console.log('doTrading extendOrder failed in ' +
                        this.room.name +
                        ' for ' +
                        thisTarget.resource +
                        '.  Error code' +
                        result +
                        '.');
                }
            }
        }
    }
    tryBuyingStuff(resourcesToDirectBuy, energyPrice, rateOverride) {
        for (let resource of resourcesToDirectBuy) {
            let totalBetweenStorageAndTerminal = (this.room.terminal.store[resource] || 0) + (this.room.storage.store[resource] || 0);
            let amountOnHand = (this.room.terminal.store[resource] || 0) + (this.room.storage.store[resource] || 0);
            let targetAmount = 10000;
            let epislon = Math.ceil(targetAmount / 10);
            if (amountOnHand < targetAmount) {
                let bestSell = this.getBestSell(resource, energyPrice);
                if (!bestSell)
                    continue;
                let amountToBuy = targetAmount - amountOnHand;
                amountToBuy += epislon;
                amountToBuy = Math.min(amountToBuy, Math.floor(this.terminal.store[RESOURCE_ENERGY] / 2));
                let rate = 1;
                if (totalBetweenStorageAndTerminal < 20000)
                    rate = 1.1;
                if (totalBetweenStorageAndTerminal < 10000)
                    rate = 1.3;
                if (totalBetweenStorageAndTerminal < 5000)
                    rate = 1.5;
                if ((COMMODITIES[resource] &&
                    COMMODITIES[resource].level > 0) ||
                    resource == RESOURCE_METAL ||
                    resource == RESOURCE_SILICON ||
                    resource == RESOURCE_BIOMASS ||
                    resource == RESOURCE_MIST) {
                    rate = 1;
                    if (totalBetweenStorageAndTerminal < 1000)
                        rate = 1.05;
                }
                if (resource == RESOURCE_ZYNTHIUM || resource == RESOURCE_ZYNTHIUM_KEANITE)
                    rate = 4;
                if (rateOverride)
                    rate = rateOverride;
                let avg = this.room.memory.marketData.sellAvg[resource];
                if (avg * rate < bestSell.adjCost) {
                    console.log('not buying : ' +
                        resource +
                        ' ' +
                        JSON.stringify(bestSell) +
                        ' avg*rate:' +
                        avg * rate +
                        ' amount:' +
                        amountToBuy +
                        '  adj:' +
                        bestSell.adjCost);
                    continue;
                }
                console.log('buying ' +
                    resource +
                    ' bestSell: ' +
                    JSON.stringify(bestSell) +
                    ' qty: ' +
                    amountToBuy +
                    ' avg*rate: ' +
                    avg * rate);
                let result = Game.market.deal(bestSell.orderId, amountToBuy, this.room.name);
                if (result != 0)
                    console.log(result);
                else
                    return;
            }
        }
    }
    trySellingOffStuff(resources, energyPrice) {
        let importedResourceCosts = {};
        if (this.room.name == 'W21N9') {
            importedResourceCosts[RESOURCE_UTRIUM] = 5;
            importedResourceCosts[RESOURCE_ZYNTHIUM_BAR] = 30;
            importedResourceCosts[RESOURCE_PURIFIER] = 140;
            importedResourceCosts[RESOURCE_OXIDANT] = 65;
            importedResourceCosts[RESOURCE_REDUCTANT] = 120;
            importedResourceCosts[RESOURCE_KEANIUM_BAR] = 20;
            importedResourceCosts[RESOURCE_UTRIUM_BAR] = 40;
        }
        else {
            importedResourceCosts[RESOURCE_ZYNTHIUM_BAR] = 20;
            importedResourceCosts[RESOURCE_COMPOSITE] = 30;
        }
        for (let resource of resources) {
            let amountOnHand = (this.room.terminal.store[resource] || 0) + (this.room.storage.store[resource] || 0);
            let amount = this.room.terminal.store[resource];
            if (resource !== RESOURCE_LEMERGIUM_BAR) {
                amount -=
                    _.sum(_.filter(Game.market.orders, ord => ord.resourceType == resource && ord.roomName == this.room.name), ord => ord.remainingAmount) / 2;
            }
            if (amount < 1)
                continue;
            let bestBuy = this.getBestBuy(resource, energyPrice);
            if (!bestBuy)
                continue;
            let multiplier = 0.95;
            if (amountOnHand > 15000)
                multiplier = 0.9;
            if (importedResourceCosts[resource] && importedResourceCosts[resource] > bestBuy.adjCost)
                continue;
            let avg = this.room.memory.marketData.buyAvg[resource];
            if (avg * multiplier > bestBuy.adjCost) {
                continue;
            }
            if (bestBuy.adjCost < 0) {
                continue;
            }
            if (!importedResourceCosts[resource]) {
                let daysOutside3Sigma = _.filter(Game.market.getHistory(resource), mh => bestBuy.origPrice < mh.avgPrice - 3 * mh.stddevPrice).length;
                if (daysOutside3Sigma >= 6) {
                    console.log('not selling due to sigma : ' +
                        resource +
                        ' ' +
                        JSON.stringify(bestBuy) +
                        ' avg:' +
                        avg +
                        ' amount:' +
                        amount +
                        '  adj:' +
                        bestBuy.adjCost);
                    continue;
                }
            }
            amount = Math.min(amount, bestBuy.remainingAmount);
            amount = Math.min(amount, this.room.terminal.store[RESOURCE_ENERGY]);
            console.log('selling : ' +
                resource +
                ' ' +
                JSON.stringify(bestBuy) +
                ' avg:' +
                avg +
                ' amount:' +
                amount +
                '  adj:' +
                bestBuy.adjCost +
                ' oh: ' +
                amountOnHand);
            let result = Game.market.deal(bestBuy.orderId, amount, this.room.name);
            if (result != 0) {
                console.log(result);
            }
            else {
                return true;
            }
        }
        return false;
    }
    buildDataCache() {
        const result = { [ORDER_SELL]: {}, [ORDER_BUY]: {} };
        for (let resource of [...RESOURCES_ALL, ...INTERSHARD_RESOURCES]) {
            result[ORDER_SELL][resource] = [];
            result[ORDER_BUY][resource] = [];
        }
        for (let ord of Game.market.getAllOrders()) {
            if (tradeBlacklistRoomNames.includes(ord.roomName))
                continue;
            result[ord.type][ord.resourceType].push(ord);
        }
        this.dataCache = result;
    }
    doTrading() {
        this.buildDataCache();
        let bestSell = _.first(_.sortBy(_.map(this.dataCache[ORDER_SELL][RESOURCE_ENERGY], order => ({
            orderId: order.id,
            remainingAmount: order.remainingAmount,
            adjCost: order.price /
                (1 - Game.market.calcTransactionCost(1000, this.room.name, order.roomName) / 1000),
            origPrice: order.price,
        })), function (o) {
            return o.adjCost;
        }));
        let bestOrder = _.head(_.sortBy(_.map(this.dataCache[ORDER_BUY][RESOURCE_ENERGY], order => ({
            orderId: order.id,
            remainingAmount: order.remainingAmount,
            adjPrice: order.price -
                1.4 * (Game.market.calcTransactionCost(1000, this.room.name, order.roomName) / 1000),
            origPrice: order.price,
        })), function (o) {
            return -o.adjPrice;
        }));
        if (bestSell && bestOrder && Game.time % 10 == 0) {
            let avg = (bestSell.adjCost + bestOrder.adjPrice) / 2;
            if (!this.room.memory.marketData)
                this.room.memory.marketData = {};
            if (!this.room.memory.marketData[RESOURCE_ENERGY]) {
                this.room.memory.marketData[RESOURCE_ENERGY] = avg;
            }
            else {
                this.room.memory.marketData[RESOURCE_ENERGY] =
                    this.room.memory.marketData[RESOURCE_ENERGY] * 0.995 + avg * 0.005;
            }
        }
        let energyPrice = this.room.memory.marketData[RESOURCE_ENERGY];
        this.updateSellAvg(energyPrice);
        this.updateBuyAvg(energyPrice);
    }
}

StructureSpawn.prototype.testSpawn = function (spawnRequest, ID) {
    return this.spawnCreep(spawnRequest.body, ID.toString(), { dryRun: true });
};
StructureSpawn.prototype.advancedSpawn = function (spawnRequest, ID) {
    return this.spawnCreep(spawnRequest.body, `${creepRoles.indexOf(spawnRequest.role)}_${spawnRequest.cost}_${this.room.name}_${spawnRequest.defaultParts}_${ID}`, spawnRequest.extraOpts);
};
Room.prototype.constructSpawnRequests = function (opts) {
    if (!opts)
        return;
    if (opts.minCreeps) {
        this.spawnRequestIndividually(opts);
        return;
    }
    this.spawnRequestByGroup(opts);
};
Room.prototype.findMaxCostPerCreep = function (maxCostPerCreep) {
    var _a;
    if (!maxCostPerCreep)
        maxCostPerCreep = this.energyCapacityAvailable;
    if (this.myCreeps.source1Harvester.length + (((_a = this.myCreeps.source2Harvester) === null || _a === void 0 ? void 0 : _a.length) || 0) === 0 ||
        this.myCreeps.hauler.length === 0)
        return Math.min(maxCostPerCreep, this.energyAvailable);
    return Math.min(maxCostPerCreep, this.energyCapacityAvailable);
};
Room.prototype.createSpawnRequest = function (priority, role, defaultParts, bodyPartCounts, tier, cost, memory) {
    this.spawnRequests.push({
        role,
        priority,
        defaultParts,
        bodyPartCounts,
        tier,
        cost,
        extraOpts: {
            memory,
            energyStructures: this.spawningStructuresByPriority,
        },
    });
};
Room.prototype.spawnRequestIndividually = function (opts) {
    const maxCostPerCreep = Math.max(this.findMaxCostPerCreep(opts.maxCostPerCreep), opts.minCost);
    while (opts.minCreeps > (opts.spawnGroup ? opts.spawnGroup.length : this.creepsFromRoom[opts.role].length)) {
        let bodyPartCounts = {
            tough: 0,
            claim: 0,
            attack: 0,
            ranged_attack: 0,
            secondaryTough: 0,
            work: 0,
            carry: 0,
            move: 0,
            secondaryAttack: 0,
            heal: 0,
        };
        let tier = 0;
        let cost = 0;
        let partCost;
        if (opts.defaultParts.length) {
            tier += 1;
            for (const part of opts.defaultParts) {
                partCost = BODYPART_COST[part];
                if (cost + partCost > maxCostPerCreep)
                    break;
                cost += partCost;
                bodyPartCounts[part] += 1;
            }
        }
        if (opts.extraParts.length) {
            let remainingAllowedParts = Math.min(50 - opts.defaultParts.length, opts.extraParts.length * opts.partsMultiplier);
            while (cost < maxCostPerCreep && remainingAllowedParts > 0) {
                const addedParts = [];
                for (const part of opts.extraParts) {
                    cost += BODYPART_COST[part];
                    addedParts.push(part);
                    remainingAllowedParts -= 1;
                }
                if (cost > maxCostPerCreep || remainingAllowedParts < 0) {
                    let partIndex = opts.extraParts.length - 1;
                    while (partIndex >= 0) {
                        const part = opts.extraParts[partIndex];
                        partCost = BODYPART_COST[part];
                        if (cost - partCost < opts.minCost)
                            break;
                        cost -= partCost;
                        addedParts.pop();
                        remainingAllowedParts += 1;
                        partIndex -= 1;
                    }
                    tier += Math.floor((addedParts.length / opts.extraParts.length) * 100) / 100;
                    for (const part of addedParts)
                        bodyPartCounts[part] += 1;
                    break;
                }
                tier += 1;
                for (const part of addedParts)
                    bodyPartCounts[part] += 1;
            }
        }
        this.createSpawnRequest(opts.priority, opts.role, opts.defaultParts.length, bodyPartCounts, tier, cost, opts.memoryAdditions);
        opts.minCreeps -= 1;
    }
};
Room.prototype.spawnRequestByGroup = function (opts) {
    const maxCostPerCreep = Math.max(this.findMaxCostPerCreep(opts.maxCostPerCreep), opts.minCost);
    let totalExtraParts = Math.floor(opts.extraParts.length * opts.partsMultiplier);
    const maxPartsPerCreep = Math.min(50 - opts.defaultParts.length, totalExtraParts);
    for (const creepName of opts.spawnGroup || this.creepsFromRoom[opts.role]) {
        const creep = Game.creeps[creepName];
        totalExtraParts -= creep.body.length - creep.defaultParts;
    }
    if (totalExtraParts < maxPartsPerCreep * (opts.threshold || 0.25))
        return;
    if (!opts.maxCreeps) {
        opts.maxCreeps = Number.MAX_SAFE_INTEGER;
    }
    else {
        opts.maxCreeps -= opts.spawnGroup ? opts.spawnGroup.length : this.creepsFromRoom[opts.role].length;
    }
    if (opts.extraParts.length == 0) {
        customLog('spawnRequestByGroup error', '0 length extraParts?' + JSON.stringify(opts), {
            textColor: customColors.white,
            bgColor: customColors.red,
        });
        return;
    }
    while (totalExtraParts >= opts.extraParts.length && opts.maxCreeps > 0) {
        let bodyPartCounts = {
            tough: 0,
            claim: 0,
            attack: 0,
            ranged_attack: 0,
            secondaryTough: 0,
            work: 0,
            carry: 0,
            move: 0,
            secondaryAttack: 0,
            heal: 0,
        };
        let tier = 0;
        let cost = 0;
        let partCost;
        let remainingAllowedParts = maxPartsPerCreep;
        if (opts.defaultParts.length) {
            tier += 1;
            for (const part of opts.defaultParts) {
                partCost = BODYPART_COST[part];
                if (cost + partCost > maxCostPerCreep)
                    break;
                cost += partCost;
                bodyPartCounts[part] += 1;
            }
        }
        while (cost < maxCostPerCreep && remainingAllowedParts > 0) {
            const addedParts = [];
            for (const part of opts.extraParts) {
                cost += BODYPART_COST[part];
                addedParts.push(part);
                remainingAllowedParts -= 1;
                totalExtraParts -= 1;
            }
            if (cost > maxCostPerCreep || remainingAllowedParts < 0) {
                let partIndex = opts.extraParts.length - 1;
                while (partIndex >= 0) {
                    const part = opts.extraParts[partIndex];
                    partCost = BODYPART_COST[part];
                    if (cost - partCost < opts.minCost)
                        break;
                    cost -= partCost;
                    addedParts.pop();
                    remainingAllowedParts += 1;
                    totalExtraParts += 1;
                    partIndex -= 1;
                }
                tier += Math.floor((addedParts.length / opts.extraParts.length) * 100) / 100;
                for (const part of addedParts)
                    bodyPartCounts[part] += 1;
                break;
            }
            tier += 1;
            for (const part of addedParts)
                bodyPartCounts[part] += 1;
        }
        this.createSpawnRequest(opts.priority, opts.role, opts.defaultParts.length, bodyPartCounts, tier, cost, opts.memoryAdditions);
        opts.maxCreeps -= 1;
    }
};

function packCoord(coord) {
    return String.fromCharCode(((coord.x << 6) | coord.y) + 65);
}
function packXYAsCoord(x, y) {
    return String.fromCharCode(((x << 6) | y) + 65);
}
function unpackCoord(char) {
    const xShiftedSixOrY = char.charCodeAt(0) - 65;
    return {
        x: (xShiftedSixOrY & 0b111111000000) >>> 6,
        y: xShiftedSixOrY & 0b000000111111,
    };
}
function unpackCoordAsPos(packedCoord, roomName) {
    const coord = unpackCoord(packedCoord);
    return new RoomPosition(coord.x, coord.y, roomName);
}
function reverseCoordList(coordList) {
    return coordList.match(/.{1,2}/g).reverse().join('');
}
global.packedRoomNames = global.packedRoomNames || {};
global.unpackedRoomNames = global.unpackedRoomNames || {};
function packRoomName(roomName) {
    if (global.packedRoomNames[roomName] === undefined) {
        const coordinateRegex = /(E|W)(\d+)(N|S)(\d+)/g;
        const match = coordinateRegex.exec(roomName);
        const xDir = match[1];
        const x = Number(match[2]);
        const yDir = match[3];
        const y = Number(match[4]);
        let quadrant;
        if (xDir === 'W') {
            if (yDir === 'N') {
                quadrant = 0;
            }
            else {
                quadrant = 1;
            }
        }
        else if (yDir === 'N') {
            quadrant = 2;
        }
        else {
            quadrant = 3;
        }
        const num = ((quadrant << 12) | (x << 6) | y) + 65;
        const char = String.fromCharCode(num);
        global.packedRoomNames[roomName] = char;
        global.unpackedRoomNames[char] = roomName;
    }
    return global.packedRoomNames[roomName];
}
function unpackRoomName(char) {
    if (global.unpackedRoomNames[char] === undefined) {
        const num = char.charCodeAt(0) - 65;
        const { q, x, y } = {
            q: (num & 0b11000000111111) >>> 12,
            x: (num & 0b00111111000000) >>> 6,
            y: num & 0b00000000111111,
        };
        let roomName;
        switch (q) {
            case 0:
                roomName = `W${x}N${y}`;
                break;
            case 1:
                roomName = `W${x}S${y}`;
                break;
            case 2:
                roomName = `E${x}N${y}`;
                break;
            case 3:
                roomName = `E${x}S${y}`;
                break;
            default:
                roomName = 'ERROR';
        }
        global.packedRoomNames[roomName] = char;
        global.unpackedRoomNames[char] = roomName;
    }
    return global.unpackedRoomNames[char];
}
function packPos(pos) {
    return packCoord(pos) + packRoomName(pos.roomName);
}
function unpackPos(chars) {
    const { x, y } = unpackCoord(chars[0]);
    return new RoomPosition(x, y, unpackRoomName(chars[1]));
}
function packPosList(posList) {
    let str = '';
    for (let i = 0; i < posList.length; ++i) {
        str += packPos(posList[i]);
    }
    return str;
}
function unpackPosList(chars) {
    const posList = [];
    for (let i = 0; i < chars.length; i += 2) {
        posList.push(unpackPos(chars.substr(i, 2)));
    }
    return posList;
}

const minRemotePriority = 9;
Room.prototype.spawnRequester = function () {
    if (Memory.CPULogging === true)
        var managerCPUStart = Game.cpu.getUsed();
    const spawnEnergyCapacity = this.energyCapacityAvailable;
    const mostOptimalSource = this.sourcesByEfficacy[0];
    const { storage } = this;
    const { terminal } = this;
    let partsMultiplier;
    let spawnGroup;
    let role;
    let priority;
    let minPriority;
    let maxPriority;
    this.constructSpawnRequests((() => {
        const sourceIndex = 0;
        role = 'source1Harvester';
        const priority = (mostOptimalSource.index === sourceIndex ? 0 : 1) + this.creepsFromRoom[role].length;
        if (spawnEnergyCapacity >= 800) {
            let defaultParts = [CARRY];
            let workAmount = 6;
            const source = this.sources[sourceIndex];
            const effect = source.effectsData.get(PWR_REGEN_SOURCE);
            if (effect) {
                workAmount += Math.round(POWER_INFO[PWR_REGEN_SOURCE].effect[effect.level - 1] /
                    POWER_INFO[PWR_REGEN_SOURCE].period /
                    HARVEST_POWER);
            }
            for (let i = 1; i <= workAmount; i++) {
                if (i % 2 === 0)
                    defaultParts.push(MOVE);
                defaultParts.push(WORK);
                if (i % 6 === 0)
                    defaultParts.push(CARRY);
            }
            return {
                role,
                defaultParts,
                extraParts: [],
                partsMultiplier: 1,
                minCreeps: 1,
                minCost: 300,
                priority: 1,
                memoryAdditions: {
                    SI: sourceIndex,
                    R: true,
                },
            };
        }
        if (spawnEnergyCapacity >= 750) {
            return {
                role,
                defaultParts: [],
                extraParts: [WORK, MOVE, WORK],
                partsMultiplier: 3,
                minCreeps: 1,
                minCost: 200,
                priority,
                memoryAdditions: {
                    SI: sourceIndex,
                    R: true,
                },
            };
        }
        if (spawnEnergyCapacity >= 600) {
            return {
                role,
                defaultParts: [MOVE, CARRY],
                extraParts: [WORK],
                partsMultiplier: 6,
                minCreeps: 1,
                minCost: 300,
                priority,
                memoryAdditions: {
                    SI: sourceIndex,
                    R: true,
                },
            };
        }
        if (this.sourceContainers[sourceIndex] && spawnEnergyCapacity >= 650) {
            return {
                role,
                defaultParts: [MOVE],
                extraParts: [WORK],
                partsMultiplier: 6,
                minCreeps: 1,
                minCost: 150,
                priority,
                memoryAdditions: {
                    SI: sourceIndex,
                    R: true,
                },
            };
        }
        return {
            role,
            defaultParts: [MOVE, CARRY],
            extraParts: [WORK],
            partsMultiplier: 6,
            minCreeps: undefined,
            maxCreeps: Math.min(3, this.sourcePositions[sourceIndex].length),
            minCost: 200,
            priority,
            memoryAdditions: {
                SI: sourceIndex,
                R: true,
            },
        };
    })());
    if (this.sources.length > 1)
        this.constructSpawnRequests((() => {
            const sourceIndex = 1;
            role = 'source2Harvester';
            const priority = (mostOptimalSource.index === sourceIndex ? 0 : 1) + this.creepsFromRoom[role].length;
            if (spawnEnergyCapacity >= 800) {
                let defaultParts = [CARRY];
                let workAmount = 6;
                const source = this.sources[sourceIndex];
                const effect = source.effectsData.get(PWR_REGEN_SOURCE);
                if (effect) {
                    workAmount += Math.round(POWER_INFO[PWR_REGEN_SOURCE].effect[effect.level - 1] /
                        POWER_INFO[PWR_REGEN_SOURCE].period /
                        HARVEST_POWER);
                }
                for (let i = 1; i <= workAmount; i++) {
                    if (i % 2 === 0)
                        defaultParts.push(MOVE);
                    defaultParts.push(WORK);
                    if (i % 6 === 0)
                        defaultParts.push(CARRY);
                }
                return {
                    role,
                    defaultParts,
                    extraParts: [],
                    partsMultiplier: 1,
                    minCreeps: 1,
                    minCost: 300,
                    priority: 1,
                    memoryAdditions: {
                        SI: sourceIndex,
                        R: true,
                    },
                };
            }
            if (spawnEnergyCapacity >= 750) {
                return {
                    role,
                    defaultParts: [],
                    extraParts: [WORK, MOVE, WORK],
                    partsMultiplier: 3,
                    minCreeps: 1,
                    minCost: 200,
                    priority,
                    memoryAdditions: {
                        SI: sourceIndex,
                        R: true,
                    },
                };
            }
            if (spawnEnergyCapacity >= 600) {
                return {
                    role,
                    defaultParts: [MOVE, CARRY],
                    extraParts: [WORK],
                    partsMultiplier: 6,
                    minCreeps: 1,
                    minCost: 300,
                    priority,
                    memoryAdditions: {
                        SI: sourceIndex,
                        R: true,
                    },
                };
            }
            if (this.sourceContainers[sourceIndex]) {
                return {
                    role,
                    defaultParts: [MOVE],
                    extraParts: [WORK],
                    partsMultiplier: 6,
                    minCreeps: 1,
                    minCost: 150,
                    priority,
                    memoryAdditions: {
                        SI: sourceIndex,
                        R: true,
                    },
                };
            }
            return {
                role,
                defaultParts: [MOVE, CARRY],
                extraParts: [WORK],
                partsMultiplier: 6,
                minCreeps: undefined,
                maxCreeps: Math.min(3, this.sourcePositions[sourceIndex].length),
                minCost: 200,
                priority,
                memoryAdditions: {
                    SI: sourceIndex,
                    R: true,
                },
            };
        })());
    this.constructSpawnRequests((() => {
        priority = Math.min(0.5 + this.creepsFromRoom.hauler.length / 2, minRemotePriority - 2);
        partsMultiplier = this.haulerNeed;
        role = 'hauler';
        if (spawnEnergyCapacity >= 800) {
            return {
                role,
                defaultParts: [],
                extraParts: [CARRY, CARRY, MOVE],
                partsMultiplier: partsMultiplier / 2,
                minCost: 150,
                maxCostPerCreep: this.memory.MHC,
                priority,
                memoryAdditions: {
                    R: true,
                },
            };
        }
        return {
            role,
            defaultParts: [],
            extraParts: [CARRY, MOVE],
            partsMultiplier,
            minCost: 100,
            maxCostPerCreep: this.memory.MHC,
            priority,
            memoryAdditions: {},
        };
    })());
    this.constructSpawnRequests((() => {
        if (this.controller.level < 6)
            return false;
        if (!this.structures.extractor.length)
            return false;
        if (!this.mineralContainer)
            return false;
        if (!storage)
            return false;
        if (this.resourcesInStoringStructures.energy < 40000)
            return false;
        if (!terminal)
            return false;
        if (terminal.store.getFreeCapacity() <= 10000)
            return false;
        if (this.mineral.mineralAmount === 0)
            return false;
        let minCost = 900;
        if (spawnEnergyCapacity < minCost)
            return false;
        role = 'mineralHarvester';
        return {
            role,
            defaultParts: [],
            extraParts: [
                MOVE,
                MOVE,
                WORK,
                WORK,
                WORK,
                WORK,
                WORK,
                WORK,
                WORK,
                WORK,
            ],
            partsMultiplier: 5,
            minCreeps: 1,
            minCost,
            priority: 10 + this.creepsFromRoom.mineralHarvester.length * 3,
            memoryAdditions: {
                R: true,
            },
        };
    })());
    this.constructSpawnRequests((() => {
        if (!storage || this.controller.level < 4)
            return false;
        if (!this.hubLink && (!terminal || this.controller.level < 6))
            return false;
        role = 'hubHauler';
        return {
            role,
            defaultParts: [MOVE],
            extraParts: [CARRY],
            partsMultiplier: 8,
            minCreeps: 1,
            minCost: 300,
            priority: 7,
            memoryAdditions: {},
        };
    })());
    this.constructSpawnRequests((() => {
        const fastFillerPositionsCount = this.fastFillerPositions.length;
        if (!fastFillerPositionsCount)
            return false;
        priority = 0.75;
        let totalFastFillerEnergy = 0;
        if (this.fastFillerContainerLeft)
            totalFastFillerEnergy += this.fastFillerContainerLeft.store.energy;
        if (this.fastFillerContainerRight)
            totalFastFillerEnergy += this.fastFillerContainerRight.store.energy;
        if (totalFastFillerEnergy < 1000)
            priority = 1.25;
        let defaultParts;
        if (this.controller.level >= 8)
            defaultParts = [CARRY, MOVE, CARRY, CARRY, CARRY, CARRY];
        else if (this.controller.level >= 7)
            defaultParts = [CARRY, MOVE, CARRY, CARRY];
        else
            defaultParts = [CARRY, MOVE, CARRY];
        role = 'fastFiller';
        return {
            role,
            defaultParts,
            extraParts: [],
            partsMultiplier: 1,
            minCreeps: fastFillerPositionsCount,
            minCost: 150,
            priority,
            memoryAdditions: {},
        };
    })());
    const { enemyAttackers } = this;
    let attackStrength = 0;
    let healStrength = 0;
    for (const enemyCreep of this.enemyAttackers) {
        attackStrength += enemyCreep.combatStrength.melee + enemyCreep.combatStrength.ranged;
        healStrength += enemyCreep.combatStrength.heal;
    }
    if (this.towerInferiority) {
        minPriority = 6;
        maxPriority = minRemotePriority - 1;
        this.constructSpawnRequests((() => {
            role = 'meleeDefender';
            if (this.myCreeps[role].length * 1.75 > enemyAttackers.length)
                return false;
            let requiredStrength = 1;
            if (!this.controller.safeMode) {
                requiredStrength += healStrength;
                if (!this.structures.tower.length)
                    requiredStrength += attackStrength;
            }
            requiredStrength *= 1.5;
            const priority = Math.min(minPriority + this.myCreeps[role].length * 0.5, maxPriority);
            if (spawnEnergyCapacity >= 800) {
                const extraParts = [ATTACK, ATTACK, MOVE];
                const strength = ATTACK_POWER * 2;
                return {
                    role,
                    defaultParts: [],
                    extraParts,
                    partsMultiplier: Math.max(requiredStrength / strength / 2, 1),
                    minCost: 210,
                    priority,
                    memoryAdditions: {},
                };
            }
            const extraParts = [ATTACK, MOVE];
            const strength = ATTACK_POWER;
            return {
                role,
                defaultParts: [],
                extraParts,
                partsMultiplier: Math.max(requiredStrength / strength, 1),
                minCost: 260,
                priority,
                memoryAdditions: {},
            };
        })());
        this.constructSpawnRequests((() => {
            role = 'rangedDefender';
            if (this.myCreeps[role].length * 1.75 > enemyAttackers.length)
                return false;
            let requiredStrength = 1;
            if (!this.controller.safeMode) {
                requiredStrength += healStrength;
                if (!this.structures.tower.length)
                    requiredStrength += attackStrength;
            }
            const priority = Math.min(minPriority + 0.1 + this.myCreeps[role].length * 0.75, maxPriority);
            if (spawnEnergyCapacity >= 800) {
                const extraParts = [RANGED_ATTACK, RANGED_ATTACK, MOVE];
                const strength = RANGED_ATTACK_POWER * 2;
                return {
                    role,
                    defaultParts: [],
                    extraParts,
                    partsMultiplier: Math.max(requiredStrength / strength / 2, 1),
                    minCost: 210,
                    priority,
                    memoryAdditions: {},
                };
            }
            const extraParts = [RANGED_ATTACK, MOVE];
            const strength = RANGED_ATTACK_POWER;
            return {
                role,
                defaultParts: [],
                extraParts,
                partsMultiplier: Math.max(requiredStrength / strength, 1),
                minCost: 260,
                priority,
                memoryAdditions: {},
            };
        })());
    }
    const estimatedIncome = this.estimateIncome();
    this.constructSpawnRequests((() => {
        if (this.towerInferiority)
            return false;
        if (!this.find(FIND_MY_CONSTRUCTION_SITES).length)
            return false;
        let priority = 8;
        partsMultiplier = 0;
        if (storage && this.controller.level >= 4) {
            if (this.resourcesInStoringStructures.energy < this.communeManager.storedEnergyBuildThreshold)
                return false;
            partsMultiplier += Math.pow(this.resourcesInStoringStructures.energy / (15000 + this.controller.level * 1000), 2);
        }
        else {
            partsMultiplier += estimatedIncome / 5;
            if (spawnEnergyCapacity >= 800)
                partsMultiplier *= 1.2;
        }
        role = 'builder';
        if (storage || terminal) {
            return {
                role,
                defaultParts: [],
                extraParts: [CARRY, WORK, MOVE],
                partsMultiplier: partsMultiplier,
                minCreeps: undefined,
                maxCreeps: Infinity,
                minCost: 200,
                priority,
                memoryAdditions: {
                    R: true,
                },
            };
        }
        if (spawnEnergyCapacity >= 800) {
            return {
                role,
                defaultParts: [],
                extraParts: [CARRY, WORK, MOVE],
                partsMultiplier: partsMultiplier,
                maxCreeps: Infinity,
                minCost: 200,
                priority,
                memoryAdditions: {
                    R: true,
                },
            };
        }
        if (!this.fastFillerContainerLeft && !this.fastFillerContainerRight) {
            return {
                role,
                defaultParts: [],
                extraParts: [WORK, CARRY, CARRY, MOVE],
                partsMultiplier: partsMultiplier,
                maxCreeps: Infinity,
                minCost: 250,
                priority,
                memoryAdditions: {
                    R: true,
                },
            };
        }
        return {
            role,
            defaultParts: [],
            extraParts: [CARRY, MOVE, WORK, CARRY, MOVE],
            partsMultiplier: partsMultiplier,
            minCreeps: undefined,
            maxCreeps: Infinity,
            minCost: 300,
            priority,
            memoryAdditions: {
                R: true,
            },
        };
    })());
    this.constructSpawnRequests((() => {
        minPriority = 6;
        maxPriority = minRemotePriority - 0.5;
        priority = Math.min(minPriority + this.creepsFromRoom.maintainer.length * 0.5, maxPriority);
        let repairTargets = this.structures.road;
        repairTargets = repairTargets.concat(this.structures.container);
        repairTargets = repairTargets.filter(structure => structure.hitsMax * 0.2 >= structure.hits);
        const ramparts = this.structures.rampart.filter(rampart => rampart.hits < this.communeManager.minRampartHits);
        if (!ramparts.length && !repairTargets.length)
            return false;
        partsMultiplier = 1;
        partsMultiplier += this.structures.road.length * roadUpkeepCost * 2;
        partsMultiplier += this.structures.container.length * containerUpkeepCost * 2;
        partsMultiplier += ramparts.length * rampartUpkeepCost * 1.2;
        partsMultiplier += attackStrength / (REPAIR_POWER / 3);
        if (storage && this.controller.level >= 4 && ramparts.length)
            partsMultiplier += Math.pow(this.resourcesInStoringStructures.energy / (16000 + this.controller.level * 1000), 2);
        role = 'maintainer';
        if (spawnEnergyCapacity >= 800) {
            return {
                role,
                defaultParts: [],
                extraParts: [CARRY, MOVE, WORK],
                partsMultiplier,
                minCreeps: undefined,
                maxCreeps: Infinity,
                minCost: 200,
                priority,
                memoryAdditions: {
                    R: true,
                },
            };
        }
        return {
            role,
            defaultParts: [],
            extraParts: [MOVE, CARRY, MOVE, WORK],
            partsMultiplier,
            minCreeps: undefined,
            maxCreeps: Infinity,
            minCost: 250,
            priority,
            memoryAdditions: {},
        };
    })());
    this.constructSpawnRequests((() => {
        partsMultiplier = 1;
        let maxCreeps = this.upgradePositions.length - 1;
        const priority = minRemotePriority + 0.5;
        if (this.controller.ticksToDowngrade > controllerDowngradeUpgraderNeed && this.towerInferiority)
            return false;
        if (storage && this.controller.level >= 4) {
            if (this.resourcesInStoringStructures.energy >= this.communeManager.storedEnergyUpgradeThreshold)
                partsMultiplier = Math.pow(this.resourcesInStoringStructures.energy / (8000 + this.controller.level * 1000), 2);
            else
                partsMultiplier = 0;
        }
        else {
            partsMultiplier += estimatedIncome * 0.75;
        }
        const controllerLink = this.controllerLink;
        if (controllerLink && controllerLink.RCLActionable) {
            maxCreeps -= 1;
            const hubLink = this.hubLink;
            const sourceLinks = this.sourceLinks;
            if ((hubLink && hubLink.RCLActionable) || sourceLinks.find(link => link && link.RCLActionable)) {
                let maxPartsMultiplier = 0;
                if (hubLink && hubLink.RCLActionable) {
                    const range = getRangeOfCoords(controllerLink.pos, hubLink.pos);
                    maxPartsMultiplier += findLinkThroughput(range) * 0.7;
                }
                for (let i = 0; i < sourceLinks.length; i++) {
                    const sourceLink = sourceLinks[i];
                    if (!sourceLink.RCLActionable)
                        continue;
                    const range = getRangeOfCoords(sourceLink.pos, controllerLink.pos);
                    maxPartsMultiplier += findLinkThroughput(range, this.estimatedSourceIncome[i]) * 0.7;
                }
                partsMultiplier = Math.min(partsMultiplier, maxPartsMultiplier);
            }
        }
        if (this.find(FIND_MY_CONSTRUCTION_SITES).length)
            partsMultiplier = 0;
        const threshold = 0.05;
        role = 'controllerUpgrader';
        if (this.controllerContainer || (controllerLink && controllerLink.RCLActionable)) {
            if (this.controller.level === 8) {
                let extraParts;
                if (this.controller.ticksToDowngrade < controllerDowngradeUpgraderNeed)
                    extraParts = [CARRY, WORK, MOVE];
                else if (partsMultiplier === 0)
                    return false;
                else
                    extraParts = [
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        WORK,
                        CARRY,
                        CARRY,
                        CARRY,
                        MOVE,
                        MOVE,
                        MOVE,
                        MOVE,
                        MOVE,
                        MOVE,
                        MOVE,
                        MOVE,
                    ];
                return {
                    role,
                    defaultParts: [],
                    extraParts,
                    partsMultiplier: 1,
                    threshold,
                    minCreeps: 1,
                    minCost: 300,
                    priority,
                    memoryAdditions: {
                        R: true,
                    },
                };
            }
            if (spawnEnergyCapacity >= 1000) {
                if (this.controller.ticksToDowngrade < controllerDowngradeUpgraderNeed)
                    partsMultiplier = Math.max(partsMultiplier, 4);
                partsMultiplier = Math.round(partsMultiplier / 4);
                if (partsMultiplier === 0)
                    return false;
                return {
                    role,
                    defaultParts: [CARRY, CARRY],
                    extraParts: [WORK, MOVE, WORK, WORK, WORK],
                    partsMultiplier,
                    threshold,
                    minCreeps: undefined,
                    maxCreeps,
                    minCost: 250,
                    priority,
                    memoryAdditions: {
                        R: true,
                    },
                };
            }
            if (spawnEnergyCapacity >= 800) {
                if (this.controller.ticksToDowngrade < controllerDowngradeUpgraderNeed)
                    partsMultiplier = Math.max(partsMultiplier, 6);
                partsMultiplier = Math.round(partsMultiplier / 6);
                if (partsMultiplier === 0)
                    return false;
                return {
                    role,
                    defaultParts: [CARRY, CARRY],
                    extraParts: [WORK, MOVE, WORK, WORK, WORK, WORK, MOVE, WORK],
                    partsMultiplier,
                    threshold,
                    minCreeps: undefined,
                    maxCreeps,
                    minCost: 250,
                    priority,
                    memoryAdditions: {
                        R: true,
                    },
                };
            }
            if (this.controller.ticksToDowngrade < controllerDowngradeUpgraderNeed)
                partsMultiplier = Math.max(partsMultiplier, 4);
            partsMultiplier = Math.round(partsMultiplier / 4);
            if (partsMultiplier === 0)
                return false;
            return {
                role,
                defaultParts: [CARRY],
                extraParts: [WORK, MOVE, WORK, WORK, WORK],
                partsMultiplier,
                threshold,
                minCreeps: undefined,
                maxCreeps,
                minCost: 200,
                priority,
                memoryAdditions: {
                    R: true,
                },
            };
        }
        if (this.controller.ticksToDowngrade < controllerDowngradeUpgraderNeed)
            partsMultiplier = Math.max(partsMultiplier, 1);
        if (this.controller.level < 2)
            partsMultiplier = Math.max(partsMultiplier, 1);
        if (spawnEnergyCapacity >= 800) {
            return {
                role,
                defaultParts: [],
                extraParts: [CARRY, MOVE, WORK],
                partsMultiplier,
                threshold,
                maxCreeps: Infinity,
                minCost: 200,
                priority,
                memoryAdditions: {
                    R: true,
                },
            };
        }
        return {
            role,
            defaultParts: [],
            extraParts: [MOVE, CARRY, MOVE, WORK],
            partsMultiplier,
            threshold,
            maxCreeps: Infinity,
            minCost: 250,
            priority,
            memoryAdditions: {},
        };
    })());
    for (const remoteInfo of this.remoteSourceIndexesByEfficacy) {
        const splitRemoteInfo = remoteInfo.split(' ');
        const remoteName = splitRemoteInfo[0];
        const sourceIndex = parseInt(splitRemoteInfo[1]);
        const remoteMemory = Memory.rooms[remoteName];
        const remoteData = Memory.rooms[remoteName].data;
        const remote = Game.rooms[remoteName];
        const priority = Math.round((minRemotePriority + 1 + remoteMemory.SPs[sourceIndex].length / 100) * 100) / 100;
        role = RemoteHarvesterRolesBySourceIndex[sourceIndex];
        if (remoteData[RemoteData[role]] <= 0)
            continue;
        const sourcePositionsAmount = remote
            ? remote.sourcePositions.length
            : unpackPosList(remoteMemory.SP[sourceIndex]).length;
        this.constructSpawnRequests((() => {
            if (spawnEnergyCapacity >= 950) {
                return {
                    role,
                    defaultParts: [CARRY],
                    extraParts: [WORK, MOVE],
                    partsMultiplier: remoteData[RemoteData[role]],
                    spawnGroup: this.creepsOfRemote[remoteName][role],
                    threshold: 0.1,
                    minCreeps: 1,
                    maxCreeps: sourcePositionsAmount,
                    maxCostPerCreep: 50 + 150 * 6,
                    minCost: 200,
                    priority,
                    memoryAdditions: {
                        R: true,
                        SI: sourceIndex,
                        RN: remoteName,
                    },
                };
            }
            return {
                role,
                defaultParts: [CARRY],
                extraParts: [WORK, WORK, MOVE],
                partsMultiplier: remoteData[RemoteData[role]],
                spawnGroup: this.creepsOfRemote[remoteName][role],
                threshold: 0.1,
                minCreeps: undefined,
                maxCreeps: sourcePositionsAmount,
                maxCostPerCreep: 50 + 250 * 3,
                minCost: 300,
                priority,
                memoryAdditions: {
                    R: true,
                    SI: sourceIndex,
                    RN: remoteName,
                },
            };
        })());
    }
    let remoteHaulerNeed = 0;
    const remoteNamesByEfficacy = this.remoteNamesBySourceEfficacy;
    for (let index = 0; index < remoteNamesByEfficacy.length; index += 1) {
        const remoteName = remoteNamesByEfficacy[index];
        const remoteData = Memory.rooms[remoteName].data;
        const totalRemoteNeed = Math.max(remoteData[RemoteData.remoteHauler0], 0) +
            Math.max(remoteData[RemoteData.remoteHauler1], 0) +
            Math.max(remoteData[RemoteData.remoteReserver], 0) +
            Math.max(remoteData[RemoteData.remoteCoreAttacker], 0) +
            Math.max(remoteData[RemoteData.remoteDismantler], 0) +
            Math.max(remoteData[RemoteData.minDamage], 0) +
            Math.max(remoteData[RemoteData.minHeal], 0);
        const remoteMemory = Memory.rooms[remoteName];
        if (!remoteMemory.data[RemoteData.enemyReserved] && !remoteMemory.data[RemoteData.abandon]) {
            const remote = Game.rooms[remoteName];
            const isReserved = remote && remote.controller.reservation && remote.controller.reservation.username === Memory.me;
            for (let index = 0; index < remoteMemory.SIDs.length; index += 1) {
                const income = Math.max((isReserved ? 10 : 5) -
                    Math.floor(Math.max(remoteMemory.data[RemoteData[remoteHarvesterRoles[index]]], 0) *
                        minHarvestWorkRatio), 0);
                remoteHaulerNeed += findCarryPartsRequired(remoteMemory.SPs[index].length / 2, income);
            }
        }
        if (totalRemoteNeed <= 0)
            continue;
        this.constructSpawnRequests((() => {
            if (Math.max(remoteData[RemoteData.remoteSourceHarvester0], 0) +
                Math.max(remoteData[RemoteData.remoteSourceHarvester1], 0) >
                0)
                return false;
            let cost = 650;
            if (spawnEnergyCapacity < cost)
                return false;
            if (remoteData[RemoteData.remoteReserver] <= 0)
                return false;
            role = 'remoteReserver';
            return {
                role,
                defaultParts: [],
                extraParts: [MOVE, CLAIM],
                partsMultiplier: 6,
                spawnGroup: this.creepsOfRemote[remoteName].remoteReserver,
                minCreeps: 1,
                maxCreeps: Infinity,
                minCost: cost,
                priority: minRemotePriority + 1,
                memoryAdditions: {
                    RN: remoteName,
                },
            };
        })());
        this.constructSpawnRequests((() => {
            if (remoteData[RemoteData.minDamage] + remoteData[RemoteData.minHeal] <= 0)
                return false;
            let minRangedAttackCost = 0;
            if (remoteData[RemoteData.minDamage] > 0) {
                minRangedAttackCost =
                    (remoteData[RemoteData.minDamage] / RANGED_ATTACK_POWER) * BODYPART_COST[RANGED_ATTACK] +
                        (remoteData[RemoteData.minDamage] / RANGED_ATTACK_POWER) * BODYPART_COST[MOVE];
            }
            const rangedAttackAmount = minRangedAttackCost / (BODYPART_COST[RANGED_ATTACK] + BODYPART_COST[MOVE]);
            let minHealCost = 0;
            if (remoteData[RemoteData.minHeal] > 0) {
                minHealCost =
                    (remoteData[RemoteData.minHeal] / HEAL_POWER) * BODYPART_COST[HEAL] +
                        (remoteData[RemoteData.minHeal] / HEAL_POWER) * BODYPART_COST[MOVE];
            }
            const healAmount = minHealCost / (BODYPART_COST[HEAL] + BODYPART_COST[MOVE]);
            if ((rangedAttackAmount + healAmount) * 2 > 50) {
                Memory.rooms[remoteName].data[RemoteData.abandon] = randomRange(1000, 1500);
                return false;
            }
            const minCost = minRangedAttackCost + minHealCost;
            if (minCost > spawnEnergyCapacity) {
                Memory.rooms[remoteName].data[RemoteData.abandon] = randomRange(1000, 1500);
                return false;
            }
            role = 'remoteDefender';
            const extraParts = [];
            for (let i = 0; i < rangedAttackAmount; i++) {
                extraParts.push(RANGED_ATTACK, MOVE);
            }
            for (let i = 0; i < healAmount; i++) {
                extraParts.push(HEAL, MOVE);
            }
            return {
                role,
                defaultParts: [],
                extraParts,
                partsMultiplier: 1,
                spawnGroup: this.creepsOfRemote[remoteName].remoteDefender,
                minCreeps: 1,
                minCost,
                priority: minRemotePriority - 3,
                memoryAdditions: {},
            };
        })());
        this.constructSpawnRequests((() => {
            if (remoteData[RemoteData.remoteCoreAttacker] <= 0)
                return false;
            const cost = 130;
            const extraParts = [ATTACK, MOVE];
            const minCost = cost * extraParts.length;
            role = 'remoteCoreAttacker';
            return {
                role,
                defaultParts: [],
                extraParts,
                partsMultiplier: 50 / extraParts.length,
                spawnGroup: this.creepsOfRemote[remoteName].remoteCoreAttacker,
                minCreeps: 1,
                minCost,
                priority: minRemotePriority - 2,
                memoryAdditions: {
                    RN: remoteName,
                },
            };
        })());
        this.constructSpawnRequests((() => {
            if (remoteData[RemoteData.remoteDismantler] <= 0)
                return false;
            const cost = 150;
            const extraParts = [WORK, MOVE];
            role = 'remoteDismantler';
            return {
                role,
                defaultParts: [],
                extraParts,
                partsMultiplier: 50 / extraParts.length,
                spawnGroup: this.creepsOfRemote[remoteName].remoteDismantler,
                minCreeps: 1,
                minCost: cost * 2,
                priority: minRemotePriority - 1,
                memoryAdditions: {
                    RN: remoteName,
                },
            };
        })());
    }
    this.constructSpawnRequests((() => {
        if (remoteHaulerNeed === 0)
            return false;
        partsMultiplier = remoteHaulerNeed;
        role = 'remoteHauler';
        return {
            role,
            defaultParts: [],
            extraParts: [CARRY, MOVE],
            threshold: 0.1,
            partsMultiplier,
            minCost: 100,
            maxCostPerCreep: this.memory.MHC,
            priority: minRemotePriority,
            memoryAdditions: {},
        };
    })());
    this.constructSpawnRequests((() => {
        role = 'scout';
        let minCreeps;
        if (this.structures.observer.length)
            minCreeps = 1;
        else
            minCreeps = 2;
        return {
            role,
            defaultParts: [],
            extraParts: [MOVE],
            partsMultiplier: 1,
            minCreeps,
            minCost: 50,
            priority: 5,
            memoryAdditions: {},
        };
    })());
    if (this.memory.claimRequest) {
        const requestName = this.memory.claimRequest;
        const request = Memory.claimRequests[requestName];
        this.constructSpawnRequests((() => {
            if (!request.data[ClaimRequestData.claimer])
                return false;
            if (request.data[ClaimRequestData.claimer] <= 0)
                return false;
            role = 'claimer';
            return {
                role,
                defaultParts: [CLAIM, MOVE],
                extraParts: [MOVE, MOVE, MOVE, MOVE],
                partsMultiplier: 1,
                minCreeps: 1,
                minCost: 650,
                priority: 8.1,
                memoryAdditions: {
                    TRN: requestName,
                },
            };
        })());
        this.constructSpawnRequests((() => {
            if (!request.data[ClaimRequestData.vanguard])
                return false;
            if (request.data[ClaimRequestData.vanguard] <= 0)
                return false;
            role = 'vanguard';
            return {
                role,
                defaultParts: [],
                extraParts: [WORK, CARRY, CARRY, MOVE, MOVE, MOVE],
                partsMultiplier: request.data[ClaimRequestData.vanguard],
                minCost: 250,
                priority: 8.2 + this.creepsFromRoom.vanguard.length,
                memoryAdditions: {
                    TRN: requestName,
                },
            };
        })());
    }
    if (this.memory.allyCreepRequest) {
        const allyCreepRequestNeeds = Memory.allyCreepRequests[this.memory.allyCreepRequest].data;
        this.constructSpawnRequests((() => {
            if (allyCreepRequestNeeds[AllyCreepRequestData.allyVanguard] <= 0)
                return false;
            role = 'allyVanguard';
            return {
                role,
                defaultParts: [],
                extraParts: [WORK, CARRY, CARRY, MOVE, MOVE, MOVE],
                partsMultiplier: allyCreepRequestNeeds[AllyCreepRequestData.allyVanguard],
                minCost: 250,
                priority: 10 + this.creepsFromRoom.allyVanguard.length,
                memoryAdditions: {},
            };
        })());
    }
    for (const requestName of this.memory.haulRequests) {
        const request = Memory.haulRequests[requestName];
        if (!request)
            continue;
        this.constructSpawnRequests((() => {
            const priority = Math.min(0.5 + this.creepsFromRoom.requestHauler.length / 2, minRemotePriority - 3);
            partsMultiplier = 100;
            role = 'requestHauler';
            return {
                role,
                defaultParts: [],
                extraParts: [CARRY, MOVE],
                partsMultiplier,
                minCost: 100,
                maxCostPerCreep: this.memory.MHC,
                priority,
                memoryAdditions: {
                    HRN: requestName,
                },
            };
        })());
    }
    priority = 8;
    for (let i = this.memory.combatRequests.length - 1; i >= 0; i -= 1) {
        const requestName = Memory.rooms[this.name].combatRequests[i];
        const request = Memory.combatRequests[requestName];
        if (!request)
            continue;
        if (request.data[CombatRequestData.abandon] > 0)
            continue;
        priority += 0.01;
        const minRangedAttackCost = this.communeManager.findMinRangedAttackCost(request.data[CombatRequestData.minDamage]);
        const rangedAttackAmount = Math.floor(minRangedAttackCost / (BODYPART_COST[RANGED_ATTACK] + BODYPART_COST[MOVE]));
        const minAttackCost = this.communeManager.findMinMeleeAttackCost(request.data[CombatRequestData.minDamage]);
        const attackAmount = Math.floor(minAttackCost / (BODYPART_COST[ATTACK] + BODYPART_COST[MOVE]));
        const minMeleeHealCost = this.communeManager.findMinHealCost(request.data[CombatRequestData.minMeleeHeal] + (request.data[CombatRequestData.maxTowerDamage] || 0));
        const meleeHealAmount = Math.floor(minMeleeHealCost / (BODYPART_COST[HEAL] + BODYPART_COST[MOVE]));
        const minRangedHealCost = this.communeManager.findMinHealCost(request.data[CombatRequestData.minRangedHeal] + (request.data[CombatRequestData.maxTowerDamage] || 0));
        const rangedHealAmount = Math.floor(minRangedHealCost / (BODYPART_COST[HEAL] + BODYPART_COST[MOVE]));
        const minDismantleCost = request.data[CombatRequestData.dismantle] * BODYPART_COST[WORK] +
            request.data[CombatRequestData.dismantle] * BODYPART_COST[MOVE] || 0;
        if (request.T === 'attack' || request.T === 'defend') {
            if (minRangedAttackCost + minRangedHealCost > this.energyCapacityAvailable ||
                minAttackCost > this.energyCapacityAvailable ||
                (rangedAttackAmount + rangedHealAmount) * 2 > 50 ||
                attackAmount * 2 > 50) {
                this.communeManager.deleteCombatRequest(requestName, i);
                continue;
            }
            this.constructSpawnRequests((() => {
                if (request.data[CombatRequestData.quads] >= request.data[CombatRequestData.quadQuota])
                    return false;
                role = 'antifaRangedAttacker';
                spawnGroup = internationalManager.creepsByCombatRequest[requestName][role];
                const minCost = minRangedAttackCost + minRangedHealCost;
                const extraParts = [];
                const tradeAmount = findSquadTradeableParts({
                    rangedAttackAmount,
                    rangedHealAmount,
                }, rangedAttackAmount + rangedHealAmount);
                if (this.squadRequests.size < (request.data[CombatRequestData.quads] + 1) * 4 - 2) {
                    for (let i = 0; i < rangedAttackAmount + tradeAmount; i++) {
                        extraParts.push(RANGED_ATTACK, MOVE);
                    }
                    for (let i = 0; i < rangedHealAmount - tradeAmount; i++) {
                        extraParts.push(HEAL, MOVE);
                    }
                }
                else {
                    for (let i = 0; i < rangedAttackAmount - tradeAmount; i++) {
                        extraParts.push(RANGED_ATTACK, MOVE);
                    }
                    for (let i = 0; i < rangedHealAmount + tradeAmount; i++) {
                        extraParts.push(HEAL, MOVE);
                    }
                }
                if (!extraParts.length)
                    return false;
                return {
                    role,
                    defaultParts: [],
                    extraParts,
                    partsMultiplier: 1,
                    minCost,
                    priority,
                    spawnGroup,
                    minCreeps: request.data[CombatRequestData.quadQuota] * 4,
                    memoryAdditions: {
                        CRN: requestName,
                        SS: 4,
                        ST: 'rangedAttack',
                    },
                };
            })());
            continue;
        }
        if (minRangedAttackCost + minRangedHealCost > this.energyCapacityAvailable ||
            minAttackCost + minMeleeHealCost > this.energyCapacityAvailable ||
            minAttackCost > this.energyCapacityAvailable) {
            this.communeManager.deleteCombatRequest(requestName, i);
            continue;
        }
        this.constructSpawnRequests((() => {
            role = 'antifaRangedAttacker';
            spawnGroup = internationalManager.creepsByCombatRequest[requestName][role];
            const minCost = minRangedAttackCost + minRangedHealCost;
            const extraParts = [];
            for (let i = 0; i < rangedAttackAmount; i++) {
                extraParts.push(RANGED_ATTACK, MOVE);
            }
            for (let i = 0; i < rangedHealAmount; i++) {
                extraParts.push(HEAL, MOVE);
            }
            if (!extraParts.length)
                return false;
            return {
                role,
                defaultParts: [],
                extraParts,
                partsMultiplier: 1,
                minCost,
                priority,
                spawnGroup,
                memoryAdditions: {
                    CRN: requestName,
                },
            };
        })());
        this.constructSpawnRequests((() => {
            role = 'antifaDismantler';
            spawnGroup = internationalManager.creepsByCombatRequest[requestName][role];
            const minCost = minDismantleCost;
            let extraParts = [];
            const workAmount = request.data[CombatRequestData.dismantle];
            for (let i = 0; i < workAmount; i++) {
                extraParts.push(WORK, MOVE);
            }
            if (!extraParts.length)
                return false;
            return {
                role,
                defaultParts: [],
                extraParts,
                partsMultiplier: 1,
                minCost,
                priority,
                spawnGroup,
                memoryAdditions: {
                    CRN: requestName,
                },
            };
        })());
        this.constructSpawnRequests((() => {
            role = 'antifaAttacker';
            spawnGroup = internationalManager.creepsByCombatRequest[requestName][role];
            const minCost = minAttackCost;
            let extraParts = [];
            for (let i = 0; i < attackAmount; i++) {
                extraParts.push(ATTACK, MOVE);
            }
            if (!extraParts.length)
                return false;
            return {
                role,
                defaultParts: [],
                extraParts,
                partsMultiplier: 1,
                minCost,
                priority,
                spawnGroup,
                memoryAdditions: {
                    SS: 2,
                    ST: 'attack',
                    CRN: requestName,
                },
            };
        })());
        this.constructSpawnRequests((() => {
            role = 'antifaHealer';
            spawnGroup = internationalManager.creepsByCombatRequest[requestName][role];
            const minCost = minMeleeHealCost;
            let extraParts = [];
            for (let i = 0; i < meleeHealAmount; i++) {
                extraParts.push(HEAL, MOVE);
            }
            if (!extraParts.length)
                return false;
            return {
                role,
                defaultParts: [],
                extraParts,
                partsMultiplier: 1,
                minCost,
                priority,
                spawnGroup,
                memoryAdditions: {
                    SS: 2,
                    ST: 'attack',
                    CRN: requestName,
                },
            };
        })());
    }
    this.spawnRequests.sort((a, b) => {
        return a.priority - b.priority;
    });
    if (Memory.CPULogging === true) {
        const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
        customLog('Spawn Request Manager', cpuUsed.toFixed(2), {
            textColor: customColors.white,
            bgColor: customColors.lightBlue,
        });
        const statName = 'srmcu';
        globalStatsUpdater(this.name, statName, cpuUsed);
    }
};

class SpawningStructuresManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    organizeSpawns() {
        const spawns = this.communeManager.structures.spawn;
        if (!spawns.length)
            return;
        this.inactiveSpawns = [];
        this.activeSpawns = [];
        for (const spawn of spawns) {
            if (spawn.spawning) {
                const creep = Game.creeps[spawn.spawning.name];
                creep.manageSpawning(spawn);
                creep.spawnID = spawn.id;
                this.activeSpawns.push(spawn);
                continue;
            }
            if (spawn.renewed)
                continue;
            if (!spawn.RCLActionable)
                continue;
            this.inactiveSpawns.push(spawn);
        }
    }
    run() {
        const { room } = this.communeManager;
        if (Memory.CPULogging)
            var managerCPUStart = Game.cpu.getUsed();
        if (!this.communeManager.structures.spawn.length)
            return;
        this.runSpawning();
        this.test();
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('Spawn Manager', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'smcu';
            globalStatsUpdater(room.name, statName, cpuUsed);
        }
    }
    runSpawning() {
        if (!this.inactiveSpawns.length)
            return;
        this.communeManager.room.spawnRequester();
        let spawnIndex = this.inactiveSpawns.length - 1;
        for (const index in this.communeManager.room.spawnRequests) {
            const request = this.communeManager.room.spawnRequests[index];
            if (request.cost > this.communeManager.nextSpawnEnergyAvailable)
                break;
            if (request.cost > this.communeManager.room.energyCapacityAvailable) {
                customLog('Failed to spawn', `cost greater then energyCapacityAvailable, role: ${request.role}, cost: ${request.cost}, body: (${request.bodyPartCounts}) ${request.body}`, {
                    textColor: customColors.white,
                    bgColor: customColors.red,
                });
                continue;
            }
            this.configSpawnRequest(parseInt(index));
            const spawn = this.inactiveSpawns[spawnIndex];
            const ID = newID();
            const testSpawnResult = spawn.testSpawn(request, ID);
            if (testSpawnResult !== OK) {
                customLog('Failed to spawn', `error: ${testSpawnResult}, role: ${request.role}, cost: ${request.cost}, body: (${request.body.length}) ${request.body}`, {
                    textColor: customColors.white,
                    bgColor: customColors.red,
                });
                return;
            }
            request.extraOpts.directions = this.findDirections(spawn.pos);
            spawn.advancedSpawn(request, ID);
            this.communeManager.nextSpawnEnergyAvailable -= request.cost;
            globalStatsUpdater(this.communeManager.room.name, 'eosp', request.cost);
            spawnIndex -= 1;
            if (spawnIndex < 0)
                return;
        }
    }
    configSpawnRequest(index) {
        const request = this.communeManager.room.spawnRequests[index];
        request.body = [];
        if (request.role === 'hauler' || request.role === 'remoteHauler') {
            const ratio = (request.bodyPartCounts[CARRY] + request.bodyPartCounts[WORK]) / request.bodyPartCounts[MOVE];
            for (let i = -1; i < request.bodyPartCounts[CARRY] - 1; i++) {
                request.body.push(CARRY);
                if (i % ratio === 0)
                    request.body.push(MOVE);
            }
            for (let i = -1; i < request.bodyPartCounts[WORK] - 1; i++) {
                request.body.push(WORK);
                if (i % ratio === 0)
                    request.body.push(MOVE);
            }
            return;
        }
        const endParts = [];
        for (const partIndex in partsByPriority) {
            const partType = partsByPriority[partIndex];
            const part = partsByPriorityPartType[partType];
            if (!request.bodyPartCounts[part])
                continue;
            let skipEndPart;
            let priorityPartsCount;
            if (partType === RANGED_ATTACK) {
                priorityPartsCount = request.bodyPartCounts[part];
                skipEndPart = true;
            }
            else if (partType === ATTACK || partType === TOUGH) {
                priorityPartsCount = Math.ceil(request.bodyPartCounts[part] / 2);
                skipEndPart = true;
            }
            else if (partType === 'secondaryTough' || partType === 'secondaryAttack') {
                priorityPartsCount = Math.floor(request.bodyPartCounts[part] / 2);
                skipEndPart = true;
            }
            else
                priorityPartsCount = request.bodyPartCounts[part] - 1;
            for (let i = 0; i < priorityPartsCount; i++) {
                request.body.push(part);
            }
            if (skipEndPart)
                continue;
            endParts.push(part);
        }
        request.body = request.body.concat(endParts);
    }
    findDirections(pos) {
        const adjacentCoords = [];
        for (let x = pos.x - 1; x <= pos.x + 1; x += 1) {
            for (let y = pos.y - 1; y <= pos.y + 1; y += 1) {
                if (pos.x === x && pos.y === y)
                    continue;
                const coord = { x, y };
                adjacentCoords.push(coord);
            }
        }
        const anchor = this.communeManager.room.anchor;
        adjacentCoords.sort((a, b) => {
            return getRangeOfCoords(a, anchor) - getRangeOfCoords(b, anchor);
        });
        adjacentCoords.reverse();
        const directions = [];
        for (const coord of adjacentCoords) {
            directions.push(pos.getDirectionTo(coord.x, coord.y));
        }
        return directions;
    }
    createPowerTasks() {
        if (!this.communeManager.room.myPowerCreepsAmount)
            return;
        if (this.inactiveSpawns.length)
            return;
        for (const spawn of this.activeSpawns) {
            this.communeManager.room.createPowerTask(spawn, PWR_OPERATE_SPAWN, 2);
        }
    }
    createRoomLogisticsRequests() {
        for (const structure of this.communeManager.room.spawningStructuresByNeed) {
            this.communeManager.room.createRoomLogisticsRequest({
                target: structure,
                type: 'transfer',
                priority: 3,
            });
        }
    }
    test() {
        return;
    }
}

const colors = {
    gray: '#555555',
    light: '#AAAAAA',
    road: '#666',
    energy: '#FFE87B',
    power: '#F53547',
    dark: '#181818',
    outline: '#8FBB93',
    speechText: '#000000',
    speechBackground: '#2ccf3b',
};
const speechSize = 0.5;
const speechFont = 'Times New Roman';
function calculateFactoryLevelGapsPoly() {
    let x = -0.08;
    let y = -0.52;
    const result = [];
    const gapAngle = 16 * (Math.PI / 180);
    const c1 = Math.cos(gapAngle);
    const s1 = Math.sin(gapAngle);
    const angle = 72 * (Math.PI / 180);
    const c2 = Math.cos(angle);
    const s2 = Math.sin(angle);
    for (let i = 0; i < 5; i += 1) {
        result.push([0.0, 0.0]);
        result.push([x, y]);
        result.push([x * c1 - y * s1, x * s1 + y * c1]);
        const tmpX = x * c2 - y * s2;
        y = x * s2 + y * c2;
        x = tmpX;
    }
    return result;
}
const factoryLevelGaps = calculateFactoryLevelGapsPoly();
RoomVisual.prototype.structure = function (x, y, type, opts = {}) {
    opts = {
        opacity: 1,
        ...opts,
    };
    switch (type) {
        case STRUCTURE_FACTORY: {
            const outline = [
                [-0.68, -0.11],
                [-0.84, -0.18],
                [-0.84, -0.32],
                [-0.44, -0.44],
                [-0.32, -0.84],
                [-0.18, -0.84],
                [-0.11, -0.68],
                [0.11, -0.68],
                [0.18, -0.84],
                [0.32, -0.84],
                [0.44, -0.44],
                [0.84, -0.32],
                [0.84, -0.18],
                [0.68, -0.11],
                [0.68, 0.11],
                [0.84, 0.18],
                [0.84, 0.32],
                [0.44, 0.44],
                [0.32, 0.84],
                [0.18, 0.84],
                [0.11, 0.68],
                [-0.11, 0.68],
                [-0.18, 0.84],
                [-0.32, 0.84],
                [-0.44, 0.44],
                [-0.84, 0.32],
                [-0.84, 0.18],
                [-0.68, 0.11],
            ];
            this.poly(outline.map(p => [p[0] + x, p[1] + y]), {
                fill: undefined,
                stroke: colors.outline,
                strokeWidth: 0.05,
                opacity: opts.opacity,
            });
            this.circle(x, y, {
                radius: 0.65,
                fill: '#232323',
                strokeWidth: 0.035,
                stroke: '#140a0a',
                opacity: opts.opacity,
            });
            const spikes = [
                [-0.4, -0.1],
                [-0.8, -0.2],
                [-0.8, -0.3],
                [-0.4, -0.4],
                [-0.3, -0.8],
                [-0.2, -0.8],
                [-0.1, -0.4],
                [0.1, -0.4],
                [0.2, -0.8],
                [0.3, -0.8],
                [0.4, -0.4],
                [0.8, -0.3],
                [0.8, -0.2],
                [0.4, -0.1],
                [0.4, 0.1],
                [0.8, 0.2],
                [0.8, 0.3],
                [0.4, 0.4],
                [0.3, 0.8],
                [0.2, 0.8],
                [0.1, 0.4],
                [-0.1, 0.4],
                [-0.2, 0.8],
                [-0.3, 0.8],
                [-0.4, 0.4],
                [-0.8, 0.3],
                [-0.8, 0.2],
                [-0.4, 0.1],
            ];
            this.poly(spikes.map(p => [p[0] + x, p[1] + y]), {
                fill: colors.gray,
                stroke: '#140a0a',
                strokeWidth: 0.04,
                opacity: opts.opacity,
            });
            this.circle(x, y, {
                radius: 0.54,
                fill: '#302a2a',
                strokeWidth: 0.04,
                stroke: '#140a0a',
                opacity: opts.opacity,
            });
            this.poly(factoryLevelGaps.map(p => [p[0] + x, p[1] + y]), {
                fill: '#140a0a',
                stroke: undefined,
                opacity: opts.opacity,
            });
            this.circle(x, y, {
                radius: 0.42,
                fill: '#140a0a',
                opacity: opts.opacity,
            });
            this.rect(x - 0.24, y - 0.24, 0.48, 0.48, {
                fill: '#3f3f3f',
                opacity: opts.opacity,
            });
            break;
        }
        case STRUCTURE_EXTENSION:
            this.circle(x, y, {
                radius: 0.5,
                fill: colors.dark,
                stroke: colors.outline,
                strokeWidth: 0.05,
                opacity: opts.opacity,
            });
            this.circle(x, y, {
                radius: 0.35,
                fill: colors.gray,
                opacity: opts.opacity,
            });
            break;
        case STRUCTURE_SPAWN:
            this.circle(x, y, {
                radius: 0.65,
                fill: colors.dark,
                stroke: '#CCCCCC',
                strokeWidth: 0.1,
                opacity: opts.opacity,
            });
            this.circle(x, y, {
                radius: 0.4,
                fill: colors.energy,
                opacity: opts.opacity,
            });
            break;
        case STRUCTURE_POWER_SPAWN:
            this.circle(x, y, {
                radius: 0.65,
                fill: colors.dark,
                stroke: colors.power,
                strokeWidth: 0.1,
                opacity: opts.opacity,
            });
            this.circle(x, y, {
                radius: 0.4,
                fill: colors.energy,
                opacity: opts.opacity,
            });
            break;
        case STRUCTURE_LINK: {
            let outer = [
                [0.0, -0.5],
                [0.4, 0.0],
                [0.0, 0.5],
                [-0.4, 0.0],
            ];
            let inner = [
                [0.0, -0.3],
                [0.25, 0.0],
                [0.0, 0.3],
                [-0.25, 0.0],
            ];
            outer = relPoly(x, y, outer);
            inner = relPoly(x, y, inner);
            outer.push(outer[0]);
            inner.push(inner[0]);
            this.poly(outer, {
                fill: colors.dark,
                stroke: colors.outline,
                strokeWidth: 0.05,
                opacity: opts.opacity,
            });
            this.poly(inner, {
                fill: colors.gray,
                stroke: undefined,
                opacity: opts.opacity,
            });
            break;
        }
        case STRUCTURE_TERMINAL: {
            let outer = [
                [0.0, -0.8],
                [0.55, -0.55],
                [0.8, 0.0],
                [0.55, 0.55],
                [0.0, 0.8],
                [-0.55, 0.55],
                [-0.8, 0.0],
                [-0.55, -0.55],
            ];
            let inner = [
                [0.0, -0.65],
                [0.45, -0.45],
                [0.65, 0.0],
                [0.45, 0.45],
                [0.0, 0.65],
                [-0.45, 0.45],
                [-0.65, 0.0],
                [-0.45, -0.45],
            ];
            outer = relPoly(x, y, outer);
            inner = relPoly(x, y, inner);
            outer.push(outer[0]);
            inner.push(inner[0]);
            this.poly(outer, {
                fill: colors.dark,
                stroke: colors.outline,
                strokeWidth: 0.05,
                opacity: opts.opacity,
            });
            this.poly(inner, {
                fill: colors.light,
                stroke: undefined,
                opacity: opts.opacity,
            });
            this.rect(x - 0.45, y - 0.45, 0.9, 0.9, {
                fill: colors.gray,
                stroke: colors.dark,
                strokeWidth: 0.1,
                opacity: opts.opacity,
            });
            break;
        }
        case STRUCTURE_LAB:
            this.circle(x, y - 0.025, {
                radius: 0.55,
                fill: colors.dark,
                stroke: colors.outline,
                strokeWidth: 0.05,
                opacity: opts.opacity,
            });
            this.circle(x, y - 0.025, {
                radius: 0.4,
                fill: colors.gray,
                opacity: opts.opacity,
            });
            this.rect(x - 0.45, y + 0.3, 0.9, 0.25, {
                fill: colors.dark,
                stroke: undefined,
                opacity: opts.opacity,
            });
            let box = [
                [-0.45, 0.3],
                [-0.45, 0.55],
                [0.45, 0.55],
                [0.45, 0.3],
            ];
            box = relPoly(x, y, box);
            this.poly(box, {
                stroke: colors.outline,
                strokeWidth: 0.05,
                opacity: opts.opacity,
            });
            break;
        case STRUCTURE_TOWER:
            this.circle(x, y, {
                radius: 0.6,
                fill: colors.dark,
                stroke: colors.outline,
                strokeWidth: 0.05,
                opacity: opts.opacity,
            });
            this.rect(x - 0.4, y - 0.3, 0.8, 0.6, {
                fill: colors.gray,
                opacity: opts.opacity,
            });
            this.rect(x - 0.2, y - 0.9, 0.4, 0.5, {
                fill: colors.light,
                stroke: colors.dark,
                strokeWidth: 0.07,
                opacity: opts.opacity,
            });
            break;
        case STRUCTURE_ROAD:
            this.circle(x, y, {
                radius: 0.175,
                fill: colors.road,
                stroke: undefined,
                opacity: opts.opacity,
            });
            if (!this.roads)
                this.roads = [];
            this.roads.push([x, y]);
            break;
        case STRUCTURE_RAMPART:
            this.circle(x, y, {
                radius: 0.5,
                fill: 'rgb(78, 104, 79)',
                stroke: 'rgb(106, 180, 107)',
                strokeWidth: 0.12,
                opacity: opts.opacity,
            });
            break;
        case STRUCTURE_WALL:
            this.circle(x, y, {
                radius: 0.4,
                fill: colors.dark,
                stroke: colors.light,
                strokeWidth: 0.05,
                opacity: opts.opacity,
            });
            break;
        case STRUCTURE_STORAGE:
            const outline1 = relPoly(x, y, [
                [-0.45, -0.55],
                [0, -0.65],
                [0.45, -0.55],
                [0.55, 0],
                [0.45, 0.55],
                [0, 0.65],
                [-0.45, 0.55],
                [-0.55, 0],
                [-0.45, -0.55],
            ]);
            this.poly(outline1, {
                stroke: colors.outline,
                strokeWidth: 0.05,
                fill: colors.dark,
                opacity: opts.opacity,
            });
            this.rect(x - 0.35, y - 0.45, 0.7, 0.9, {
                fill: colors.energy,
                opacity: opts.opacity,
            });
            break;
        case STRUCTURE_OBSERVER:
            this.circle(x, y, {
                fill: colors.dark,
                radius: 0.45,
                stroke: colors.outline,
                strokeWidth: 0.05,
                opacity: opts.opacity,
            });
            this.circle(x + 0.225, y, {
                fill: colors.outline,
                radius: 0.2,
                opacity: opts.opacity,
            });
            break;
        case STRUCTURE_NUKER:
            let outline = [
                [0, -1],
                [-0.47, 0.2],
                [-0.5, 0.5],
                [0.5, 0.5],
                [0.47, 0.2],
                [0, -1],
            ];
            outline = relPoly(x, y, outline);
            this.poly(outline, {
                stroke: colors.outline,
                strokeWidth: 0.05,
                fill: colors.dark,
                opacity: opts.opacity,
            });
            let inline = [
                [0, -0.8],
                [-0.4, 0.2],
                [0.4, 0.2],
                [0, -0.8],
            ];
            inline = relPoly(x, y, inline);
            this.poly(inline, {
                stroke: colors.outline,
                strokeWidth: 0.01,
                fill: colors.gray,
                opacity: opts.opacity,
            });
            break;
        case STRUCTURE_CONTAINER:
            this.rect(x - 0.225, y - 0.3, 0.45, 0.6, {
                fill: colors.gray,
                opacity: opts.opacity,
                stroke: colors.dark,
                strokeWidth: 0.09,
            });
            this.rect(x - 0.17, y + 0.07, 0.34, 0.2, {
                fill: colors.energy,
                opacity: opts.opacity,
            });
            break;
        default:
            this.circle(x, y, {
                fill: colors.light,
                radius: 0.35,
                stroke: colors.dark,
                strokeWidth: 0.2,
                opacity: opts.opacity,
            });
            break;
    }
    return this;
};
const dirs = [[], [0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1]];
function rotate(x, y, s, c, px, py) {
    const xDelta = x * c - y * s;
    const yDelta = x * s + y * c;
    return { x: px + xDelta, y: py + yDelta };
}
function relPoly(x, y, poly) {
    return poly.map(p => {
        p[0] += x;
        p[1] += y;
        return p;
    });
}
RoomVisual.prototype.connectRoads = function (opts = {}) {
    const color = opts.color || colors.road || 'white';
    if (!this.roads)
        return this;
    this.roads.forEach(r => {
        for (let i = 1; i <= 4; i += 1) {
            const d = dirs[i];
            const c = [r[0] + d[0], r[1] + d[1]];
            const rd = _.some(this.roads, r => r[0] === c[0] && r[1] === c[1]);
            if (rd) {
                this.line(r[0], r[1], c[0], c[1], {
                    color,
                    width: 0.35,
                    opacity: opts.opacity || 1,
                });
            }
        }
    });
    return this;
};
RoomVisual.prototype.speech = function (text, x, y, opts = {}) {
    const background = opts.background ? opts.background : colors.speechBackground;
    const textcolor = opts.textcolor ? opts.textcolor : colors.speechText;
    const textstyle = opts.textstyle ? opts.textstyle : false;
    const textsize = opts.textsize ? opts.textsize : speechSize;
    const textfont = opts.textfont ? opts.textfont : speechFont;
    const opacity = opts.opacity ? opts.opacity : 1;
    let fontstring = '';
    if (textstyle) {
        fontstring = `${textstyle} `;
    }
    fontstring += `${textsize} ${textfont}`;
    let pointer = [
        [-0.2, -0.8],
        [0.2, -0.8],
        [0, -0.3],
    ];
    pointer = relPoly(x, y, pointer);
    pointer.push(pointer[0]);
    this.poly(pointer, {
        fill: background,
        stroke: background,
        opacity,
        strokeWidth: 0.0,
    });
    this.text(text, x, y - 1, {
        color: textcolor,
        backgroundColor: background,
        backgroundPadding: 0.1,
        opacity,
        font: fontstring,
    });
    return this;
};
RoomVisual.prototype.animatedPosition = function (x, y, opts = {}) {
    const color = opts.color ? opts.color : 'blue';
    const opacity = opts.opacity ? opts.opacity : 0.5;
    let radius = opts.radius ? opts.radius : 0.75;
    const frames = opts.frames ? opts.frames : 6;
    const angle = (((Game.time % frames) * 90) / frames) * (Math.PI / 180);
    const s = Math.sin(angle);
    const c = Math.cos(angle);
    const sizeMod = Math.abs((Game.time % frames) - frames / 2) / 10;
    radius += radius * sizeMod;
    const points = [
        rotate(0, -radius, s, c, x, y),
        rotate(radius, 0, s, c, x, y),
        rotate(0, radius, s, c, x, y),
        rotate(-radius, 0, s, c, x, y),
        rotate(0, -radius, s, c, x, y),
    ].map(p => [p.x, p.y]);
    this.poly(points, { stroke: color, opacity });
    return this;
};
RoomVisual.prototype.test = function test() {
    const demopos = [19, 24];
    this.clear();
    this.structure(demopos[0] + 0, demopos[1] + 0, STRUCTURE_LAB);
    this.structure(demopos[0] + 1, demopos[1] + 1, STRUCTURE_TOWER);
    this.structure(demopos[0] + 2, demopos[1] + 0, STRUCTURE_LINK);
    this.structure(demopos[0] + 3, demopos[1] + 1, STRUCTURE_TERMINAL);
    this.structure(demopos[0] + 4, demopos[1] + 0, STRUCTURE_EXTENSION);
    this.structure(demopos[0] + 5, demopos[1] + 1, STRUCTURE_SPAWN);
    return this;
};
const ColorSets = {
    white: ['#ffffff', '#4c4c4c'],
    grey: ['#b4b4b4', '#4c4c4c'],
    red: ['#ff7b7b', '#592121'],
    yellow: ['#fdd388', '#5d4c2e'],
    green: ['#00f4a2', '#236144'],
    blue: ['#50d7f9', '#006181'],
    purple: ['#a071ff', '#371383'],
};
const ResourceColors = {
    [RESOURCE_ENERGY]: ColorSets.yellow,
    [RESOURCE_POWER]: ColorSets.red,
    [RESOURCE_HYDROGEN]: ColorSets.grey,
    [RESOURCE_OXYGEN]: ColorSets.grey,
    [RESOURCE_UTRIUM]: ColorSets.blue,
    [RESOURCE_LEMERGIUM]: ColorSets.green,
    [RESOURCE_KEANIUM]: ColorSets.purple,
    [RESOURCE_ZYNTHIUM]: ColorSets.yellow,
    [RESOURCE_CATALYST]: ColorSets.red,
    [RESOURCE_GHODIUM]: ColorSets.white,
    [RESOURCE_HYDROXIDE]: ColorSets.grey,
    [RESOURCE_ZYNTHIUM_KEANITE]: ColorSets.grey,
    [RESOURCE_UTRIUM_LEMERGITE]: ColorSets.grey,
    [RESOURCE_UTRIUM_HYDRIDE]: ColorSets.blue,
    [RESOURCE_UTRIUM_OXIDE]: ColorSets.blue,
    [RESOURCE_KEANIUM_HYDRIDE]: ColorSets.purple,
    [RESOURCE_KEANIUM_OXIDE]: ColorSets.purple,
    [RESOURCE_LEMERGIUM_HYDRIDE]: ColorSets.green,
    [RESOURCE_LEMERGIUM_OXIDE]: ColorSets.green,
    [RESOURCE_ZYNTHIUM_HYDRIDE]: ColorSets.yellow,
    [RESOURCE_ZYNTHIUM_OXIDE]: ColorSets.yellow,
    [RESOURCE_GHODIUM_HYDRIDE]: ColorSets.white,
    [RESOURCE_GHODIUM_OXIDE]: ColorSets.white,
    [RESOURCE_UTRIUM_ACID]: ColorSets.blue,
    [RESOURCE_UTRIUM_ALKALIDE]: ColorSets.blue,
    [RESOURCE_KEANIUM_ACID]: ColorSets.purple,
    [RESOURCE_KEANIUM_ALKALIDE]: ColorSets.purple,
    [RESOURCE_LEMERGIUM_ACID]: ColorSets.green,
    [RESOURCE_LEMERGIUM_ALKALIDE]: ColorSets.green,
    [RESOURCE_ZYNTHIUM_ACID]: ColorSets.yellow,
    [RESOURCE_ZYNTHIUM_ALKALIDE]: ColorSets.yellow,
    [RESOURCE_GHODIUM_ACID]: ColorSets.white,
    [RESOURCE_GHODIUM_ALKALIDE]: ColorSets.white,
    [RESOURCE_CATALYZED_UTRIUM_ACID]: ColorSets.blue,
    [RESOURCE_CATALYZED_UTRIUM_ALKALIDE]: ColorSets.blue,
    [RESOURCE_CATALYZED_KEANIUM_ACID]: ColorSets.purple,
    [RESOURCE_CATALYZED_KEANIUM_ALKALIDE]: ColorSets.purple,
    [RESOURCE_CATALYZED_LEMERGIUM_ACID]: ColorSets.green,
    [RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE]: ColorSets.green,
    [RESOURCE_CATALYZED_ZYNTHIUM_ACID]: ColorSets.yellow,
    [RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE]: ColorSets.yellow,
    [RESOURCE_CATALYZED_GHODIUM_ACID]: ColorSets.white,
    [RESOURCE_CATALYZED_GHODIUM_ALKALIDE]: ColorSets.white,
};
const MINERALS = [
    RESOURCE_CATALYST,
    RESOURCE_HYDROGEN,
    RESOURCE_OXYGEN,
    RESOURCE_LEMERGIUM,
    RESOURCE_UTRIUM,
    RESOURCE_ZYNTHIUM,
    RESOURCE_KEANIUM,
];
RoomVisual.prototype.resource = function (type, x, y, size = 0.25) {
    if (type == RESOURCE_ENERGY || type == RESOURCE_POWER)
        this._fluid(type, x, y, size);
    else if (MINERALS.includes(type))
        this._mineral(type, x, y, size);
    else if (ResourceColors[type] != undefined)
        this._compound(type, x, y, size);
    else
        return ERR_INVALID_ARGS;
    return OK;
};
RoomVisual.prototype._fluid = function (type, x, y, size = 0.25) {
    this.circle(x, y, {
        radius: size,
        fill: ResourceColors[type][0],
        opacity: 1,
    });
    this.text(type[0], x, y - size * 0.1, {
        font: size * 1.5,
        color: ResourceColors[type][1],
        backgroundColor: ResourceColors[type][0],
        backgroundPadding: 0,
    });
};
RoomVisual.prototype._mineral = function (type, x, y, size = 0.25) {
    this.circle(x, y, {
        radius: size,
        fill: ResourceColors[type][0],
        opacity: 1,
    });
    this.circle(x, y, {
        radius: size * 0.8,
        fill: ResourceColors[type][1],
        opacity: 1,
    });
    this.text(type, x, y + size * 0.03, {
        font: 'bold ' + size * 1.25 + ' arial',
        color: ResourceColors[type][0],
        backgroundColor: ResourceColors[type][1],
        backgroundPadding: 0,
    });
};
RoomVisual.prototype._compound = function (type, x, y, size = 0.25) {
    let label = type.replace('2', '₂');
    this.text(label, x, y, {
        font: 'bold ' + size * 1 + ' arial',
        color: ResourceColors[type][1],
        backgroundColor: ResourceColors[type][0],
        backgroundPadding: 0.3 * size,
    });
};

function rampartPlanner(room) {
    if (room.memory.stampAnchors.rampart.length)
        return false;
    function generadeRoomMatrix() {
        room.tileCoords = new Uint8Array(2500);
        const terrainCoords = internationalManager.getTerrainCoords(room.name);
        for (let x = 0; x < roomDimensions; x += 1) {
            for (let y = 0; y < roomDimensions; y += 1) {
                const packedCoord = packXYAsNum(x, y);
                room.tileCoords[packedCoord] = UNWALKABLE;
                if (terrainCoords[packXYAsNum(x, y)] === 255)
                    continue;
                room.tileCoords[packedCoord] = NORMAL;
                if (x === 0 || y === 0 || x === roomDimensions - 1 || y === roomDimensions - 1)
                    room.tileCoords[packedCoord] = EXIT;
            }
        }
        let y = 1;
        for (; y < roomDimensions - 1; y += 1) {
            if (room.tileCoords[packXYAsNum(0, y - 1)] === EXIT)
                room.tileCoords[packXYAsNum(1, y)] = TO_EXIT;
            if (room.tileCoords[packXYAsNum(0, y)] === EXIT)
                room.tileCoords[packXYAsNum(1, y)] = TO_EXIT;
            if (room.tileCoords[packXYAsNum(0, y + 1)] === EXIT)
                room.tileCoords[packXYAsNum(1, y)] = TO_EXIT;
            if (room.tileCoords[packXYAsNum(roomDimensions - 1, y - 1)] === EXIT)
                room.tileCoords[packXYAsNum(roomDimensions - 2, y)] = TO_EXIT;
            if (room.tileCoords[packXYAsNum(roomDimensions - 1, y)] === EXIT)
                room.tileCoords[packXYAsNum(roomDimensions - 2, y)] = TO_EXIT;
            if (room.tileCoords[packXYAsNum(roomDimensions - 1, y + 1)] === EXIT)
                room.tileCoords[packXYAsNum(roomDimensions - 2, y)] = TO_EXIT;
        }
        let x = 1;
        for (; x < roomDimensions - 1; x += 1) {
            if (room.tileCoords[packXYAsNum(x - 1, 0)] === EXIT)
                room.tileCoords[packXYAsNum(x, 1)] = TO_EXIT;
            if (room.tileCoords[packXYAsNum(x, 0)] === EXIT)
                room.tileCoords[packXYAsNum(x, 1)] = TO_EXIT;
            if (room.tileCoords[packXYAsNum(x + 1, 0)] === EXIT)
                room.tileCoords[packXYAsNum(x, 1)] = TO_EXIT;
            if (room.tileCoords[packXYAsNum(x - 1, roomDimensions - 1)] === EXIT)
                room.tileCoords[packXYAsNum(x, roomDimensions - 2)] = TO_EXIT;
            if (room.tileCoords[packXYAsNum(x, roomDimensions - 1)] === EXIT)
                room.tileCoords[packXYAsNum(x, roomDimensions - 2)] = TO_EXIT;
            if (room.tileCoords[packXYAsNum(x + 1, roomDimensions - 1)] === EXIT)
                room.tileCoords[packXYAsNum(x, roomDimensions - 2)] = TO_EXIT;
        }
        y = 1;
        for (; y < roomDimensions - 1; y += 1) {
            room.tileCoords[packXYAsNum(0, y)] === UNWALKABLE;
            room.tileCoords[packXYAsNum(roomDimensions - 1, y)] === UNWALKABLE;
        }
        x = 1;
        for (; x < roomDimensions - 1; x += 1) {
            room.tileCoords[packXYAsNum(x, 0)] === UNWALKABLE;
            room.tileCoords[packXYAsNum(x, roomDimensions - 1)] === UNWALKABLE;
        }
    }
    class Graph {
        constructor(menge_v) {
            this.v = menge_v;
            this.level = Array(menge_v);
            this.edges = Array(menge_v)
                .fill(0)
                .map(x => []);
        }
    }
    Graph.prototype.New_edge = function (u, v, c) {
        this.edges[u].push({ v, r: this.edges[v].length, c, f: 0 });
        this.edges[v].push({ v: u, r: this.edges[u].length - 1, c: 0, f: 0 });
    };
    Graph.prototype.Bfs = function (s, t) {
        if (t >= this.v)
            return false;
        this.level.fill(-1);
        this.level[s] = 0;
        const q = [];
        q.push(s);
        let u = 0;
        let edge = null;
        while (q.length) {
            u = q.splice(0, 1)[0];
            let i = 0;
            const imax = this.edges[u].length;
            for (; i < imax; i += 1) {
                edge = this.edges[u][i];
                if (this.level[edge.v] < 0 && edge.f < edge.c) {
                    this.level[edge.v] = this.level[u] + 1;
                    q.push(edge.v);
                }
            }
        }
        return this.level[t] >= 0;
    };
    Graph.prototype.Dfsflow = function (u, f, t, c) {
        if (u === t)
            return f;
        let edge = null;
        let flow_till_here = 0;
        let flow_to_t = 0;
        while (c[u] < this.edges[u].length) {
            edge = this.edges[u][c[u]];
            if (this.level[edge.v] === this.level[u] + 1 && edge.f < edge.c) {
                flow_till_here = Math.min(f, edge.c - edge.f);
                flow_to_t = this.Dfsflow(edge.v, flow_till_here, t, c);
                if (flow_to_t > 0) {
                    edge.f += flow_to_t;
                    this.edges[edge.v][edge.r].f -= flow_to_t;
                    return flow_to_t;
                }
            }
            c[u] += 1;
        }
        return 0;
    };
    Graph.prototype.Bfsthecut = function (s) {
        const e_in_cut = [];
        this.level.fill(-1);
        this.level[s] = 1;
        const q = [];
        q.push(s);
        let u = 0;
        let edge = null;
        while (q.length) {
            u = q.splice(0, 1)[0];
            let i = 0;
            const imax = this.edges[u].length;
            for (; i < imax; i += 1) {
                edge = this.edges[u][i];
                if (edge.f < edge.c) {
                    if (this.level[edge.v] < 1) {
                        this.level[edge.v] = 1;
                        q.push(edge.v);
                    }
                }
                if (edge.f === edge.c && edge.c > 0) {
                    edge.u = u;
                    e_in_cut.push(edge);
                }
            }
        }
        const min_cut = [];
        let i = 0;
        const imax = e_in_cut.length;
        for (; i < imax; i += 1) {
            if (this.level[e_in_cut[i].v] === -1)
                min_cut.push(e_in_cut[i].u);
        }
        return min_cut;
    };
    Graph.prototype.Calcmincut = function (s, t) {
        if (s === t)
            return -1;
        let returnValue = 0;
        while (this.Bfs(s, t) === true) {
            const count = Array(this.v + 1).fill(0);
            let flow = 0;
            do {
                flow = this.Dfsflow(s, Number.MAX_VALUE, t, count);
                if (flow > 0)
                    returnValue += flow;
            } while (flow);
        }
        return returnValue;
    };
    function createGraph(rects) {
        generadeRoomMatrix();
        for (const rect of rects) {
            for (let x = rect.x1; x <= rect.x2; x += 1) {
                for (let y = rect.y1; y <= rect.y2; y += 1) {
                    if (x === rect.x1 || x === rect.x2 || y === rect.y1 || y === rect.y2) {
                        if (room.tileCoords[packXYAsNum(x, y)] === NORMAL)
                            room.tileCoords[packXYAsNum(x, y)] = PROTECTED;
                        continue;
                    }
                    room.tileCoords[packXYAsNum(x, y)] = UNWALKABLE;
                }
            }
        }
        const g = new Graph(2 * 50 * 50 + 2);
        const infini = Number.MAX_VALUE;
        const surr = [
            [0, -1],
            [-1, -1],
            [-1, 0],
            [-1, 1],
            [0, 1],
            [1, 1],
            [1, 0],
            [1, -1],
        ];
        const source = 2 * 50 * 50;
        const sink = 2 * 50 * 50 + 1;
        let dx = 0;
        let dy = 0;
        for (let x = 1; x < roomDimensions - 1; x += 1) {
            for (let y = 1; y < roomDimensions - 1; y += 1) {
                const top = y * 50 + x;
                const bot = top + 2500;
                if (room.tileCoords[packXYAsNum(x, y)] === NORMAL) {
                    g.New_edge(top, bot, 1);
                    for (let i = 0; i < 8; i += 1) {
                        dx = x + surr[i][0];
                        dy = y + surr[i][1];
                        if (room.tileCoords[packXYAsNum(dx, dy)] === NORMAL ||
                            room.tileCoords[packXYAsNum(dx, dy)] === TO_EXIT)
                            g.New_edge(bot, dy * 50 + dx, infini);
                    }
                    continue;
                }
                if (room.tileCoords[packXYAsNum(x, y)] === PROTECTED) {
                    g.New_edge(source, top, infini);
                    g.New_edge(top, bot, 1);
                    for (let i = 0; i < 8; i += 1) {
                        dx = x + surr[i][0];
                        dy = y + surr[i][1];
                        if (room.tileCoords[packXYAsNum(dx, dy)] === NORMAL ||
                            room.tileCoords[packXYAsNum(dx, dy)] === TO_EXIT)
                            g.New_edge(bot, dy * 50 + dx, infini);
                    }
                    continue;
                }
                if (room.tileCoords[packXYAsNum(x, y)] === TO_EXIT) {
                    g.New_edge(top, sink, infini);
                    continue;
                }
            }
        }
        return g;
    }
    function deleteTilesToDeadEnds(cutCoords) {
        for (let i = cutCoords.length - 1; i >= 0; i -= 1)
            room.tileCoords[packXYAsNum(cutCoords[i].x, cutCoords[i].y)] = UNWALKABLE;
        const unvisited_pos = [];
        let y = 0;
        for (; y < roomDimensions - 1; y += 1) {
            if (room.tileCoords[packXYAsNum(1, y)] === TO_EXIT)
                unvisited_pos.push(50 * y + 1);
            if (room.tileCoords[packXYAsNum(48, y)] === TO_EXIT)
                unvisited_pos.push(50 * y + 48);
        }
        let x = 0;
        for (; x < roomDimensions - 1; x += 1) {
            if (room.tileCoords[packXYAsNum(x, 1)] === TO_EXIT)
                unvisited_pos.push(50 + x);
            if (room.tileCoords[packXYAsNum(x, 48)] === TO_EXIT)
                unvisited_pos.push(2400 + x);
        }
        const surr = [
            [0, -1],
            [-1, -1],
            [-1, 0],
            [-1, 1],
            [0, 1],
            [1, 1],
            [1, 0],
            [1, -1],
        ];
        let index;
        let dx;
        let dy;
        while (unvisited_pos.length > 0) {
            index = unvisited_pos.pop();
            x = index % 50;
            y = Math.floor(index / 50);
            for (let i = 0; i < 8; i += 1) {
                dx = x + surr[i][0];
                dy = y + surr[i][1];
                if (room.tileCoords[packXYAsNum(dx, dy)] === NORMAL) {
                    unvisited_pos.push(50 * dy + dx);
                    room.tileCoords[packXYAsNum(dx, dy)] = TO_EXIT;
                }
            }
        }
        let leads_to_exit = false;
        for (let i = cutCoords.length - 1; i >= 0; i -= 1) {
            leads_to_exit = false;
            x = cutCoords[i].x;
            y = cutCoords[i].y;
            for (let i = 0; i < 8; i += 1) {
                dx = x + surr[i][0];
                dy = y + surr[i][1];
                if (room.tileCoords[packXYAsNum(dx, dy)] === TO_EXIT) {
                    leads_to_exit = true;
                }
            }
            if (!leads_to_exit)
                cutCoords.splice(i, 1);
        }
    }
    function GetCutTiles(rects) {
        const graph = createGraph(rects);
        if (!graph)
            return [];
        const source = 2 * 50 * 50;
        const sink = 2 * 50 * 50 + 1;
        const positions = [];
        const packedPositions = [];
        if (graph.Calcmincut(source, sink) > 0) {
            const cutEdges = graph.Bfsthecut(source);
            for (let i = 0; i < cutEdges.length; i += 1) {
                const packedCoord = cutEdges[i];
                const x = packedCoord % 50;
                const y = Math.floor(packedCoord / 50);
                positions.push({ x, y });
                packedPositions.push(packAsNum({ x, y }));
            }
        }
        if (positions.length > 0)
            deleteTilesToDeadEnds(positions);
        return packedPositions;
    }
    const protectionRects = [];
    const { controller } = room;
    protectionRects.push({
        x1: Math.max(Math.min(controller.pos.x - 1, roomDimensions - 3), 2),
        y1: Math.max(Math.min(controller.pos.y - 1, roomDimensions - 3), 2),
        x2: Math.max(Math.min(controller.pos.x + 1, roomDimensions - 3), 2),
        y2: Math.max(Math.min(controller.pos.y + 1, roomDimensions - 3), 2),
    });
    const centerUpgradePos = room.centerUpgradePos;
    if (!centerUpgradePos)
        return false;
    protectionRects.push({
        x1: Math.max(Math.min(centerUpgradePos.x - 3, roomDimensions - 3), 2),
        y1: Math.max(Math.min(centerUpgradePos.y - 3, roomDimensions - 3), 2),
        x2: Math.max(Math.min(centerUpgradePos.x + 3, roomDimensions - 3), 2),
        y2: Math.max(Math.min(centerUpgradePos.y + 3, roomDimensions - 3), 2),
    });
    const { stampAnchors } = room.memory;
    for (const stampType in stampAnchors) {
        const stamp = stamps[stampType];
        const { protectionOffset } = stamp;
        for (const packedStampAnchor of stampAnchors[stampType]) {
            const stampAnchor = unpackNumAsCoord(packedStampAnchor);
            protectionRects.push({
                x1: Math.max(Math.min(stampAnchor.x - protectionOffset, roomDimensions - 3), 2),
                y1: Math.max(Math.min(stampAnchor.y - protectionOffset, roomDimensions - 3), 2),
                x2: Math.max(Math.min(stampAnchor.x + protectionOffset + (stamp.asymmetry || 0), roomDimensions - 3), 2),
                y2: Math.max(Math.min(stampAnchor.y + protectionOffset + (stamp.asymmetry || 0), roomDimensions - 3), 2),
            });
        }
    }
    const rampartPositions = GetCutTiles(protectionRects);
    for (const packedPos of rampartPositions) {
        const pos = unpackNumAsCoord(packedPos);
        room.roadCoords[packAsNum(pos)] = 1;
        room.rampartCoords[packAsNum(pos)] = 1;
    }
    room.findUnprotectedCoords();
    const hubAnchor = unpackNumAsPos(room.memory.stampAnchors.hub[0], room.name);
    const onboardingRampartCoords = new Uint8Array(2500);
    const groupedRampartPositions = room.groupRampartPositions(rampartPositions);
    for (const group of groupedRampartPositions) {
        const closestPosToAnchor = group.sort((a, b) => {
            return (room.advancedFindPath({
                origin: a,
                goals: [{ pos: hubAnchor, range: 3 }],
                weightCoordMaps: [room.unprotectedCoords, room.roadCoords],
            }).length -
                room.advancedFindPath({
                    origin: b,
                    goals: [{ pos: hubAnchor, range: 3 }],
                    weightCoordMaps: [room.unprotectedCoords, room.roadCoords],
                }).length);
        })[0];
        const path = room.advancedFindPath({
            origin: closestPosToAnchor,
            goals: [{ pos: hubAnchor, range: 2 }],
            weightCoordMaps: [room.unprotectedCoords, room.roadCoords],
            plainCost: defaultRoadPlanningPlainCost,
        });
        for (const pos of path)
            room.roadCoords[packAsNum(pos)] = 1;
        let onboardingIndex = 0;
        let onboardingCount = 0;
        while (path[onboardingIndex]) {
            const packedPos = packAsNum(path[onboardingIndex]);
            onboardingIndex += 1;
            if (room.rampartCoords[packedPos] === 1 && onboardingRampartCoords[packedPos] === 0)
                continue;
            room.roadCoords[packedPos] = 1;
            room.rampartCoords[packedPos] = 1;
            onboardingRampartCoords[packedPos] = 1;
            onboardingCount += 1;
            if (onboardingCount === minOnboardingRamparts)
                break;
        }
    }
    return true;
}

function basePlanner(room) {
    if (Game.cpu.bucket < CPUMaxPerTick)
        return false;
    const terrainCoords = internationalManager.getTerrainCoords(room.name);
    room.baseCoords = new Uint8Array(terrainCoords);
    for (const pos of room.find(FIND_EXIT)) {
        room.baseCoords[packAsNum(pos)] = 255;
        for (const coord of findCoordsInsideRect(pos.x - 2, pos.y - 2, pos.x + 2, pos.y + 2))
            room.baseCoords[packAsNum(coord)] = 255;
    }
    room.roadCoords = new Uint8Array(terrainCoords);
    room.rampartCoords = new Uint8Array(terrainCoords);
    if (!room.memory.stampAnchors) {
        room.memory.stampAnchors = {};
        for (const type in stamps)
            room.memory.stampAnchors[type] = [];
    }
    function recordAdjacentPositions(x, y, range, weight) {
        for (const coord of findCoordsInsideRect(x - range, y - range, x + range, y + range)) {
            room.baseCoords[packAsNum(coord)] = Math.max(weight || 255, room.baseCoords[packAsNum(coord)]);
        }
    }
    recordAdjacentPositions(room.controller.pos.x, room.controller.pos.y, 2);
    for (const coord of room.mineralPositions)
        room.baseCoords[packAsNum(coord)] = 255;
    const sources = room.sources;
    for (const sourceIndex in sources) {
        const sourcePositions = room.sourcePositions[sourceIndex];
        recordAdjacentPositions(sourcePositions[0].x, sourcePositions[0].y, 1);
        for (const pos of sourcePositions)
            room.baseCoords[packAsNum(pos)] = 255;
    }
    let closestSourceToController;
    let closestSourceToControllerRange = Infinity;
    for (const source of sources) {
        const range = room.advancedFindPath({
            origin: source.pos,
            goals: [{ pos: room.controller.pos, range: 1 }],
            plainCost: defaultRoadPlanningPlainCost,
        }).length;
        if (range > closestSourceToControllerRange)
            continue;
        closestSourceToControllerRange = range;
        closestSourceToController = source;
    }
    let path;
    let avgControllerSourcePos;
    if (closestSourceToControllerRange <= 1) {
        avgControllerSourcePos = closestSourceToController.pos;
    }
    else {
        path = room.advancedFindPath({
            origin: closestSourceToController.pos,
            goals: [{ pos: room.controller.pos, range: 1 }],
            weightCoordMaps: [room.roadCoords],
            plainCost: defaultRoadPlanningPlainCost,
        });
        avgControllerSourcePos = path[Math.floor(path.length / 2)];
    }
    const controllerAdjacentCoords = findCoordsInsideRect(room.controller.pos.x - 3, room.controller.pos.y - 3, room.controller.pos.x + 3, room.controller.pos.y + 3);
    for (const coord of controllerAdjacentCoords)
        room.baseCoords[packAsNum(coord)] = 255;
    let stamp;
    let packedStampAnchor;
    let stampAnchor;
    let structureType;
    let pos;
    let x;
    let y;
    function planStamp(opts) {
        if (!opts.coordMap)
            opts.coordMap = room.baseCoords;
        else {
            opts.coordMap = new Uint8Array(opts.coordMap);
            for (const pos of room.find(FIND_EXIT)) {
                opts.coordMap[packAsNum(pos)] = 255;
                for (const coord of findCoordsInsideRect(pos.x - 2, pos.y - 2, pos.x + 2, pos.y + 2))
                    opts.coordMap[packAsNum(coord)] = 255;
            }
        }
        stamp = stamps[opts.stampType];
        const newStampAnchors = [];
        const newStampAnchorsPacked = [];
        while (opts.count > 0) {
            opts.count -= 1;
            if (room.memory.stampAnchors[opts.stampType][opts.count]) {
                for (packedStampAnchor of room.memory.stampAnchors[opts.stampType]) {
                    stampAnchor = unpackNumAsCoord(packedStampAnchor);
                    for (structureType in stamp.structures) {
                        for (pos of stamp.structures[structureType]) {
                            x = pos.x + stampAnchor.x - stamp.offset;
                            y = pos.y + stampAnchor.y - stamp.offset;
                            if (structureType === STRUCTURE_ROAD) {
                                room.roadCoords[packXYAsNum(x, y)] = 1;
                                continue;
                            }
                            room.baseCoords[packXYAsNum(x, y)] = 255;
                            room.roadCoords[packXYAsNum(x, y)] = 255;
                        }
                    }
                }
                continue;
            }
            const distanceCoords = opts.normalDT
                ? room.distanceTransform(opts.coordMap, false, opts.minAvoid)
                : room.diagonalDistanceTransform(opts.coordMap, false, opts.minAvoid);
            stampAnchor = stamp.asymmetry
                ? room.findClosestPosOfValueAsym({
                    coordMap: distanceCoords,
                    startCoords: opts.startCoords,
                    requiredValue: stamp.size,
                    reduceIterations: 0,
                    initialWeight: opts.initialWeight || 0,
                    adjacentToRoads: opts.adjacentToRoads,
                    roadCoords: opts.adjacentToRoads ? room.roadCoords : undefined,
                    offset: stamp.offset,
                    asymOffset: stamp.asymmetry,
                    cardinalFlood: opts.cardinalFlood,
                    protectionOffset: stamp.protectionOffset,
                })
                : room.findClosestPosOfValue({
                    coordMap: distanceCoords,
                    startCoords: opts.startCoords,
                    requiredValue: stamp.size,
                    reduceIterations: 0,
                    initialWeight: opts.initialWeight || 0,
                    adjacentToRoads: opts.adjacentToRoads,
                    roadCoords: opts.adjacentToRoads ? room.roadCoords : undefined,
                    cardinalFlood: opts.cardinalFlood,
                    protectionOffset: stamp.protectionOffset,
                });
            if (!stampAnchor)
                return false;
            newStampAnchors.push(stampAnchor);
            newStampAnchorsPacked.push(packAsNum(stampAnchor));
            for (structureType in stamp.structures) {
                for (pos of stamp.structures[structureType]) {
                    x = pos.x + stampAnchor.x - stamp.offset;
                    y = pos.y + stampAnchor.y - stamp.offset;
                    if (structureType === STRUCTURE_ROAD) {
                        room.roadCoords[packXYAsNum(x, y)] = 1;
                        continue;
                    }
                    room.baseCoords[packXYAsNum(x, y)] = 255;
                    room.roadCoords[packXYAsNum(x, y)] = 255;
                }
            }
        }
        room.memory.stampAnchors[opts.stampType] =
            room.memory.stampAnchors[opts.stampType].concat(newStampAnchorsPacked);
        return newStampAnchors;
    }
    if (!planStamp({
        stampType: 'fastFiller',
        count: 1,
        startCoords: [avgControllerSourcePos],
        normalDT: true,
        cardinalFlood: true,
    }))
        return 'failed';
    if (!room.memory.stampAnchors.fastFiller.length) {
        room.memory.NC = true;
        return 'failed';
    }
    for (const coord of controllerAdjacentCoords) {
        if (room.roadCoords[packAsNum(coord)] > 0)
            continue;
        room.baseCoords[packAsNum(coord)] = 0;
    }
    const centerUpgadePos = room.centerUpgradePos;
    if (!centerUpgadePos)
        return 'failed';
    const upgradePositions = room.upgradePositions;
    for (const pos of upgradePositions) {
        room.baseCoords[packAsNum(pos)] = 255;
        room.roadCoords[packAsNum(pos)] = 20;
    }
    path = room.advancedFindPath({
        origin: getRangeOfCoords(room.anchor, avgControllerSourcePos) <= 3
            ? closestSourceToController.pos
            : avgControllerSourcePos,
        goals: [{ pos: room.anchor, range: 3 }],
        weightCoordMaps: [room.roadCoords],
        plainCost: defaultRoadPlanningPlainCost,
    });
    if (!planStamp({
        stampType: 'hub',
        count: 1,
        startCoords: [path[path.length - 1]],
        normalDT: true,
        cardinalFlood: true,
    }))
        return 'failed';
    const hubAnchor = unpackNumAsPos(room.memory.stampAnchors.hub[0], room.name);
    const fastFillerHubAnchor = findAvgBetweenCoords(room.anchor, hubAnchor);
    const closestUpgradePos = upgradePositions[upgradePositions.length - 1];
    if (!closestUpgradePos)
        return 'failed';
    for (const index in sources) {
        const closestSourcePos = room.sourcePositions[index][0];
        if (!room.memory.stampAnchors.container.includes(packAsNum(closestSourcePos))) {
            room.memory.stampAnchors.container.push(packAsNum(closestSourcePos));
        }
        for (const index2 in room.sources) {
            if (index === index2)
                continue;
            for (const pos of room.sourcePositions[index2])
                room.roadCoords[packAsNum(pos)] = 50;
            const closestSourcePos = room.sourcePositions[index2][0];
            const adjacentCoords = findCoordsInsideRect(closestSourcePos.x - 1, closestSourcePos.y - 1, closestSourcePos.x + 1, closestSourcePos.y + 1);
            for (const coord of adjacentCoords) {
                if (room.roadCoords[packAsNum(coord)] > 0)
                    continue;
                room.roadCoords[packAsNum(coord)] = 50;
            }
            room.roadCoords[packAsNum(closestSourcePos)] = 150;
        }
        path = room.advancedFindPath({
            origin: closestSourcePos,
            goals: [{ pos: room.anchor, range: 3 }],
            weightCoordMaps: [room.roadCoords],
            plainCost: defaultRoadPlanningPlainCost,
        });
        for (const pos of path)
            room.roadCoords[packAsNum(pos)] = 1;
        path = room.advancedFindPath({
            origin: closestSourcePos,
            goals: [{ pos: closestUpgradePos, range: 1 }],
            weightCoordMaps: [room.roadCoords],
            plainCost: defaultRoadPlanningPlainCost,
        });
        for (const pos of path)
            room.roadCoords[packAsNum(pos)] = 1;
    }
    room.roadCoords[packAsNum(closestUpgradePos)] = 1;
    if (!planStamp({
        stampType: 'labs',
        count: 1,
        startCoords: [hubAnchor],
        normalDT: true,
        coordMap: room.roadCoords,
        cardinalFlood: true,
    }))
        return 'failed';
    path = room.advancedFindPath({
        origin: hubAnchor,
        goals: [{ pos: room.anchor, range: 4 }],
        weightCoordMaps: [room.roadCoords],
        plainCost: defaultRoadPlanningPlainCost,
    });
    if (!planStamp({
        stampType: 'extensions',
        count: 6,
        startCoords: [hubAnchor],
    }))
        return 'failed';
    for (const extensionsAnchor of room.memory.stampAnchors.extensions) {
        path = room.advancedFindPath({
            origin: unpackNumAsPos(extensionsAnchor, room.name),
            goals: [{ pos: hubAnchor, range: 2 }],
            weightCoordMaps: [room.roadCoords],
            plainCost: defaultRoadPlanningPlainCost,
        });
        for (const pos of path)
            room.roadCoords[packAsNum(pos)] = 1;
    }
    for (const pos of path) {
        room.roadCoords[packAsNum(pos)] = 1;
    }
    path = room.advancedFindPath({
        origin: centerUpgadePos,
        goals: [{ pos: hubAnchor, range: 2 }],
        weightCoordMaps: [room.roadCoords],
        plainCost: defaultRoadPlanningPlainCost,
    });
    for (const pos of path)
        room.roadCoords[packAsNum(pos)] = 1;
    for (const index in sources) {
        const closestSourcePos = room.sourcePositions[index][0];
        room.roadCoords[packAsNum(closestSourcePos)] = 255;
    }
    path = room.advancedFindPath({
        origin: unpackNumAsPos(room.memory.stampAnchors.labs[0], room.name),
        goals: [{ pos: hubAnchor, range: 1 }],
        weightCoordMaps: [room.roadCoords],
        plainCost: defaultRoadPlanningPlainCost,
    });
    for (const pos of path)
        room.roadCoords[packAsNum(pos)] = 1;
    const closestMineralHarvestPos = room.mineralPositions[0];
    if (closestMineralHarvestPos)
        room.roadCoords[packAsNum(closestMineralHarvestPos)] = 255;
    if (!room.memory.stampAnchors.container.includes(packAsNum(closestMineralHarvestPos))) {
        room.memory.stampAnchors.container.push(packAsNum(closestMineralHarvestPos));
    }
    path = room.advancedFindPath({
        origin: closestMineralHarvestPos,
        goals: [{ pos: hubAnchor, range: 1 }],
        weightCoordMaps: [room.roadCoords],
        plainCost: defaultRoadPlanningPlainCost,
    });
    for (const pos of path)
        room.roadCoords[packAsNum(pos)] = 1;
    if (!room.memory.stampAnchors.extractor.length)
        room.memory.stampAnchors.extractor.push(packAsNum(room.mineral.pos));
    room.baseCoords[packAsNum(closestUpgradePos)] = 255;
    let extraExtensionsAmount = CONTROLLER_STRUCTURES.extension[8] -
        stamps.fastFiller.structures.extension.length -
        room.memory.stampAnchors.extensions.length * stamps.extensions.structures.extension.length -
        room.memory.stampAnchors.extension.length -
        room.memory.stampAnchors.sourceExtension.length;
    if (!planStamp({
        stampType: 'tower',
        count: 6,
        startCoords: [fastFillerHubAnchor],
        adjacentToRoads: true,
        coordMap: room.roadCoords,
        minAvoid: 255,
    }))
        return 'failed';
    rampartPlanner(room);
    for (let x = 0; x < roomDimensions; x += 1) {
        for (let y = 0; y < roomDimensions; y += 1) {
            const packedCoord = packXYAsNum(x, y);
            if (room.roadCoords[packedCoord] === 1)
                room.baseCoords[packedCoord] = 255;
        }
    }
    if (room.memory.stampAnchors.sourceLink.length + room.memory.stampAnchors.sourceExtension.length === 0) {
        for (const sourceIndex in sources) {
            let sourceHasLink = false;
            const closestSourcePos = room.sourcePositions[sourceIndex][0];
            const OGCoords = new Map();
            for (let posIndex = 1; posIndex < room.sourcePositions[sourceIndex].length; posIndex += 1) {
                const packedCoord = packAsNum(room.sourcePositions[sourceIndex][posIndex]);
                OGCoords.set(packedCoord, room.roadCoords[packedCoord]);
                room.roadCoords[packedCoord] = 0;
            }
            let adjacentCoords = findCoordsInsideRect(closestSourcePos.x - 3, closestSourcePos.y - 3, closestSourcePos.x + 3, closestSourcePos.y + 3);
            for (const coord of adjacentCoords) {
                if (room.unprotectedCoords[packAsNum(coord)] === 0)
                    continue;
                room.rampartCoords[packAsNum(closestSourcePos)] = 1;
                break;
            }
            adjacentCoords = findCoordsInsideRect(closestSourcePos.x - 1, closestSourcePos.y - 1, closestSourcePos.x + 1, closestSourcePos.y + 1);
            adjacentCoords.sort(function (a, b) {
                return getRange(a.x, hubAnchor.x, a.y, hubAnchor.y) - getRange(b.x, hubAnchor.x, b.y, hubAnchor.y);
            });
            for (const coord1 of adjacentCoords) {
                const packedCoord1 = packAsNum(coord1);
                const roadCoordsValue = room.roadCoords[packedCoord1];
                if (roadCoordsValue === 1)
                    continue;
                if (roadCoordsValue === 255)
                    continue;
                if (room.rampartCoords[packedCoord1] > 0)
                    continue;
                if (coord1.x < 2 || coord1.x >= roomDimensions - 2 || coord1.y < 2 || coord1.y >= roomDimensions - 2)
                    continue;
                room.baseCoords[packedCoord1] = 255;
                room.roadCoords[packedCoord1] = 255;
                OGCoords.set(packedCoord1, 255);
                if (!sourceHasLink) {
                    sourceHasLink = true;
                    room.memory.stampAnchors.sourceLink.push(packedCoord1);
                    const adjacentCoords = findCoordsInsideRect(coord1.x - 3, coord1.y - 3, coord1.x + 3, coord1.y + 3);
                    for (const coord2 of adjacentCoords) {
                        if (room.unprotectedCoords[packAsNum(coord2)] === 0)
                            continue;
                        room.rampartCoords[packedCoord1] = 1;
                        break;
                    }
                    continue;
                }
                room.memory.stampAnchors.sourceExtension.push(packedCoord1);
                extraExtensionsAmount -= 1;
                continue;
            }
            for (const [coord, value] of OGCoords)
                room.roadCoords[coord] = value;
        }
    }
    if (!planStamp({
        stampType: 'extension',
        count: extraExtensionsAmount,
        startCoords: [hubAnchor],
        adjacentToRoads: true,
        coordMap: room.roadCoords,
        minAvoid: 255,
    }))
        return 'failed';
    if (!planStamp({
        stampType: 'observer',
        count: 1,
        startCoords: [fastFillerHubAnchor],
        coordMap: room.roadCoords,
    }))
        return 'failed';
    const observerAnchor = unpackNumAsPos(room.memory.stampAnchors.observer[0], room.name);
    let adjacentCoords = findCoordsInsideRect(observerAnchor.x - 3, observerAnchor.y - 3, observerAnchor.x + 3, observerAnchor.y + 3);
    if (!room.unprotectedCoords)
        room.findUnprotectedCoords();
    for (const coord of adjacentCoords) {
        if (room.unprotectedCoords[packAsNum(coord)] === 0)
            continue;
        room.rampartCoords[packAsNum(observerAnchor)] = 1;
        break;
    }
    for (let x = 0; x < roomDimensions; x += 1) {
        for (let y = 0; y < roomDimensions; y += 1) {
            const packedPos = packXYAsNum(x, y);
            if (room.rampartCoords[packedPos] === 1)
                room.memory.stampAnchors.rampart.push(packedPos);
            if (!room.memory.stampAnchors.road.includes(packedPos) && room.roadCoords[packedPos] === 1)
                room.memory.stampAnchors.road.push(packedPos);
        }
    }
    room.memory.PC = true;
    return true;
}

Room.prototype.remotePlanner = function (commune) {
    return true;
};
Room.prototype.clearOtherStructures = function () {
    if (!randomTick(100))
        return;
    for (const wall of this.structures.constructedWall)
        wall.destroy();
    for (const structure of this.find(FIND_HOSTILE_STRUCTURES))
        structure.destroy();
};
Room.prototype.remoteConstructionPlacement = function () { };
Room.prototype.communeConstructionPlacement = function () {
    if (!this.memory.PC)
        return;
    if (!this.myCreeps.builder.length && !randomTick(200))
        return;
    if (global.constructionSitesCount === MAX_CONSTRUCTION_SITES)
        return;
    if (this.find(FIND_MY_CONSTRUCTION_SITES).length > 2)
        return;
    let placed = 0;
    for (const stampType in stamps) {
        const stamp = stamps[stampType];
        for (const packedStampAnchor of this.memory.stampAnchors[stampType]) {
            const stampAnchor = unpackNumAsCoord(packedStampAnchor);
            for (const structureType in stamp.structures) {
                if (structureType === 'empty')
                    continue;
                if (this.structures[structureType].length +
                    this.cSites[structureType].length >=
                    CONTROLLER_STRUCTURES[structureType][this.controller.level])
                    continue;
                if (structureType === STRUCTURE_RAMPART &&
                    (!this.storage || this.controller.level < 4 || this.storage.store.energy < 30000)) {
                    continue;
                }
                if (structureType === STRUCTURE_ROAD && this.energyCapacityAvailable < 800)
                    continue;
                for (const pos of stamp.structures[structureType]) {
                    const x = pos.x + stampAnchor.x - stamp.offset;
                    const y = pos.y + stampAnchor.y - stamp.offset;
                    if (placed > 10)
                        return;
                    if (structureType == STRUCTURE_ROAD) {
                        const impassableStructure = this.lookForAt(LOOK_STRUCTURES, x, y).find(str => impassibleStructureTypes.includes(str.structureType));
                        if (impassableStructure)
                            continue;
                    }
                    if (this.createConstructionSite(x, y, structureType) === OK)
                        placed += 1;
                }
            }
        }
    }
    if (this.storage && this.storage.store.energy > 30000) {
        for (const structureType of [
            STRUCTURE_TOWER,
            STRUCTURE_SPAWN,
            STRUCTURE_STORAGE,
            STRUCTURE_TERMINAL,
            STRUCTURE_FACTORY,
            STRUCTURE_LAB,
        ]) {
            const structures = this.find(FIND_MY_STRUCTURES, { filter: { structureType: structureType } });
            for (const structure of structures) {
                if (placed > 10)
                    continue;
                let rampart = structure.pos.lookFor(LOOK_STRUCTURES).filter(st => st.structureType == STRUCTURE_RAMPART);
                let rampartc = structure.pos
                    .lookFor(LOOK_CONSTRUCTION_SITES)
                    .filter(st => st.structureType == STRUCTURE_RAMPART);
                if (rampart.length == 0 && rampartc.length == 0) {
                    if (this.createConstructionSite(structure.pos.x, structure.pos.y, STRUCTURE_RAMPART) === OK)
                        placed += 1;
                }
            }
        }
    }
    if (Memory.roomVisuals)
        this.visual.connectRoads();
};

function constructionManager(room) {
    if (Memory.CPULogging === true)
        var managerCPUStart = Game.cpu.getUsed();
    if (!room.memory.PC)
        basePlanner(room);
    manageControllerStructures();
    function manageControllerStructures() {
        const centerUpgradePos = room.centerUpgradePos;
        if (!centerUpgradePos)
            return;
        if (room.controller.level >= 5) {
            const controllerContainer = room.controllerContainer;
            if (controllerContainer)
                controllerContainer.destroy();
            room.createConstructionSite(centerUpgradePos, STRUCTURE_LINK);
            return;
        }
        room.createConstructionSite(centerUpgradePos, STRUCTURE_CONTAINER);
    }
    room.clearOtherStructures();
    room.communeConstructionPlacement();
    if (Memory.CPULogging === true) {
        const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
        customLog('Construction Manager', cpuUsed.toFixed(2), {
            textColor: customColors.white,
            bgColor: customColors.lightBlue,
        });
        const statName = 'cmcu';
        globalStatsUpdater(room.name, statName, cpuUsed);
    }
}

class CombatManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    run() {
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        this.advancedActivateSafeMode();
        this.manageRampartPublicity();
        this.assignDefenceTargets();
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('Defense Manager', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'dmcu';
            globalStatsUpdater(this.communeManager.room.name, statName, cpuUsed);
        }
    }
    shouldActivatesSafeMode() {
        const { room } = this.communeManager;
        const { controller } = room;
        if (controller.safeModeCooldown)
            return false;
        if (!controller.safeModeAvailable)
            return false;
        if (controller.upgradeBlocked)
            return false;
        const nonInvaderAttackers = room.enemyAttackers.filter(enemyCreep => !enemyCreep.isOnExit && enemyCreep.owner.username);
        if (!nonInvaderAttackers.length)
            return false;
        const eventLog = room.getEventLog();
        for (const eventItem of eventLog) {
            if (eventItem.event !== EVENT_ATTACK)
                continue;
            const attackTarget = findObjectWithID(eventItem.data.targetId);
            if (!(attackTarget instanceof Structure))
                continue;
            const structuresAtCoord = room.structureCoords.get(packCoord(attackTarget.pos));
            if (structuresAtCoord && structuresAtCoord.find(ID => findObjectWithID(ID).structureType === STRUCTURE_SPAWN))
                return true;
            if (safemodeTargets.includes(attackTarget.structureType))
                return true;
        }
        return false;
    }
    advancedActivateSafeMode() {
        if (!this.shouldActivatesSafeMode())
            return;
        this.communeManager.room.controller.activateSafeMode();
    }
    manageRampartPublicity() {
        const { room } = this.communeManager;
        const enemyAttackers = room.enemyAttackers;
        if (!enemyAttackers.length) {
            if (!Memory.publicRamparts)
                return;
            if (!randomTick())
                return;
            let intents = 0;
            for (const rampart of room.structures.rampart) {
                if (intents >= 10)
                    return;
                if (rampart.isPublic)
                    continue;
                rampart.setPublic(true);
                intents += 1;
            }
            return;
        }
        for (const rampart of room.structures.rampart)
            if (rampart.isPublic)
                rampart.setPublic(false);
    }
    assignDefenceTargets() {
        const { room } = this.communeManager;
        if (!room.enemyAttackers.length)
            return;
        const defenderEnemyTargetsByDamage = Array.from(room.defenderEnemyTargetsWithDefender.keys()).sort((a, b) => {
            const creepA = findObjectWithID(a);
            const creepB = findObjectWithID(b);
            return (creepA.hits / creepA.hitsMax -
                (creepA.hits + room.defenderEnemyTargetsWithDamage.get(a)) / creepA.hitsMax -
                (creepB.hits / creepB.hitsMax -
                    (creepB.hits + room.defenderEnemyTargetsWithDamage.get(b)) / creepB.hitsMax));
        });
        for (const enemyCreepID of defenderEnemyTargetsByDamage) {
            const enemyCreep = findObjectWithID(enemyCreepID);
            for (const memberID of room.defenderEnemyTargetsWithDefender.get(enemyCreepID)) {
                if (!room.attackingDefenderIDs.has(memberID))
                    continue;
                const member = Game.getObjectById(memberID);
                Game.creeps[member.name].combatTarget = enemyCreep;
                room.attackingDefenderIDs.delete(memberID);
            }
            const damage = room.defenderEnemyTargetsWithDamage.get(enemyCreep.id);
            room.visual.text(damage.toString(), enemyCreep.pos.x, enemyCreep.pos.y - 0.25, { font: 0.3 });
            if (damage > 0) {
                if (!room.towerAttackTarget)
                    room.towerAttackTarget = enemyCreep;
                else if (damage > room.defenderEnemyTargetsWithDamage.get(room.towerAttackTarget.id))
                    room.towerAttackTarget = enemyCreep;
            }
            if (!room.attackingDefenderIDs.size)
                break;
        }
    }
    manageDefenceRequests() {
        const { room } = this.communeManager;
        if (!room.towerInferiority)
            return;
        let onlyInvader = true;
        let minDamage = 0;
        let minMeleeHeal = 0;
        let minRangedHeal = 0;
        for (const enemyCreep of room.enemyAttackers) {
            minDamage += Math.max(Math.max(enemyCreep.combatStrength.heal, Math.ceil(enemyCreep.hits / 25)), minDamage);
            minMeleeHeal += Math.max(enemyCreep.combatStrength.melee, minMeleeHeal);
            minRangedHeal += Math.max(enemyCreep.combatStrength.ranged, minRangedHeal);
            if (onlyInvader && enemyCreep.owner.username !== 'Invader')
                onlyInvader = false;
        }
        if (minRangedHeal > minMeleeHeal)
            minMeleeHeal = minRangedHeal;
        room.createDefendCombatRequest({
            minDamage,
            minMeleeHeal,
            minRangedHeal,
            quadQuota: 1,
            inactionTimerMax: onlyInvader ? 1 : undefined,
        });
    }
    calculateThreat() {
        this.totalThreat = 0;
        this.threatByPlayers = new Map();
        const { room } = this.communeManager;
        if (!room.towerInferiority)
            return;
        for (const enemyCreep of room.enemyAttackers) {
            let threat = 0;
            threat += enemyCreep.combatStrength.dismantle;
            threat += enemyCreep.combatStrength.melee;
            threat += enemyCreep.combatStrength.ranged * 3;
            threat += enemyCreep.combatStrength.heal / enemyCreep.defenceStrength;
            threat = Math.floor(threat);
            this.totalThreat += threat;
            const playerName = enemyCreep.owner.username;
            if (playerName === 'Invader')
                continue;
            const threatByPlayer = this.threatByPlayers.get(enemyCreep.owner.username);
            if (threatByPlayer) {
                this.threatByPlayers.set(playerName, threatByPlayer + threat);
                continue;
            }
            this.threatByPlayers.set(playerName, threat);
        }
    }
    manageThreat() {
        const { room } = this.communeManager;
        this.calculateThreat();
        for (const [playerName, threat] of this.threatByPlayers) {
            let player = Memory.players[playerName];
            if (!player) {
                player = Memory.players[playerName] = {
                    data: [0],
                };
            }
            player.data[PlayerData.offensiveStrength] = Math.max(threat, player.data[PlayerData.offensiveStrength]);
            player.data[PlayerData.hate] = Math.max(threat, player.data[PlayerData.hate]);
            player.data[PlayerData.lastAttack] = 0;
        }
        const roomMemory = Memory.rooms[room.name];
        if (this.totalThreat > 0) {
            roomMemory.AT = Math.max(roomMemory.AT, this.totalThreat);
            roomMemory.LAT = 0;
        }
        if (roomMemory.AT > 0)
            roomMemory.AT -= 1 + roomMemory.LAT * 0.002;
        roomMemory.LAT += 1;
    }
}

class AllyCreepRequestManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    run() {
        const { room } = this.communeManager;
        if (!room.structures.spawn.length)
            return;
        if (!room.memory.allyCreepRequest)
            return;
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        Memory.allyCreepRequests[room.memory.allyCreepRequest].data[AllyCreepRequestData.allyVanguard] = 20;
        const request = Game.rooms[room.memory.allyCreepRequest];
        if (!request)
            return;
        if (request.controller &&
            request.controller.owner &&
            !Memory.allyPlayers.includes(request.controller.owner.username)) {
            Memory.allyCreepRequests[room.memory.allyCreepRequest].data[AllyCreepRequestData.allyVanguard] += 1;
            return;
        }
        if (!request.allyCSites.length) {
            delete Memory.allyCreepRequests[room.memory.allyCreepRequest];
            delete room.memory.allyCreepRequest;
            return;
        }
        if (request.enemyCreeps.length) {
            Memory.allyCreepRequests[room.memory.allyCreepRequest].data[AllyCreepRequestData.abandon] = 20000;
            Memory.allyCreepRequests[room.memory.allyCreepRequest].data[AllyCreepRequestData.allyVanguard] = 0;
            delete room.memory.allyCreepRequest;
        }
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('Ally Creep Request Manager', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'acrmcu';
            globalStatsUpdater(room.name, statName, cpuUsed);
        }
    }
}
Room.prototype.allyCreepRequestManager = function () { };

class ClaimRequestManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    preTickRun() {
        const { room } = this.communeManager;
        if (room.structures.spawn.length)
            return;
        if (Memory.claimRequests[room.name])
            return;
        const request = (Memory.claimRequests[room.name] = {
            data: [0],
        });
        request.data[ClaimRequestData.score] = 0;
    }
    run() {
        const { room } = this.communeManager;
        const requestName = room.memory.claimRequest;
        if (!requestName)
            return;
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        const request = Memory.claimRequests[requestName];
        if (!request) {
            delete room.memory.claimRequest;
            return;
        }
        if (!room.structures.spawn.length) {
            this.stopResponse(true);
            return;
        }
        const type = Memory.rooms[requestName].T;
        if (type !== 'neutral' && type !== 'commune' && type !== 'remote') {
            this.stopResponse(type !== 'ally');
            return;
        }
        if (Game.map.getRoomStatus(requestName).status !== Game.map.getRoomStatus(room.name).status) {
            this.delete();
            return;
        }
        if (request.data[ClaimRequestData.abandon] > 0) {
            this.stopResponse();
            return;
        }
        if (room.energyCapacityAvailable < 650) {
            this.stopResponse();
            return;
        }
        const requestRoom = Game.rooms[requestName];
        if (!requestRoom || !requestRoom.controller.my) {
            request.data[ClaimRequestData.claimer] = 1;
            return;
        }
        if (requestRoom.structures.spawn.length && requestRoom.structures.spawn.find(spawn => spawn.my)) {
            this.delete();
            return;
        }
        const invaderCores = requestRoom.structures.invaderCore;
        if (invaderCores.length) {
            this.abandon(invaderCores[0].effects[EFFECT_COLLAPSE_TIMER].ticksRemaining + CONTROLLER_RESERVE_MAX);
            return;
        }
        request.data[ClaimRequestData.vanguard] = requestRoom.structures.spawn.length ? 0 : 20;
        request.data[ClaimRequestData.minDamage] = 0;
        request.data[ClaimRequestData.minHeal] = 0;
        if (!requestRoom.controller.safeMode) {
            for (const enemyCreep of requestRoom.enemyAttackers) {
                if (enemyCreep.owner.username === 'Invader')
                    continue;
                request.data[ClaimRequestData.minDamage] += enemyCreep.combatStrength.heal;
                request.data[ClaimRequestData.minHeal] += enemyCreep.combatStrength.ranged;
            }
            for (const allyCreep of requestRoom.allyCreeps) {
                request.data[ClaimRequestData.minDamage] -= allyCreep.combatStrength.heal;
                request.data[ClaimRequestData.minHeal] -= allyCreep.combatStrength.ranged;
            }
            if (request.data[ClaimRequestData.minDamage] > 0 || request.data[ClaimRequestData.minHeal] > 0)
                this.abandon();
        }
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('Claim Request Manager', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'clrmcu';
            globalStatsUpdater(room.name, statName, cpuUsed);
        }
    }
    stopResponse(deleteCombat) {
        const roomMemory = this.communeManager.room.memory;
        const request = Memory.claimRequests[roomMemory.claimRequest];
        if (deleteCombat)
            this.deleteCombat();
        delete request.responder;
        delete roomMemory.claimRequest;
    }
    delete() {
        const roomMemory = this.communeManager.room.memory;
        this.deleteCombat();
        delete Memory.claimRequests[roomMemory.claimRequest];
        delete roomMemory.claimRequest;
    }
    abandon(abandonTime = 20000) {
        const roomMemory = this.communeManager.room.memory;
        const request = Memory.claimRequests[roomMemory.claimRequest];
        this.deleteCombat();
        request.data[ClaimRequestData.abandon] = abandonTime;
        delete request.responder;
        delete roomMemory.claimRequest;
    }
    deleteCombat() {
        const claimRequestName = this.communeManager.room.memory.claimRequest;
        const combatRequest = Memory.combatRequests[claimRequestName];
        if (!combatRequest)
            return;
        if (combatRequest.responder) {
            const combatRequestResponder = Game.rooms[combatRequest.responder];
            combatRequestResponder.communeManager.deleteCombatRequest(combatRequest.responder, combatRequestResponder.memory.combatRequests.indexOf(claimRequestName));
            return;
        }
        delete Memory.combatRequests[claimRequestName];
    }
}

class CombatRequestManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    run() {
        const { room } = this.communeManager;
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        for (let index = room.memory.combatRequests.length - 1; index >= 0; index -= 1) {
            const requestName = room.memory.combatRequests[index];
            const request = Memory.combatRequests[requestName];
            if (!request) {
                room.memory.combatRequests.splice(index, 1);
                continue;
            }
            if (!room.structures.spawn.length) {
                delete request.responder;
                room.memory.combatRequests.splice(index, 1);
                continue;
            }
            if (!this.canKeepRequest()) {
                delete request.responder;
                room.memory.combatRequests.splice(index, 1);
            }
            this[`${request.T}Request`](requestName, index);
        }
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('Combat Request Manager', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'cormcu';
            globalStatsUpdater(room.name, statName, cpuUsed);
        }
    }
    canKeepRequest() {
        const { room } = this.communeManager;
        if (room.storage && room.controller.level >= 4) {
            if (room.memory.combatRequests.length >= room.communeManager.maxCombatRequests)
                return false;
        }
        if (room.memory.combatRequests.length >= room.estimateIncome() / 10)
            return false;
        return true;
    }
    attackRequest(requestName, index) {
        this.communeManager;
        const request = Memory.combatRequests[requestName];
        const requestRoom = Game.rooms[requestName];
        if (!requestRoom)
            return;
        if (requestRoom.controller && requestRoom.controller.safeMode) {
            request.data[CombatRequestData.abandon] = requestRoom.controller.safeMode;
            this.manageAbandonment(requestName, index);
            return;
        }
        if (!requestRoom.enemyCreeps.length && (!requestRoom.controller || !requestRoom.controller.owner)) {
            this.communeManager.deleteCombatRequest(requestName, index);
            return;
        }
    }
    harassRequest(requestName, index) {
        const { room } = this.communeManager;
        const request = Memory.combatRequests[requestName];
        const requestRoom = Game.rooms[requestName];
        if (!requestRoom)
            return;
        const threateningAttacker = requestRoom.enemyAttackers.find(creep => creep.combatStrength.ranged + creep.combatStrength.ranged > 0);
        if (threateningAttacker) {
            request.data[CombatRequestData.abandon] = 1500;
            room.memory.combatRequests.splice(index, 1);
            delete request.responder;
            return;
        }
        if (!requestRoom.enemyCreeps.length) {
            request.data[CombatRequestData.abandon] = 1500;
            request.data[CombatRequestData.abandonments] += 1;
            this.manageAbandonment(requestName, index);
            return;
        }
    }
    defendRequest(requestName, index) {
        this.communeManager;
        const request = Memory.combatRequests[requestName];
        const requestRoom = Game.rooms[requestName];
        if (!requestRoom)
            return;
        if (requestRoom.controller && requestRoom.controller.safeMode) {
            request.data[CombatRequestData.abandon] = requestRoom.controller.safeMode;
            this.manageAbandonment(requestName, index);
            return;
        }
        for (const enemyCreep of requestRoom.enemyAttackers) {
            if (enemyCreep.combatStrength.ranged > request.data[CombatRequestData.minRangedHeal] * 4)
                request.data[CombatRequestData.minRangedHeal] = enemyCreep.combatStrength.ranged + 1;
            if (enemyCreep.combatStrength.heal >
                request.data[CombatRequestData.minDamage] * enemyCreep.defenceStrength * 4)
                request.data[CombatRequestData.minDamage] = enemyCreep.combatStrength.heal + 1;
        }
        if (!requestRoom.enemyDamageThreat) {
            request.data[CombatRequestData.inactionTimer] -= 1;
            this.manageInaction(requestName, index);
        }
        else
            request.data[CombatRequestData.inactionTimer] = request.data[CombatRequestData.inactionTimerMax];
    }
    manageInaction(requestName, index) {
        const request = Memory.combatRequests[requestName];
        if (request.data[CombatRequestData.inactionTimer] <= 0) {
            this.communeManager.deleteCombatRequest(requestName, index);
            return;
        }
    }
    manageAbandonment(requestName, index) {
        const request = Memory.combatRequests[requestName];
        if (request.data[CombatRequestData.abandonments] >= 3) {
            this.communeManager.deleteCombatRequest(requestName, index);
            return;
        }
        if (request.data[CombatRequestData.abandon] > 0) {
            this.communeManager.room.memory.combatRequests.splice(index, 1);
            delete request.responder;
            return;
        }
    }
}

Room.prototype.factoryManager = function () {
    const factory = this.structures.factory[0];
    const room = this;
    if (!factory)
        return;
    function allComponents(product) {
        let result = [];
        if (product == RESOURCE_ENERGY)
            return [RESOURCE_BATTERY];
        if (product == RESOURCE_GHODIUM)
            return [RESOURCE_GHODIUM_MELT, RESOURCE_ENERGY];
        if (product == RESOURCE_OXYGEN)
            return [RESOURCE_OXIDANT, RESOURCE_ENERGY];
        if (product == RESOURCE_HYDROGEN)
            return [RESOURCE_REDUCTANT, RESOURCE_ENERGY];
        if (product == RESOURCE_CATALYST)
            return [RESOURCE_PURIFIER, RESOURCE_ENERGY];
        if (product == RESOURCE_UTRIUM)
            return [RESOURCE_UTRIUM_BAR, RESOURCE_ENERGY];
        if (product == RESOURCE_LEMERGIUM)
            return [RESOURCE_LEMERGIUM_BAR, RESOURCE_ENERGY];
        if (product == RESOURCE_KEANIUM)
            return [RESOURCE_KEANIUM_BAR, RESOURCE_ENERGY];
        if (product == RESOURCE_ZYNTHIUM)
            return [RESOURCE_ZYNTHIUM_BAR, RESOURCE_ENERGY];
        if (factory && COMMODITIES[product].level && COMMODITIES[product].level != factory.level)
            return [];
        for (let component of Object.keys(COMMODITIES[product].components)) {
            result.push(component);
            if (!BASE_RESOURCES.includes(component) &&
                COMMODITIES[component]) {
                result = result.concat(allComponents(component));
            }
        }
        return _.uniq(result);
    }
    function updateUsableResources() {
        if (!getProduct()) {
            room.memory.factoryUsableResources = [];
            return;
        }
        room.memory.factoryUsableResources = allComponents(getProduct());
    }
    function setProduct(product) {
        room.memory.factoryProduct = product;
        updateUsableResources();
    }
    function getProduct() {
        return room.memory.factoryProduct;
    }
    const BASE_RESOURCES = ['energy', 'H', 'O', 'U', 'L', 'K', 'Z', 'X', 'G'];
    function haveAllMaterials(resource) {
        var currentlyHaveAllMaterials = true;
        if (COMMODITIES[resource].level && COMMODITIES[resource].level !== factory.level) {
            return false;
        }
        for (const component in COMMODITIES[resource].components) {
            let required = COMMODITIES[resource].components[component];
            var comonentOnHand = room.resourcesInStoringStructures[component];
            if (BASE_RESOURCES.includes(component) ||
                !COMMODITIES[component]) {
                if (comonentOnHand < required)
                    currentlyHaveAllMaterials = false;
            }
            else {
                if (comonentOnHand < required)
                    if (!haveAllMaterials(component))
                        currentlyHaveAllMaterials = false;
            }
        }
        return currentlyHaveAllMaterials;
    }
    function nextProduction(product) {
        if (!product)
            product = getProduct();
        if (!product)
            return null;
        let receipe = COMMODITIES[product];
        if (!receipe)
            return null;
        let missingComponents = _.filter(Object.keys(receipe.components), r => factory.store[r] <
            receipe.components[r]);
        if (missingComponents.length == 0 && (!receipe.level || receipe.level == factory.level)) {
            return product;
        }
        else {
            if (BASE_RESOURCES.includes(product))
                return null;
            for (let component of missingComponents) {
                if (!BASE_RESOURCES.includes(component) &&
                    COMMODITIES[component]) {
                    let result = nextProduction(component);
                    if (result)
                        return result;
                }
            }
        }
        return null;
    }
    function pickProduct() {
        setProduct(null);
        if (room.resourcesInStoringStructures[RESOURCE_ENERGY] > room.communeManager.minStoredEnergy * 1.2 &&
            room.resourcesInStoringStructures.battery < room.resourcesInStoringStructures.energy / 100) {
            setProduct(RESOURCE_BATTERY);
            return;
        }
        if (room.resourcesInStoringStructures[RESOURCE_ENERGY] < room.communeManager.minStoredEnergy &&
            room.resourcesInStoringStructures[RESOURCE_BATTERY] >= 600) {
            setProduct(RESOURCE_ENERGY);
            return;
        }
        let stuffToMake = [
            RESOURCE_CONDENSATE,
            RESOURCE_WIRE,
            RESOURCE_ALLOY,
            RESOURCE_CELL,
            RESOURCE_GHODIUM_MELT,
            RESOURCE_REDUCTANT,
            RESOURCE_OXIDANT,
            RESOURCE_PURIFIER,
            RESOURCE_LEMERGIUM_BAR,
            RESOURCE_UTRIUM_BAR,
            RESOURCE_KEANIUM_BAR,
            RESOURCE_ZYNTHIUM_BAR,
            RESOURCE_BATTERY,
            RESOURCE_COMPOSITE,
        ];
        for (var resource of stuffToMake) {
            let productionTarget = 10000;
            if (resource == RESOURCE_COMPOSITE)
                productionTarget = 200;
            var totalOnHand = room.resourcesInStoringStructures[resource];
            if (resource == RESOURCE_BATTERY && room.resourcesInStoringStructures[RESOURCE_ENERGY] < 200000)
                continue;
            if ((totalOnHand < productionTarget &&
                ![
                    RESOURCE_UTRIUM_BAR,
                    RESOURCE_LEMERGIUM_BAR,
                    RESOURCE_ZYNTHIUM_BAR,
                    RESOURCE_KEANIUM_BAR,
                    RESOURCE_OXIDANT,
                    RESOURCE_REDUCTANT,
                    RESOURCE_PURIFIER,
                ].includes(resource)) ||
                resource == RESOURCE_WIRE ||
                resource == RESOURCE_CONDENSATE ||
                resource == RESOURCE_CELL ||
                resource == RESOURCE_ALLOY ||
                (resource == RESOURCE_PURIFIER && room.resourcesInStoringStructures[RESOURCE_CATALYST] > 10000) ||
                (resource == RESOURCE_UTRIUM_BAR && room.resourcesInStoringStructures[RESOURCE_UTRIUM] > 10000) ||
                (resource == RESOURCE_LEMERGIUM_BAR && room.resourcesInStoringStructures[RESOURCE_LEMERGIUM] > 10000) ||
                (resource == RESOURCE_ZYNTHIUM_BAR &&
                    room.resourcesInStoringStructures[RESOURCE_ZYNTHIUM] > 10000 &&
                    room.resourcesInStoringStructures[RESOURCE_ZYNTHIUM] >
                        room.resourcesInStoringStructures[RESOURCE_ZYNTHIUM_BAR]) ||
                (resource == RESOURCE_KEANIUM_BAR &&
                    room.resourcesInStoringStructures[RESOURCE_KEANIUM] > 10000 &&
                    room.resourcesInStoringStructures[RESOURCE_KEANIUM] >
                        room.resourcesInStoringStructures[RESOURCE_KEANIUM_BAR]) ||
                (resource == RESOURCE_GHODIUM_MELT &&
                    room.resourcesInStoringStructures[RESOURCE_GHODIUM] > 10000 &&
                    room.resourcesInStoringStructures[RESOURCE_GHODIUM] >
                        room.resourcesInStoringStructures[RESOURCE_GHODIUM_MELT]) ||
                (resource == RESOURCE_OXIDANT &&
                    room.resourcesInStoringStructures[RESOURCE_OXYGEN] > 10000 &&
                    room.resourcesInStoringStructures[RESOURCE_OXYGEN] >
                        room.resourcesInStoringStructures[RESOURCE_OXIDANT]) ||
                (resource == RESOURCE_REDUCTANT &&
                    room.resourcesInStoringStructures[RESOURCE_HYDROGEN] > 10000 &&
                    room.resourcesInStoringStructures[RESOURCE_HYDROGEN] >
                        room.resourcesInStoringStructures[RESOURCE_REDUCTANT])) {
                let currentlyHaveAllMaterials = haveAllMaterials(resource);
                if (!currentlyHaveAllMaterials)
                    continue;
                setProduct(resource);
                break;
            }
        }
    }
    function runFactory() {
        if (!getProduct())
            return;
        if (factory.cooldown > 0)
            return;
        let product = nextProduction(null);
        if (!product)
            return;
        var result = factory.produce(product);
        if (result == ERR_BUSY) ;
        else if (result != OK) ;
        else ;
    }
    if (factory.cooldown > 0)
        return;
    if (Game.time % 10 == 0) {
        pickProduct();
    }
    runFactory();
};

const reactionCycleAmount = 5000;
const reverseReactions = {
    G: ['ZK', 'UL'],
    ZK: ['Z', 'K'],
    UL: ['U', 'L'],
    OH: ['H', 'O'],
    LH: ['L', 'H'],
    LO: ['L', 'O'],
    KO: ['K', 'O'],
    KH: ['K', 'H'],
    GH: ['G', 'H'],
    GO: ['G', 'O'],
    UO: ['U', 'O'],
    UH: ['U', 'H'],
    ZH: ['Z', 'H'],
    ZO: ['Z', 'O'],
    LH2O: ['LH', 'OH'],
    LHO2: ['LO', 'OH'],
    GH2O: ['GH', 'OH'],
    GHO2: ['GO', 'OH'],
    KHO2: ['KO', 'OH'],
    KH2O: ['KH', 'OH'],
    UH2O: ['UH', 'OH'],
    UHO2: ['UO', 'OH'],
    ZH2O: ['ZH', 'OH'],
    ZHO2: ['ZO', 'OH'],
    XLH2O: ['X', 'LH2O'],
    XLHO2: ['X', 'LHO2'],
    XGH2O: ['X', 'GH2O'],
    XGHO2: ['X', 'GHO2'],
    XKHO2: ['X', 'KHO2'],
    XKH2O: ['X', 'KH2O'],
    XUH2O: ['X', 'UH2O'],
    XUHO2: ['X', 'UHO2'],
    XZH2O: ['X', 'ZH2O'],
    XZHO2: ['X', 'ZHO2'],
};
const allCompounds = [...Object.keys(reverseReactions), ...minerals];
function decompose(compound) {
    return reverseReactions[compound];
}
const boostsInOrder = [
    RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE,
    RESOURCE_ZYNTHIUM_ALKALIDE,
    RESOURCE_ZYNTHIUM_OXIDE,
    RESOURCE_CATALYZED_GHODIUM_ALKALIDE,
    RESOURCE_GHODIUM_ALKALIDE,
    RESOURCE_GHODIUM_OXIDE,
    RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE,
    RESOURCE_LEMERGIUM_ALKALIDE,
    RESOURCE_LEMERGIUM_OXIDE,
    RESOURCE_CATALYZED_UTRIUM_ACID,
    RESOURCE_UTRIUM_ACID,
    RESOURCE_UTRIUM_HYDRIDE,
    RESOURCE_CATALYZED_KEANIUM_ALKALIDE,
    RESOURCE_KEANIUM_ALKALIDE,
    RESOURCE_KEANIUM_OXIDE,
    RESOURCE_CATALYZED_ZYNTHIUM_ACID,
    RESOURCE_ZYNTHIUM_ACID,
    RESOURCE_ZYNTHIUM_HYDRIDE,
    RESOURCE_CATALYZED_GHODIUM_ACID,
    RESOURCE_GHODIUM_ACID,
    RESOURCE_GHODIUM_HYDRIDE,
    RESOURCE_CATALYZED_KEANIUM_ACID,
    RESOURCE_KEANIUM_ACID,
    RESOURCE_KEANIUM_HYDRIDE,
    RESOURCE_CATALYZED_LEMERGIUM_ACID,
    RESOURCE_LEMERGIUM_ACID,
    RESOURCE_LEMERGIUM_HYDRIDE,
    RESOURCE_CATALYZED_UTRIUM_ALKALIDE,
    RESOURCE_UTRIUM_ALKALIDE,
    RESOURCE_UTRIUM_OXIDE,
];
class LabManager {
    constructor(communeManager) {
        this.targetCompounds = {
            KH: 15000,
            G: 10000,
            [RESOURCE_CATALYZED_UTRIUM_ACID]: 10000,
            [RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE]: 10000,
            [RESOURCE_CATALYZED_KEANIUM_ALKALIDE]: 10000,
            [RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE]: 10000,
            [RESOURCE_CATALYZED_LEMERGIUM_ACID]: 10000,
            [RESOURCE_CATALYZED_GHODIUM_ALKALIDE]: 10000,
            [RESOURCE_CATALYZED_ZYNTHIUM_ACID]: 10000,
            [RESOURCE_CATALYZED_GHODIUM_ACID]: 10000,
        };
        this.deficits = {};
        this.requestedBoosts = [];
        this.communeManager = communeManager;
    }
    preTickRun() { }
    acceptBoost(creep, boost) {
        if (creep.ticksToLive < CREEP_LIFE_TIME - 100)
            return false;
        if (creep.boosts[boost] > 0)
            return false;
        const labId = this.labsByBoost[boost];
        if (!labId)
            return false;
        const lab = this.communeManager.structures.lab.find(lab => lab.id == labId);
        if (lab.mineralType != boost)
            return false;
        if (lab.mineralAmount < LAB_BOOST_MINERAL || lab.store.getUsedCapacity(RESOURCE_ENERGY) < LAB_BOOST_ENERGY)
            return false;
        let result = lab.boostCreep(creep);
        if (result == OK)
            return false;
        if (result == ERR_NOT_IN_RANGE) {
            creep.createMoveRequest({
                origin: creep.pos,
                goals: [
                    {
                        pos: lab.pos,
                        range: 1,
                    },
                ],
                avoidEnemyRanges: true,
            });
        }
        else {
            creep.message += 'BE' + result;
        }
        return true;
    }
    demandBoost(creep, boost) {
        if (creep.ticksToLive < CREEP_LIFE_TIME - 100)
            return false;
        if (creep.boosts[boost] > 0)
            return false;
        const labId = this.labsByBoost[boost];
        if (!labId)
            return true;
        const lab = this.communeManager.structures.lab.find(lab => lab.id == labId);
        if (lab.mineralType != boost)
            return true;
        let result = lab.boostCreep(creep);
        if (result == OK)
            return false;
        if (result == ERR_NOT_IN_RANGE) {
            creep.createMoveRequest({
                origin: creep.pos,
                goals: [
                    {
                        pos: lab.pos,
                        range: 1,
                    },
                ],
                avoidEnemyRanges: true,
            });
        }
        else {
            creep.message += 'BE' + result;
        }
        return true;
    }
    get outputLabs() {
        if (this._outputLabs)
            return this._outputLabs;
        let boostingLabs = Object.values(this.labsByBoost);
        return (this._outputLabs = this.communeManager.structures.lab.filter(lab => !this.communeManager.inputLabIDs.includes(lab.id) && !boostingLabs.includes(lab.id)));
    }
    run() {
        if (!this.communeManager.room.storage || !this.communeManager.room.terminal)
            return;
        this.inputLab1 = this.communeManager.inputLabs[0];
        this.inputLab2 = this.communeManager.inputLabs[1];
        this.assignBoosts();
        this.manageReactions();
    }
    isProperlyLoaded() {
        if ((this.inputLab1.mineralType == this.inputLab1Rsc || this.inputLab1.mineralType == null) &&
            (this.inputLab2.mineralType == this.inputLab2Rsc || this.inputLab2.mineralType == null))
            return true;
        return false;
    }
    manageReactions() {
        if (this.communeManager.inputLabs.length < 2)
            return;
        if (!this.outputLabs.length)
            return;
        if (Memory.roomVisuals) {
            this.communeManager.room.visual.resource(this.inputLab1Rsc, this.communeManager.inputLabs[0].pos.x, this.communeManager.inputLabs[0].pos.y);
            this.communeManager.room.visual.resource(this.inputLab2Rsc, this.communeManager.inputLabs[1].pos.x, this.communeManager.inputLabs[1].pos.y);
        }
        this.updateDeficits();
        this.setCurrentReaction();
        if (!this.isProperlyLoaded)
            return;
        this.runReactions();
    }
    assignBoosts() {
        this.labsByBoost = {};
        for (let compund of boostsInOrder) {
            if (this.requestedBoosts.includes(compund)) {
                if (this.inputLab1Rsc === compund) {
                    this.labsByBoost[compund] = this.communeManager.inputLabs[0].id;
                    continue;
                }
                if (this.inputLab2Rsc === compund) {
                    this.labsByBoost[compund] = this.communeManager.inputLabs[1].id;
                    continue;
                }
                let boostingLabs = Object.values(this.labsByBoost);
                let freelabs = this.communeManager.structures.lab.filter(lab => !this.communeManager.inputLabIDs.includes(lab.id) && !boostingLabs.includes(lab.id));
                if (freelabs.length == 0 &&
                    this.communeManager.inputLabIDs[1] &&
                    !boostingLabs.includes(this.communeManager.inputLabIDs[1])) {
                    freelabs = [this.inputLab1];
                }
                if (freelabs.length == 0 &&
                    this.communeManager.inputLabIDs[1] &&
                    !boostingLabs.includes(this.communeManager.inputLabIDs[1])) {
                    freelabs = [this.inputLab2];
                }
                if (freelabs.length > 0) {
                    let pickedLab = freelabs.find(lab => lab.mineralType == compund);
                    if (!pickedLab)
                        pickedLab = freelabs[0];
                    this.labsByBoost[compund] = pickedLab.id;
                }
                else {
                    return;
                }
            }
        }
    }
    get reactionAmountRemaining() {
        if (this.isReverse) {
            return this.resourceAmount(this.outputRsc) - this.targetAmount;
        }
        else {
            let minMaterial = _.min(_.map(decompose(this.outputRsc), comp => this.resourceAmount(comp)));
            return Math.min(minMaterial, this.targetAmount - this.resourceAmount(this.outputRsc));
        }
    }
    inputSatisfied(inputLab, inputRsc) {
        if (!inputLab)
            return false;
        return !inputLab.mineralType || inputLab.mineralType === inputRsc;
    }
    inputFull(inputLab) {
        if (!inputLab)
            return false;
        if (!inputLab.mineralType)
            return false;
        return (inputLab.store.getFreeCapacity(inputLab.mineralType) === 0 &&
            inputLab.store.getUsedCapacity(inputLab.mineralType) >= this.reactionAmountRemaining);
    }
    reactionPossible() {
        if (!this.outputRsc)
            return false;
        if (!this.isReverse) {
            if (!this.inputLab1.mineralType || !this.inputSatisfied(this.inputLab1, this.inputLab1Rsc))
                return false;
            if (!this.inputLab2.mineralType || !this.inputSatisfied(this.inputLab2, this.inputLab2Rsc))
                return false;
        }
        return true;
    }
    runReactions() {
        if (!this.reactionPossible())
            return false;
        for (const output of this.outputLabs) {
            if (this.isReverse) {
                if (output.mineralType == this.outputRsc && output.store[this.outputRsc] >= LAB_REACTION_AMOUNT)
                    output.reverseReaction(this.inputLab1, this.inputLab2);
            }
            else {
                output.runReaction(this.inputLab1, this.inputLab2);
            }
        }
        return true;
    }
    chainDecompose(compound, amount) {
        this.deficits[compound] = amount + (this.deficits[compound] || 0);
        amount = Math.min(amount, this.deficits[compound]);
        amount = Math.max(amount, 0);
        let decomps = decompose(compound);
        for (var c in decomps) {
            this.chainDecompose(decomps[c], amount);
        }
    }
    updateDeficits() {
        if (Game.time % 10 != 0)
            return;
        this.deficits = {};
        for (let key of allCompounds) {
            this.deficits[key] = -this.resourceAmount(key);
        }
        for (let compound in this.targetCompounds) {
            console.log('updateDeficits ' + this.communeManager.room.name + ': ' + compound);
            var amount = Math.max(0, this.targetCompounds[compound]);
            this.chainDecompose(compound, amount);
        }
        for (let key of Object.keys(this.deficits)) {
            if (this.deficits[key] < 0)
                this.deficits[key] = 0;
        }
    }
    setupReaction(outputRsc, targetAmount, reverse) {
        this.outputRsc = outputRsc;
        if (outputRsc == null) {
            this.inputLab1Rsc = null;
            this.inputLab2Rsc = null;
        }
        else {
            this.inputLab1Rsc = reverseReactions[outputRsc][0];
            this.inputLab2Rsc = reverseReactions[outputRsc][1];
        }
        this.isReverse = reverse;
        this.targetAmount = targetAmount;
    }
    setCurrentReaction() {
        if (this.snoozeUntil && this.snoozeUntil > Game.time)
            return;
        if (!this.isCurrentReactionFinished() && this.replanAt > Game.time)
            return;
        let nextReaction = this.findNextReaction();
        if (nextReaction) {
            this.setupReaction(nextReaction.type, this.resourceAmount(nextReaction.type) + Math.min(reactionCycleAmount, nextReaction.amount), false);
        }
        else if (this.communeManager.room.storage.store['GO'] > 1000) {
            this.setupReaction('GO', 1000, true);
        }
        else if (this.communeManager.room.storage.store['LO'] > 500) {
            this.setupReaction('LO', 500, true);
        }
        else {
            this.setupReaction(null, 0, false);
            this.snoozeUntil = Game.time + 30;
        }
        this.replanAt = Game.time + 3000;
    }
    isCurrentReactionFinished() {
        let currentReaction = this.outputRsc;
        if (!currentReaction)
            return true;
        if (this.isReverse) {
            if (this.resourceAmount(currentReaction) <= this.targetAmount)
                return true;
            return false;
        }
        else {
            if (_.any(decompose(currentReaction), r => this.resourceAmount(r) < LAB_REACTION_AMOUNT))
                return true;
            return this.resourceAmount(currentReaction) >= this.targetAmount;
        }
    }
    chainFindNextReaction(target, targetAmount) {
        let nextReaction = target;
        let missing = _.filter(decompose(nextReaction), r => this.resourceAmount(r) < LAB_REACTION_AMOUNT);
        console.log(targetAmount + ':' + target + ' missing: ' + JSON.stringify(missing));
        if (missing.length === 0)
            return { type: target, amount: targetAmount };
        missing = _.filter(decompose(nextReaction), r => this.resourceAmount(r) < targetAmount);
        missing = _.filter(missing, r => decompose(r));
        for (let target of missing) {
            var result = this.chainFindNextReaction(target, targetAmount - this.resourceAmount(target));
            if (result)
                return result;
        }
        return null;
    }
    findNextReaction() {
        let targets = _.sortBy(_.filter(Object.keys(this.targetCompounds), v => this.deficits[v] > 0), v => -this.deficits[v]);
        for (let target of targets) {
            var result = this.chainFindNextReaction(target, this.deficits[target]);
            if (result)
                return result;
        }
        return null;
    }
    setupInputLab(creep, inputLab, inputRsc) {
        var _a, _b, _c, _d, _e;
        if (this.isReverse) {
            if ((inputLab.mineralType != null && inputLab.mineralType != inputRsc) ||
                inputLab.usedStore(inputRsc) >= creep.store.getFreeCapacity()) {
                let amount = Math.min(creep.freeStore(), inputLab.store[inputLab.mineralType]);
                if (amount != 0)
                    creep.createReservation('withdraw', inputLab.id, amount, inputLab.mineralType);
                if (amount + creep.usedStore(inputLab.mineralType) != 0)
                    creep.createReservation('transfer', (_a = this.communeManager.room.storage) === null || _a === void 0 ? void 0 : _a.id, amount + creep.store[inputLab.mineralType], inputLab.mineralType);
            }
        }
        else {
            if (inputLab.mineralType == inputRsc || inputLab.mineralType == null) {
                let source = ((_b = this.communeManager.room) === null || _b === void 0 ? void 0 : _b.storage.store[inputRsc]) >
                    ((_c = this.communeManager.room) === null || _c === void 0 ? void 0 : _c.terminal.store[inputRsc])
                    ? this.communeManager.room.storage
                    : this.communeManager.room.terminal;
                let amount = Math.min(creep.store.getFreeCapacity(), source.store[inputRsc], inputLab.store.getFreeCapacity(inputRsc));
                amount = Math.max(amount, 0);
                if (inputLab.store.getFreeCapacity(inputRsc) >= creep.store.getCapacity()) {
                    creep.createReservation('withdraw', source.id, amount, inputRsc);
                    creep.createReservation('transfer', inputLab.id, amount, inputRsc);
                }
            }
            else {
                let amount = Math.min(creep.store.getFreeCapacity(), inputLab.store[inputLab.mineralType]);
                creep.createReservation('withdraw', inputLab.id, amount, inputLab.mineralType);
                creep.createReservation('transfer', (_d = this.communeManager.room.storage) === null || _d === void 0 ? void 0 : _d.id, amount + creep.store[inputLab.mineralType], inputLab.mineralType);
            }
        }
        if (((_e = creep.memory.Rs) === null || _e === void 0 ? void 0 : _e.length) > 0)
            return true;
        return false;
    }
    setupOutputLab(creep, outputLab) {
        var _a, _b, _c, _d, _e;
        if (this.isReverse) {
            if (outputLab.mineralType == this.outputRsc || outputLab.mineralType == null) {
                let source = ((_a = this.communeManager.room) === null || _a === void 0 ? void 0 : _a.storage.store[this.outputRsc]) >
                    ((_b = this.communeManager.room) === null || _b === void 0 ? void 0 : _b.terminal.store[this.outputRsc])
                    ? this.communeManager.room.storage
                    : this.communeManager.room.terminal;
                let amount = Math.min(creep.store.getFreeCapacity(), source.store[this.outputRsc], outputLab.store.getFreeCapacity(this.outputRsc));
                amount = Math.max(amount, 0);
                if (outputLab.store.getFreeCapacity(this.outputRsc) >= creep.store.getCapacity()) {
                    creep.createReservation('withdraw', source.id, amount, this.outputRsc);
                    creep.createReservation('transfer', outputLab.id, amount, this.outputRsc);
                }
            }
            else {
                let amount = Math.min(creep.store.getFreeCapacity(), outputLab.store[outputLab.mineralType]);
                creep.createReservation('withdraw', outputLab.id, amount, outputLab.mineralType);
                creep.createReservation('transfer', (_c = this.communeManager.room.storage) === null || _c === void 0 ? void 0 : _c.id, amount + creep.store[outputLab.mineralType], outputLab.mineralType);
            }
        }
        else {
            if ((outputLab.mineralType != null && outputLab.mineralType != this.outputRsc) ||
                outputLab.usedStore(this.outputRsc) >= creep.store.getFreeCapacity()) {
                let amount = Math.min(creep.freeStore(), outputLab.store[outputLab.mineralType]);
                if (amount != 0)
                    creep.createReservation('withdraw', outputLab.id, amount, outputLab.mineralType);
                if (amount + creep.usedStore(outputLab.mineralType) != 0)
                    creep.createReservation('transfer', (_d = this.communeManager.room.storage) === null || _d === void 0 ? void 0 : _d.id, amount + creep.store[outputLab.mineralType], outputLab.mineralType);
            }
        }
        if (((_e = creep.memory.Rs) === null || _e === void 0 ? void 0 : _e.length) > 0)
            return true;
        return false;
    }
    setupBoosterLab(creep, lab, compound) {
        var _a, _b, _c, _d, _e, _f;
        if (lab.mineralType == compound || lab.mineralType == null) {
            if (lab.store[RESOURCE_ENERGY] / 30 < lab.store[compound] / 20 &&
                lab.store.getFreeCapacity(RESOURCE_ENERGY) > creep.store.getCapacity()) {
                let source = ((_a = this.communeManager.room) === null || _a === void 0 ? void 0 : _a.storage.store[RESOURCE_ENERGY]) >
                    ((_b = this.communeManager.room) === null || _b === void 0 ? void 0 : _b.terminal.store[RESOURCE_ENERGY])
                    ? this.communeManager.room.storage
                    : this.communeManager.room.terminal;
                creep.createReservation('withdraw', source.id, creep.store.getCapacity(), RESOURCE_ENERGY);
                creep.createReservation('transfer', lab.id, creep.store.getCapacity(), RESOURCE_ENERGY);
            }
            else {
                let source = ((_c = this.communeManager.room) === null || _c === void 0 ? void 0 : _c.storage.store[compound]) >
                    ((_d = this.communeManager.room) === null || _d === void 0 ? void 0 : _d.terminal.store[compound])
                    ? this.communeManager.room.storage
                    : this.communeManager.room.terminal;
                if (source.store[compound] == 0) {
                    source = this.outputLabs.find(lab => lab.mineralType == compound && lab.mineralAmount > 100);
                }
                if (source) {
                    let amount = Math.min(creep.store.getFreeCapacity(), source.store[compound], lab.store.getFreeCapacity(compound));
                    amount = Math.max(amount, 0);
                    if (lab.store.getFreeCapacity(compound) >= creep.store.getCapacity()) {
                        creep.createReservation('withdraw', source.id, amount, compound);
                        creep.createReservation('transfer', lab.id, amount, compound);
                    }
                }
            }
        }
        else {
            let amount = Math.min(creep.store.getFreeCapacity(), lab.store[lab.mineralType]);
            creep.createReservation('withdraw', lab.id, amount, lab.mineralType);
            creep.createReservation('transfer', (_e = this.communeManager.room.storage) === null || _e === void 0 ? void 0 : _e.id, amount + creep.store[lab.mineralType], lab.mineralType);
        }
        if (((_f = creep.memory.Rs) === null || _f === void 0 ? void 0 : _f.length) > 0)
            return true;
        return false;
    }
    resourceAmount(resource) {
        if (!resource)
            return 0;
        let amount = this.communeManager.room.resourcesInStoringStructures[resource];
        for (const lab of this.communeManager.structures.lab) {
            if (lab.mineralType !== resource)
                continue;
            amount += lab.mineralAmount;
        }
        for (const name of this.communeManager.room.myCreeps.hauler) {
            amount += Game.creeps[name].store[resource];
        }
        return amount;
    }
    requestBoost(compound) {
        if (!this.requestedBoosts.includes(compound))
            this.requestedBoosts.push(compound);
    }
    generateHaulingReservation(creep) {
        if (this.labsByBoost) {
            for (const compound in this.labsByBoost) {
                const labId = this.labsByBoost[compound];
                const lab = this.communeManager.structures.lab.find(lab => lab.id == labId);
                if (this.setupBoosterLab(creep, lab, compound))
                    return;
            }
        }
        if (this.communeManager.inputLabs.length < 2)
            return;
        if (this.inputLab2.store[this.inputLab2Rsc] > this.inputLab1.store[this.inputLab1Rsc]) {
            if (this.isReverse) {
                if (this.setupInputLab(creep, this.inputLab2, this.inputLab2Rsc))
                    return;
                if (this.setupInputLab(creep, this.inputLab1, this.inputLab1Rsc))
                    return;
            }
            else {
                if (this.setupInputLab(creep, this.inputLab1, this.inputLab1Rsc))
                    return;
                if (this.setupInputLab(creep, this.inputLab2, this.inputLab2Rsc))
                    return;
            }
        }
        else {
            if (this.isReverse) {
                if (this.setupInputLab(creep, this.inputLab1, this.inputLab1Rsc))
                    return;
                if (this.setupInputLab(creep, this.inputLab2, this.inputLab2Rsc))
                    return;
            }
            else {
                if (this.setupInputLab(creep, this.inputLab2, this.inputLab2Rsc))
                    return;
                if (this.setupInputLab(creep, this.inputLab1, this.inputLab1Rsc))
                    return;
            }
        }
        for (const output of this.outputLabs)
            if (this.setupOutputLab(creep, output))
                return;
    }
}

class TowerManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    run() {
        const { room } = this.communeManager;
        if (Memory.CPULogging)
            var managerCPUStart = Game.cpu.getUsed();
        const towers = this.communeManager.structures.tower.filter(tower => tower.RCLActionable);
        if (!towers.length) {
            this.communeManager.room.towerInferiority = this.communeManager.room.enemyAttackers.length > 0;
            return;
        }
        this.actionableTowerIDs = [];
        for (const tower of towers) {
            if (tower.nextStore.energy < TOWER_ENERGY_COST)
                continue;
            this.actionableTowerIDs.push(tower.id);
        }
        this.createRoomLogisticsRequests();
        if (!this.attackEnemyCreeps())
            return;
        if (!this.healCreeps())
            return;
        if (!this.repairRamparts())
            return;
        if (!this.repairGeneral())
            return;
        if (Memory.CPULogging) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('Tower Manager', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'tmcu';
            globalStatsUpdater(room.name, statName, cpuUsed);
        }
    }
    findAttackTarget() {
        const { room } = this.communeManager;
        if (room.towerAttackTarget)
            return room.towerAttackTarget;
        const attackTargets = room.enemyCreeps.filter(function (creep) {
            return !creep.isOnExit;
        });
        if (!attackTargets.length)
            return false;
        let highestDamage = 0;
        for (const enemyCreep of room.enemyCreeps) {
            if (enemyCreep.isOnExit)
                continue;
            const netTowerDamage = enemyCreep.netTowerDamage;
            if (netTowerDamage < highestDamage)
                continue;
            room.towerAttackTarget = enemyCreep;
            highestDamage = netTowerDamage;
        }
        if (!room.towerAttackTarget) {
            this.createPowerTasks();
            room.towerInferiority = true;
            return false;
        }
        if (attackTargets.length >= 15) {
            this.createPowerTasks();
            room.towerInferiority = true;
        }
        return room.towerAttackTarget;
    }
    attackEnemyCreeps() {
        if (this.communeManager.room.flags.disableTowerAttacks) {
            this.communeManager.room.towerInferiority = this.communeManager.room.enemyAttackers.length > 0;
            return true;
        }
        if (!this.actionableTowerIDs.length)
            return false;
        const attackTarget = this.findAttackTarget();
        if (!attackTarget)
            return true;
        for (let i = this.actionableTowerIDs.length - 1; i >= 0; i--) {
            const tower = findObjectWithID(this.actionableTowerIDs[i]);
            if (tower.attack(attackTarget) !== OK)
                continue;
            this.actionableTowerIDs.splice(i, 1);
        }
        return true;
    }
    findHealTarget() {
        const { room } = this.communeManager;
        if (room.enemyAttackers.length) {
            return room.myDamagedCreeps.find(creep => {
                return !creep.isOnExit && !room.enemyThreatCoords.has(packCoord(creep.pos));
            });
        }
        let healTargets = [];
        healTargets = room.myDamagedCreeps.concat(room.allyDamagedCreeps);
        healTargets = healTargets.concat(room.myDamagedPowerCreeps);
        return healTargets.find(creep => !creep.isOnExit);
    }
    healCreeps() {
        if (!this.actionableTowerIDs.length)
            return false;
        const healTarget = this.findHealTarget();
        if (!healTarget)
            return true;
        for (let i = this.actionableTowerIDs.length - 1; i >= 0; i--) {
            const tower = findObjectWithID(this.actionableTowerIDs[i]);
            if (tower.heal(healTarget) !== OK)
                continue;
            this.actionableTowerIDs.splice(i, 1);
        }
        return true;
    }
    findRampartRepairTargets() {
        return this.communeManager.structures.rampart.filter(function (rampart) {
            return rampart.hits <= RAMPART_DECAY_AMOUNT;
        });
    }
    repairRamparts() {
        if (!this.actionableTowerIDs.length)
            return false;
        const repairTargets = this.findRampartRepairTargets();
        if (!repairTargets.length)
            return true;
        for (let i = this.actionableTowerIDs.length - 1; i >= 0; i--) {
            const tower = findObjectWithID(this.actionableTowerIDs[i]);
            const target = repairTargets[repairTargets.length - 1];
            if (tower.repair(target) !== OK)
                continue;
            globalStatsUpdater(this.communeManager.room.name, 'eorwr', TOWER_ENERGY_COST);
            repairTargets.pop();
            this.actionableTowerIDs.splice(i, 1);
        }
        return true;
    }
    findGeneralRepairTargets() {
        let structures = this.communeManager.structures.spawn;
        structures = structures.concat(this.communeManager.structures.tower);
        return structures;
    }
    repairGeneral() {
        if (!this.actionableTowerIDs.length)
            return false;
        if (!randomTick(100))
            return true;
        const structures = this.findGeneralRepairTargets();
        if (!structures.length)
            return true;
        for (let i = this.actionableTowerIDs.length - 1; i >= 0; i--) {
            const tower = findObjectWithID(this.actionableTowerIDs[i]);
            const target = structures[structures.length - 1];
            if (tower.repair(target) !== OK)
                continue;
            structures.pop();
            this.actionableTowerIDs.splice(i, 1);
        }
        return true;
    }
    createPowerTasks() {
        if (!this.communeManager.room.myPowerCreepsAmount)
            return;
        for (const tower of this.communeManager.structures.tower) {
            this.communeManager.room.createPowerTask(tower, PWR_OPERATE_TOWER, 1);
        }
    }
    createRoomLogisticsRequests() {
        for (const structure of this.communeManager.room.structures.tower) {
            this.communeManager.room.createRoomLogisticsRequest({
                target: structure,
                threshold: structure.store.getCapacity(RESOURCE_ENERGY) * 0.75,
                type: 'transfer',
                priority: 3 + scalePriority(structure.store.getCapacity(RESOURCE_ENERGY), structure.reserveStore.energy),
            });
        }
    }
}

class LinkManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    run() {
        if (!this.communeManager.room.storage && !this.communeManager.room.terminal) {
            const controllerLink = this.communeManager.room.controllerLink;
            if (controllerLink)
                this.createControllerLinkRoomLogisticsRequest(controllerLink);
            return;
        }
        this.sourcesToReceivers();
        this.hubToFastFiller();
        this.hubToController();
    }
    sourcesToReceivers() {
        const sourceLinks = this.communeManager.room.sourceLinks;
        if (!sourceLinks.length)
            return;
        const receiverLinks = [this.communeManager.room.fastFillerLink, this.communeManager.room.hubLink, this.communeManager.room.controllerLink].filter(link => {
            return link !== undefined;
        });
        if (!receiverLinks.length)
            return;
        for (const sourceLink of sourceLinks) {
            if (sourceLink.store.getCapacity(RESOURCE_ENERGY) * linkSendThreshold > sourceLink.store.energy)
                continue;
            for (const receiverLink of receiverLinks) {
                if (receiverLink.store.energy > receiverLink.store.getCapacity(RESOURCE_ENERGY) * linkReceiveTreshold)
                    continue;
                sourceLink.transferEnergy(receiverLink);
                receiverLink.store.energy += sourceLink.store.energy;
                sourceLink.store.energy -= receiverLink.store.getCapacity(RESOURCE_ENERGY) - receiverLink.store.energy;
                break;
            }
        }
    }
    hubToFastFiller() {
        const hubLink = this.communeManager.room.hubLink;
        if (!hubLink)
            return;
        const fastFillerLink = this.communeManager.room.fastFillerLink;
        if (!fastFillerLink)
            return;
        if (hubLink.store.getCapacity(RESOURCE_ENERGY) * linkSendThreshold > hubLink.store.energy)
            return;
        if (fastFillerLink.store.energy > fastFillerLink.store.getCapacity(RESOURCE_ENERGY) * linkReceiveTreshold)
            return;
        hubLink.transferEnergy(fastFillerLink);
        fastFillerLink.store.energy += hubLink.store.energy;
        hubLink.store.energy -= fastFillerLink.store.getFreeCapacity(RESOURCE_ENERGY);
    }
    hubToController() {
        const controllerLink = this.communeManager.room.controllerLink;
        if (!controllerLink)
            return;
        const hubLink = this.communeManager.room.hubLink;
        if (!hubLink) {
            this.createControllerLinkRoomLogisticsRequest();
            return;
        }
        if (this.communeManager.room.controller.ticksToDowngrade > 10000 &&
            this.communeManager.room.resourcesInStoringStructures.energy < this.communeManager.storedEnergyUpgradeThreshold * 0.5)
            return;
        if (hubLink.store.getCapacity(RESOURCE_ENERGY) * linkSendThreshold > hubLink.store.energy)
            return;
        if (controllerLink.store.energy > controllerLink.store.getCapacity(RESOURCE_ENERGY) * linkReceiveTreshold)
            return;
        hubLink.transferEnergy(controllerLink);
        controllerLink.store.energy += hubLink.store.energy;
        hubLink.store.energy -= controllerLink.store.getFreeCapacity(RESOURCE_ENERGY);
    }
    createControllerLinkRoomLogisticsRequest(controllerLink = this.communeManager.room.controllerLink) {
        if (controllerLink.reserveStore.energy > controllerLink.store.getCapacity(RESOURCE_ENERGY) * 0.75)
            return;
        this.communeManager.room.createRoomLogisticsRequest({
            target: controllerLink,
            type: 'transfer',
            priority: 100,
        });
    }
}

class RemotesManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    preTickRun() {
        const { room } = this.communeManager;
        for (let index = room.memory.remotes.length - 1; index >= 0; index -= 1) {
            const remoteName = room.memory.remotes[index];
            const remoteMemory = Memory.rooms[remoteName];
            if (remoteMemory.T !== 'remote' || remoteMemory.CN !== room.name) {
                this.communeManager.removeRemote(remoteName, index);
                continue;
            }
            if (Game.map.getRoomStatus(remoteName).status !== Game.map.getRoomStatus(room.name).status) {
                this.communeManager.removeRemote(remoteName, index);
                continue;
            }
            if (remoteMemory.data[RemoteData.abandon] > 0) {
                this.manageAbandonment(remoteName);
                continue;
            }
            this.managePathCacheAllowance(remoteName);
            if (randomTick(100)) {
                const safeDistance = advancedFindDistance(room.name, remoteName, {
                    typeWeights: remoteTypeWeights,
                    avoidAbandonedRemotes: true,
                });
                if (safeDistance > maxRemoteRoomDistance) {
                    remoteMemory.data[RemoteData.abandon] = randomRange(1000, 1500);
                    this.manageAbandonment(remoteName);
                    continue;
                }
                const distance = advancedFindDistance(room.name, remoteName, {
                    typeWeights: remoteTypeWeights,
                });
                if (Math.round(safeDistance * 0.75) > distance) {
                    remoteMemory.data[RemoteData.abandon] = randomRange(1000, 1500);
                    this.manageAbandonment(remoteName);
                    continue;
                }
            }
            remoteMemory.data[RemoteData.remoteSourceHarvester0] = 3;
            remoteMemory.data[RemoteData.remoteSourceHarvester1] = remoteMemory.SIDs[1] ? 3 : 0;
            remoteMemory.data[RemoteData.remoteHauler0] = 0;
            remoteMemory.data[RemoteData.remoteHauler1] = 0;
            remoteMemory.data[RemoteData.remoteReserver] = 1;
            const remote = Game.rooms[remoteName];
            const possibleReservation = room.energyCapacityAvailable >= 650;
            const isReserved = remote && remote.controller.reservation && remote.controller.reservation.username === Memory.me;
            if (possibleReservation) {
                remoteMemory.data[RemoteData.remoteSourceHarvester0] *= 2;
                remoteMemory.data[RemoteData.remoteSourceHarvester1] *= 2;
                if (isReserved && remote.controller.reservation.ticksToEnd >= Math.min(remoteMemory.RE * 5, 2500))
                    remoteMemory.data[RemoteData.remoteReserver] = 0;
            }
            if (remote) {
                remoteMemory.data[RemoteData.minDamage] = 0;
                remoteMemory.data[RemoteData.minHeal] = 0;
                for (const enemyCreep of remote.enemyCreeps) {
                    remoteMemory.data[RemoteData.minDamage] +=
                        enemyCreep.combatStrength.heal + enemyCreep.combatStrength.heal * enemyCreep.defenceStrength ||
                            Math.max(Math.floor(enemyCreep.hits / 10), 1);
                    remoteMemory.data[RemoteData.minHeal] += enemyCreep.combatStrength.ranged;
                }
                if (remote.controller.reservation && remote.controller.reservation.username !== Memory.me)
                    remoteMemory.data[RemoteData.enemyReserved] = 1;
                else
                    remoteMemory.data[RemoteData.enemyReserved] = 0;
                remoteMemory.data[RemoteData.remoteCoreAttacker] = remote.structures.invaderCore.length;
                remoteMemory.data[RemoteData.invaderCore] = remote.structures.invaderCore.length;
                remoteMemory.data[RemoteData.remoteDismantler] = Math.min(remote.dismantleTargets.length, 1);
            }
            if (remoteMemory.data[RemoteData.enemyReserved] || remoteMemory.data[RemoteData.invaderCore]) {
                remoteMemory.data[RemoteData.remoteSourceHarvester0] = 0;
                remoteMemory.data[RemoteData.remoteSourceHarvester1] = 0;
                remoteMemory.data[RemoteData.remoteHauler0] = 0;
                remoteMemory.data[RemoteData.remoteHauler1] = 0;
            }
        }
    }
    run() {
        for (const remoteName of this.communeManager.room.memory.remotes) {
            const remoteMemory = Memory.rooms[remoteName];
            if (remoteMemory.data[RemoteData.abandon])
                continue;
            const remote = Game.rooms[remoteName];
            const isReserved = remote && remote.controller.reservation && remote.controller.reservation.username === Memory.me;
            for (let sourceIndex = 0; sourceIndex < remoteMemory.SP.length; sourceIndex += 1) {
                const income = Math.max((isReserved ? 10 : 5) -
                    Math.floor(Math.max(remoteMemory.data[RemoteData[remoteHarvesterRoles[sourceIndex]]], 0) *
                        minHarvestWorkRatio), 0);
                remoteMemory.data[RemoteData[`remoteHauler${sourceIndex}`]] += findCarryPartsRequired(remoteMemory.SPs[sourceIndex].length / 2, income);
            }
        }
    }
    managePathCacheAllowance(remoteName) {
        if (!randomTick(20))
            return;
        const remoteMemory = Memory.rooms[remoteName];
        for (let index in remoteMemory.SIDs) {
            const pathRoomNames = new Set();
            for (const pos of unpackPosList(remoteMemory.SPs[index])) {
                const roomName = pos.roomName;
                if (pathRoomNames.has(roomName))
                    continue;
                pathRoomNames.add(roomName);
                if (remoteTypeWeights[remoteMemory.T] !== Infinity && !remoteMemory.data[RemoteData.abandon])
                    continue;
                remoteMemory.data[RemoteData.disableCachedPaths] = 1;
                return;
            }
        }
        remoteMemory.data[RemoteData.disableCachedPaths] = 0;
    }
    manageAbandonment(remoteName) {
        const remoteMemory = Memory.rooms[remoteName];
        remoteMemory.data[RemoteData.abandon] -= 1;
        const abandonment = remoteMemory.data[RemoteData.abandon];
        for (const key in remoteMemory.data) {
            remoteMemory.data[key] = 0;
        }
        remoteMemory.data[RemoteData.abandon] = abandonment;
    }
}

class PowerSpawningStructuresManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    run() {
        this.powerSpawn = this.communeManager.room.powerSpawn;
        if (!this.powerSpawn)
            return;
        this.advancedProcessPower();
        this.advancedSpawn();
    }
    advancedProcessPower() {
        if (this.powerSpawn.store.getCapacity(RESOURCE_ENERGY) < POWER_SPAWN_ENERGY_RATIO)
            return;
        if (!this.powerSpawn.store.getCapacity(RESOURCE_POWER))
            return;
        const result = this.powerSpawn.processPower();
        if (result === OK)
            globalStatsUpdater(this.powerSpawn.room.name, 'eop', POWER_SPAWN_ENERGY_RATIO);
    }
    advancedSpawn() {
        for (let i = internationalManager.unspawnedPowerCreepNames.length - 1; i >= 0; i--) {
            const creep = Game.powerCreeps[internationalManager.unspawnedPowerCreepNames[i]];
            creep.spawn(this.powerSpawn);
            internationalManager.unspawnedPowerCreepNames.pop();
            return;
        }
    }
}

class HaulerSizeManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    preTickRun() {
        const roomMemory = Memory.rooms[this.communeManager.room.name];
        roomMemory.HU -= 1;
        if (roomMemory.HU > 0)
            return;
        roomMemory.HU = haulerUpdateDefault;
        const avgCPUUsagePercent = (Memory.stats.cpu.usage || 20) / Game.cpu.limit;
        roomMemory.MHC =
            (Math.floor(Math.max(Math.pow(avgCPUUsagePercent, 1.3) - 0.4, 0) *
                Math.min(this.communeManager.room.energyCapacityAvailable / BODYPART_COST.move, MAX_CREEP_SIZE)) +
                this.communeManager.room.structures.spawn.length * 2) *
                BODYPART_COST[CARRY];
    }
}

class SourceManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    preTickRun() {
        this.sources = this.communeManager.room.sources;
        this.estimateIncome();
    }
    run() {
        this.createPowerTasks();
    }
    estimateIncome() {
        const { room } = this.communeManager;
        room.estimatedSourceIncome = [];
        for (let i = 0; i < this.sources.length; i += 1) {
            const source = this.sources[i];
            let effect = source.effectsData.get(PWR_DISRUPT_SOURCE);
            if (effect)
                continue;
            let income = SOURCE_ENERGY_CAPACITY / ENERGY_REGEN_TIME;
            effect = source.effectsData.get(PWR_REGEN_SOURCE);
            if (effect)
                income += POWER_INFO[PWR_REGEN_SOURCE].effect[effect.level - 1] / POWER_INFO[PWR_REGEN_SOURCE].period;
            room.estimatedSourceIncome[i] = income;
        }
    }
    createPowerTasks() {
        if (!this.communeManager.room.myPowerCreepsAmount)
            return;
        for (const source of this.sources) {
            this.communeManager.room.createPowerTask(source, PWR_REGEN_SOURCE, 10);
        }
    }
}

class HaulRequestManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    preTickRun() {
        this.communeManager;
        return;
    }
    preTickTransferRequest(requestName, index) { }
    run() {
        this.communeManager;
        return;
    }
    transferRequest(requestName, index) {
        const { room } = this.communeManager;
        const request = Memory.haulRequests[requestName];
        const requestRoom = Game.rooms[requestName];
        if (!requestRoom)
            return;
        if (requestRoom.controller && requestRoom.controller.safeMode) {
            request.data[HaulRequestData.abandon] = requestRoom.controller.safeMode;
            room.memory.combatRequests.splice(index, 1);
            delete request.responder;
        }
        if (!requestRoom.enemyCreeps.length && (!requestRoom.controller || !requestRoom.controller.owner)) {
            delete Memory.combatRequests[requestName];
            room.memory.combatRequests.splice(index, 1);
            delete request.responder;
            return;
        }
    }
    withdrawRequest(requestName, index) {
        this.communeManager;
        Memory.haulRequests[requestName];
        const requestRoom = Game.rooms[requestName];
        if (!requestRoom)
            return;
        return;
    }
}

class HaulerNeedManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    run() {
        const { room } = this.communeManager;
        room.haulerNeed += 2;
        for (let index in room.sources) {
            const sourceLink = room.sourceLinks[index];
            if (sourceLink && sourceLink.RCLActionable)
                continue;
            room.haulerNeed +=
                findCarryPartsRequired(room.sourcePaths[index].length + 3, room.estimatedSourceIncome[index]);
        }
        if (!room.controllerLink || !room.controller.RCLActionable)
            room.haulerNeed += findCarryPartsRequired(room.upgradePathLength, room.upgradeStrength);
        room.haulerNeed += findCarryPartsRequired(room.mineralPath.length, room.mineralHarvestStrength);
        room.haulerNeed += room.structures.lab.length / 1.2;
        room.haulerNeed += room.structures.extension.length / 10;
        room.haulerNeed += Memory.stats.rooms[room.name].eosp / 50;
        room.haulerNeed = Math.floor(room.haulerNeed);
    }
}

class StoringStructuresManager {
    constructor(communeManager) {
        this.communeManager = communeManager;
    }
    run() {
        this.createRoomLogisticsRequests();
    }
    createRoomLogisticsRequests() {
        const storingStructures = [];
        const storage = this.communeManager.room.storage;
        if (storage)
            storingStructures.push(storage);
        const terminal = this.communeManager.room.terminal;
        if (terminal && !terminal.effectsData.get(PWR_DISRUPT_TERMINAL))
            storingStructures.push(terminal);
        for (const structure of storingStructures) {
            this.communeManager.room.createRoomLogisticsRequest({
                target: structure,
                onlyFull: true,
                type: 'offer',
                priority: 0,
            });
            if (structure.usedReserveStore > structure.store.getCapacity() * 0.9)
                continue;
            this.communeManager.room.createRoomLogisticsRequest({
                target: structure,
                type: 'transfer',
                priority: 100,
            });
        }
    }
}

class CommuneManager {
    constructor() {
        this.combatManager = new CombatManager(this);
        this.towerManager = new TowerManager(this);
        this.storingStructuresManager = new StoringStructuresManager(this);
        this.linkManager = new LinkManager(this);
        this.labManager = new LabManager(this);
        this.powerSpawningStructuresManager = new PowerSpawningStructuresManager(this);
        this.spawningStructuresManager = new SpawningStructuresManager(this);
        this.sourceManager = new SourceManager(this);
        this.terminalManager = new TerminalManager(this);
        this.remotesManager = new RemotesManager(this);
        this.haulerSizeManager = new HaulerSizeManager(this);
        this.claimRequestManager = new ClaimRequestManager(this);
        this.combatRequestManager = new CombatRequestManager(this);
        this.allyCreepRequestManager = new AllyCreepRequestManager(this);
        this.haulRequestManager = new HaulRequestManager(this);
        this.haulerNeedManager = new HaulerNeedManager(this);
    }
    update(room) {
        this.room = room;
        this.structures = room.structures;
    }
    preTickRun() {
        const { room } = this;
        const roomMemory = Memory.rooms[room.name];
        room.memory.T = 'commune';
        if (!roomMemory.GRCL || room.controller.level > roomMemory.GRCL)
            roomMemory.GRCL = room.controller.level;
        if (!room.memory.combatRequests)
            room.memory.combatRequests = [];
        if (!room.memory.haulRequests)
            room.memory.haulRequests = [];
        room.spawnRequests = [];
        room.upgradeStrength = 0;
        room.mineralHarvestStrength = 0;
        room.roomLogisticsRequests = {
            transfer: {},
            withdraw: {},
            offer: {},
            pickup: {},
        };
        room.haulerNeed = 0;
        this.nextSpawnEnergyAvailable = room.energyAvailable;
        if (!room.memory.remotes)
            room.memory.remotes = [];
        if (!room.memory.MHC) {
            room.memory.MHC = 0;
            room.memory.HU = 0;
        }
        if (roomMemory.AT == undefined)
            roomMemory.AT = 0;
        room.usedRampartIDs = new Set();
        this.terminalManager.preTickRun();
        this.haulerSizeManager.preTickRun();
        this.remotesManager.preTickRun();
        this.haulRequestManager.preTickRun();
        this.sourceManager.preTickRun();
        this.claimRequestManager.preTickRun();
        global.communes.add(room.name);
        room.creepsOfRemote = {};
        for (let index = room.memory.remotes.length - 1; index >= 0; index -= 1) {
            const remoteName = room.memory.remotes[index];
            room.creepsOfRemote[remoteName] = {};
            for (const role of remoteRoles)
                room.creepsOfRemote[remoteName][role] = [];
        }
        room.creepsFromRoom = {};
        for (const role of creepRoles)
            room.creepsFromRoom[role] = [];
        room.creepsFromRoomAmount = 0;
        if (!room.memory.stampAnchors) {
            room.memory.stampAnchors = {};
            for (const type in stamps)
                room.memory.stampAnchors[type] = [];
        }
        room.scoutTargets = new Set();
        if (!room.memory.deposits)
            room.memory.deposits = {};
        room.attackingDefenderIDs = new Set();
        room.defenderEnemyTargetsWithDamage = new Map();
        room.defenderEnemyTargetsWithDefender = new Map();
    }
    run() {
        constructionManager(this.room);
        this.combatManager.run();
        this.towerManager.run();
        this.combatManager.manageThreat();
        this.combatManager.manageDefenceRequests();
        this.terminalManager.run();
        this.claimRequestManager.run();
        this.combatRequestManager.run();
        this.allyCreepRequestManager.run();
        this.haulRequestManager.run();
        this.sourceManager.run();
        this.remotesManager.run();
        this.haulerNeedManager.run();
        this.spawningStructuresManager.createRoomLogisticsRequests();
        this.storingStructuresManager.run();
        this.room.factoryManager();
        this.room.roomManager.containerManager.runCommune();
        this.room.roomManager.droppedResourceManager.runCommune();
        this.linkManager.run();
        this.labManager.run();
        this.powerSpawningStructuresManager.run();
        this.spawningStructuresManager.organizeSpawns();
        this.spawningStructuresManager.createPowerTasks();
        this.room.roomManager.creepRoleManager.run();
        this.room.roomManager.powerCreepRoleManager.run();
        this.spawningStructuresManager.run();
        this.room.roomManager.endTickCreepManager.run();
        this.room.roomManager.roomVisualsManager.run();
        this.test();
    }
    test() {
        return;
    }
    deleteCombatRequest(requestName, index) {
        delete Memory.combatRequests[requestName];
        this.room.memory.combatRequests.splice(index, 1);
    }
    removeRemote(remoteName, index) {
        this.room.memory.remotes.splice(index, 1);
        const remoteMemory = Memory.rooms[remoteName];
        delete remoteMemory.CN;
        remoteMemory.T = 'neutral';
        cleanRoomMemory(remoteName);
    }
    findMinRangedAttackCost(minDamage = 10) {
        const rawCost = (minDamage / RANGED_ATTACK_POWER) * BODYPART_COST[RANGED_ATTACK] +
            (minDamage / RANGED_ATTACK_POWER) * BODYPART_COST[MOVE];
        const combinedCost = BODYPART_COST[RANGED_ATTACK] + BODYPART_COST[MOVE];
        return Math.ceil(rawCost / combinedCost) * combinedCost;
    }
    findMinMeleeAttackCost(minDamage = 30) {
        const rawCost = (minDamage / ATTACK_POWER) * BODYPART_COST[ATTACK] + (minDamage / ATTACK_POWER) * BODYPART_COST[MOVE];
        const combinedCost = BODYPART_COST[ATTACK] + BODYPART_COST[MOVE];
        return Math.ceil(rawCost / combinedCost) * combinedCost;
    }
    findMinHealCost(minHeal = 12) {
        const rawCost = (minHeal / HEAL_POWER) * BODYPART_COST[HEAL] + (minHeal / HEAL_POWER) * BODYPART_COST[MOVE];
        const combinedCost = BODYPART_COST[HEAL] + BODYPART_COST[MOVE];
        return Math.ceil(rawCost / combinedCost) * combinedCost;
    }
    findMinDismantleCost(minDismantle = 0) {
        const rawCost = minDismantle * BODYPART_COST[WORK] + minDismantle * BODYPART_COST[MOVE];
        const combinedCost = BODYPART_COST[WORK] + BODYPART_COST[MOVE];
        return Math.ceil(rawCost / combinedCost) * combinedCost;
    }
    get inputLabs() {
        this._inputLabs = [];
        const labs = this.room.structures.lab;
        if (labs.length < 3)
            return this._inputLabs;
        const storingStructure = this.room.terminal || this.room.storage;
        if (!storingStructure)
            return this._inputLabs;
        if (this.inputLabIDs && this.inputLabIDs.length >= 2) {
            if (this.unpackLabIDsByType())
                return this._inputLabs;
            this._inputLabs = [];
        }
        this.inputLabIDs = [];
        labs.sort((a, b) => {
            return getRangeOfCoords(a.pos, storingStructure.pos) - getRangeOfCoords(b.pos, storingStructure.pos);
        });
        for (const lab of labs) {
            if (this._inputLabs.length >= 2)
                break;
            if (labs.filter(otherLab => getRangeOfCoords(lab.pos, otherLab.pos) <= 2).length < labs.length)
                continue;
            this._inputLabs.push(lab);
            this.inputLabIDs.push(lab.id);
        }
        return this._inputLabs;
    }
    unpackLabIDsByType() {
        for (const ID of this.inputLabIDs) {
            const lab = findObjectWithID(ID);
            if (!lab)
                return false;
            this._inputLabs.push(lab);
        }
        return true;
    }
    get minStoredEnergy() {
        if (this._minStoredEnergy !== undefined)
            return this._minStoredEnergy;
        this._minStoredEnergy = Math.floor(Math.pow(this.room.controller.level * 6000, 1.05) + this.room.memory.AT * 20);
        if (this.room.controller.level < 8)
            this._minStoredEnergy -= Math.pow((this.room.controller.progress / this.room.controller.progressTotal) * 20, 3.35);
        return this._minStoredEnergy;
    }
    get storedEnergyUpgradeThreshold() {
        return this.minStoredEnergy * 1.3;
    }
    get storedEnergyBuildThreshold() {
        return this.minStoredEnergy * 1.2;
    }
    get minRampartHits() {
        const level = this.room.controller.level;
        return Math.min(Math.floor(Math.pow((level - 3) * 50, 2.5) + this.room.memory.AT * 5 * Math.pow(level, 2)), RAMPART_HITS_MAX[level]);
    }
    get storingStructures() {
        if (this._storingStructures)
            return this._storingStructures;
        this._storingStructures = [];
        if (this.room.storage)
            this._storingStructures.push(this.room.storage);
        if (this.room.terminal)
            this._storingStructures.push(this.room.terminal);
        return this._storingStructures;
    }
    get maxCombatRequests() {
        if (this._maxCombatRequests !== undefined)
            return this._maxCombatRequests;
        return (this._maxCombatRequests =
            (this.room.resourcesInStoringStructures.energy - this.minStoredEnergy) /
                (5000 + this.room.controller.level * 1000));
    }
    get buildersMakeRequests() {
        return (this._buildersMakeRequests =
            (!this.room.fastFillerContainerLeft &&
                !this.room.fastFillerContainerRight &&
                !this.room.storage &&
                !this.room.terminal));
    }
}

class DroppedResourceManager {
    constructor(roomManager) {
        this.roomManager = roomManager;
    }
    runCommune() {
        for (const resource of this.roomManager.room.droppedResources) {
            if (resource.amount < 50)
                continue;
            this.roomManager.room.createRoomLogisticsRequest({
                target: resource,
                resourceType: resource.resourceType,
                type: 'pickup',
                priority: Math.max(5, 20 - resource.reserveAmount / 200),
            });
        }
    }
    runRemote() {
        for (const resource of this.roomManager.room.droppedResources) {
            if (resource.resourceType !== RESOURCE_ENERGY)
                continue;
            if (resource.amount < 50)
                continue;
            this.roomManager.room.createRoomLogisticsRequest({
                target: resource,
                type: 'pickup',
                priority: Math.max(5, 10 - resource.reserveAmount / 200),
            });
        }
    }
}

class ContainerManager {
    constructor(roomManager) {
        this.roomManager = roomManager;
    }
    runRemote() {
        this.runSourceContainers();
    }
    runCommune() {
        this.runSourceContainers();
        this.runFastFillerContainers();
        this.runControllerContainer();
        this.runMineralContainer();
    }
    runFastFillerContainers() {
        if (!this.roomManager.room.myCreeps.fastFiller.length)
            return;
        const fastFillerContainers = [
            this.roomManager.room.fastFillerContainerLeft,
            this.roomManager.room.fastFillerContainerRight,
        ];
        for (const container of fastFillerContainers) {
            if (!container)
                continue;
            if (container.reserveStore.energy > container.store.getCapacity() * 0.8)
                continue;
            this.roomManager.room.createRoomLogisticsRequest({
                target: container,
                type: 'transfer',
                threshold: container.store.getCapacity(),
                onlyFull: true,
                priority: scalePriority(container.store.getCapacity(), container.reserveStore.energy, 20),
            });
            if (container.reserveStore.energy < container.store.getCapacity() * 0.6) {
                this.roomManager.room.createRoomLogisticsRequest({
                    target: container,
                    maxAmount: container.reserveStore.energy * 0.5,
                    onlyFull: true,
                    type: 'offer',
                    priority: scalePriority(container.store.getCapacity(), container.reserveStore.energy, 20, true),
                });
            }
        }
    }
    runSourceContainers() {
        for (const container of this.roomManager.room.sourceContainers) {
            this.roomManager.room.createRoomLogisticsRequest({
                target: container,
                type: 'withdraw',
                onlyFull: true,
                priority: scalePriority(container.store.getCapacity(), container.reserveStore.energy, 20, true),
            });
        }
    }
    runControllerContainer() {
        const container = this.roomManager.room.controllerContainer;
        if (!container)
            return;
        this.roomManager.room.createRoomLogisticsRequest({
            target: container,
            type: 'transfer',
            threshold: container.store.getCapacity() * 0.75,
            priority: 50 + scalePriority(container.store.getCapacity(), container.reserveStore.energy, 20),
        });
    }
    runMineralContainer() {
        const container = this.roomManager.room.mineralContainer;
        if (!container)
            return;
        const resourceType = this.roomManager.room.mineral.mineralType;
        this.roomManager.room.createRoomLogisticsRequest({
            target: container,
            resourceType,
            type: 'withdraw',
            onlyFull: true,
            priority: 20 + scalePriority(container.store.getCapacity(), container.reserveStore[resourceType], 20, true),
        });
    }
}

Creep.prototype.preTickManager = function () { };
Creep.prototype.endTickManager = function () { };
Creep.prototype.advancedTransfer = function (target, resourceType = RESOURCE_ENERGY, amount) {
    if (this.pos.getRangeTo(target.pos) > 1) {
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: target.pos, range: 1 }],
            avoidEnemyRanges: true,
        });
        return false;
    }
    if (this.movedResource)
        return false;
    const transferResult = this.transfer(target, resourceType, amount);
    this.message += transferResult;
    if (transferResult === OK || transferResult === ERR_NOT_ENOUGH_RESOURCES) {
        this.movedResource = true;
        return true;
    }
    return false;
};
Creep.prototype.advancedWithdraw = function (target, resourceType = RESOURCE_ENERGY, amount) {
    if (this.pos.getRangeTo(target.pos) > 1) {
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: target.pos, range: 1 }],
            avoidEnemyRanges: true,
        });
        return false;
    }
    if (this.movedResource)
        return false;
    const withdrawResult = this.withdraw(target, resourceType, amount);
    this.message += withdrawResult;
    if (withdrawResult === OK || withdrawResult === ERR_FULL) {
        this.movedResource = true;
        return true;
    }
    return false;
};
Creep.prototype.advancedPickup = function (target) {
    if (this.pos.getRangeTo(target.pos) > 1) {
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: target.pos, range: 1 }],
            avoidEnemyRanges: true,
        });
        return false;
    }
    if (this.movedResource)
        return false;
    const pickupResult = this.pickup(target);
    this.message += pickupResult;
    if (pickupResult === OK || pickupResult === ERR_FULL) {
        this.movedResource = true;
        return true;
    }
    return false;
};
Creep.prototype.advancedHarvestSource = function (source) {
    const harvestResult = this.harvest(source);
    if (harvestResult !== OK) {
        this.say(`⛏️${harvestResult} ${source.index}`);
        return false;
    }
    this.worked = true;
    const energyHarvested = Math.min(this.parts.work * HARVEST_POWER, source.energy);
    globalStatsUpdater(this.room.name, 'eih', energyHarvested);
    this.say(`⛏️${energyHarvested}`);
    return true;
};
Creep.prototype.findUpgradePos = function () {
    const { room } = this;
    if (this.memory.PC)
        return unpackCoordAsPos(this.memory.PC, room.name);
    const usedUpgradePositions = room.usedUpgradePositions;
    for (const pos of room.upgradePositions) {
        const packedPos = packPos(pos);
        if (usedUpgradePositions.has(packedPos))
            continue;
        this.memory.PC = packedPos;
        usedUpgradePositions.add(packedPos);
        return pos;
    }
    return false;
};
Creep.prototype.advancedUpgradeController = function () {
    const { room } = this;
    let controllerStructure = room.controllerContainer;
    const controllerLink = room.controllerLink;
    if (!controllerStructure && controllerLink && controllerLink.RCLActionable)
        controllerStructure = controllerLink;
    if (controllerStructure) {
        const upgradePos = this.findUpgradePos();
        if (!upgradePos)
            return false;
        if (getRange(this.pos.x, upgradePos.x, this.pos.y, upgradePos.y) > 0) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [
                    {
                        pos: upgradePos,
                        range: 0,
                    },
                ],
                avoidEnemyRanges: true,
            });
            this.message += '➡️';
        }
        const workPartCount = this.parts.work;
        const controllerRange = getRange(this.pos.x, room.controller.pos.x, this.pos.y, room.controller.pos.y);
        if (controllerRange <= 3 && this.nextStore.energy > 0) {
            if (this.upgradeController(room.controller) === OK) {
                this.nextStore.energy -= workPartCount;
                const controlPoints = workPartCount * UPGRADE_CONTROLLER_POWER;
                globalStatsUpdater(this.room.name, 'eou', controlPoints);
                this.message += `🔋${controlPoints}`;
            }
        }
        const controllerStructureRange = getRange(this.pos.x, controllerStructure.pos.x, this.pos.y, controllerStructure.pos.y);
        if (controllerStructureRange <= 3) {
            if (this.nextStore.energy > 0 &&
                controllerStructure.structureType === STRUCTURE_CONTAINER &&
                controllerStructure.hitsMax - controllerStructure.hits >= workPartCount * REPAIR_POWER) {
                if (this.repair(controllerStructure) === OK) {
                    const energySpentOnRepairs = Math.min(workPartCount, (controllerStructure.hitsMax - controllerStructure.hits) / REPAIR_POWER, this.nextStore.energy);
                    this.nextStore.energy -= energySpentOnRepairs;
                    globalStatsUpdater(this.room.name, 'eoro', energySpentOnRepairs);
                    this.message += `🔧${energySpentOnRepairs * REPAIR_POWER}`;
                }
            }
            if (controllerStructureRange <= 1 && this.nextStore.energy <= 0) {
                if (this.withdraw(controllerStructure, RESOURCE_ENERGY) !== OK)
                    return false;
                this.nextStore.energy += Math.min(this.store.getCapacity(), controllerStructure.nextStore.energy);
                controllerStructure.nextStore.energy -= this.nextStore.energy;
                this.message += `⚡`;
            }
        }
        this.say(this.message);
        return true;
    }
    if (this.needsResources()) {
        this.runRoomLogisticsRequests({
            types: new Set(['withdraw', 'offer', 'pickup']),
            conditions: request => request.resourceType === RESOURCE_ENERGY,
        });
        if (this.needsResources())
            return false;
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: room.controller.pos, range: 3 }],
            avoidEnemyRanges: true,
        });
        return false;
    }
    if (this.pos.getRangeTo(room.controller.pos) > 3) {
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: room.controller.pos, range: 3 }],
            avoidEnemyRanges: true,
        });
        return false;
    }
    if (this.upgradeController(room.controller) === OK) {
        const energySpentOnUpgrades = Math.min(this.nextStore.energy, this.parts.work * UPGRADE_CONTROLLER_POWER);
        globalStatsUpdater(this.room.name, 'eou', energySpentOnUpgrades);
        this.say(`🔋${energySpentOnUpgrades}`);
        return true;
    }
    return false;
};
Creep.prototype.advancedBuild = function () {
    const cSiteTarget = this.room.cSiteTarget;
    if (!cSiteTarget)
        return RESULT_FAIL;
    if (this.builderGetEnergy() === RESULT_STOP)
        return RESULT_SUCCESS;
    this.advancedBuildCSite(cSiteTarget);
    if (this.builderGetEnergy() === RESULT_STOP)
        return RESULT_SUCCESS;
    return RESULT_SUCCESS;
};
Creep.prototype.builderGetEnergy = function () {
    if (this.room.communeManager.buildersMakeRequests)
        return RESULT_SUCCESS;
    if (!this.needsResources())
        return RESULT_NO_ACTION;
    this.runRoomLogisticsRequests({
        types: new Set(['withdraw', 'offer', 'pickup']),
        conditions: request => request.resourceType === RESOURCE_ENERGY,
    });
    if (this.needsResources())
        return RESULT_STOP;
    return RESULT_SUCCESS;
};
Creep.prototype.advancedBuildCSite = function (cSite) {
    if (getRangeOfCoords(this.pos, cSite.pos) > 3) {
        this.message = '➡️CS';
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: cSite.pos, range: 3 }],
            avoidEnemyRanges: true,
        });
        return RESULT_ACTION;
    }
    if (this.worked)
        return RESULT_NO_ACTION;
    if (this.build(cSite) !== OK)
        return RESULT_FAIL;
    const energySpentOnConstruction = Math.min(this.parts.work * BUILD_POWER, (cSite.progressTotal - cSite.progress) * BUILD_POWER, this.nextStore.energy);
    this.nextStore.energy -= energySpentOnConstruction;
    globalStatsUpdater(this.room.name, 'eob', energySpentOnConstruction);
    this.message = `🚧${energySpentOnConstruction}`;
    return RESULT_SUCCESS;
};
Creep.prototype.advancedBuildAllyCSite = function () {
    const { room } = this;
    if (!room.memory.CSTID) {
        room.findAllyCSiteTargetID(this);
    }
    let cSiteTarget = findObjectWithID(room.memory.CSTID);
    if (!cSiteTarget) {
        room.findAllyCSiteTargetID(this);
    }
    cSiteTarget = findObjectWithID(room.memory.CSTID);
    if (!cSiteTarget)
        return false;
    this.say('ABCS');
    if (getRange(this.pos.x, cSiteTarget.pos.x, this.pos.y, cSiteTarget.pos.y) > 3) {
        this.say('➡️CS');
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: cSiteTarget.pos, range: 3 }],
            avoidEnemyRanges: true,
        });
        return true;
    }
    const buildResult = this.build(cSiteTarget);
    if (buildResult === OK) {
        const energySpentOnConstruction = Math.min(this.parts.work * BUILD_POWER, (cSiteTarget.progressTotal - cSiteTarget.progress) * BUILD_POWER, this.nextStore.energy);
        this.nextStore.energy -= energySpentOnConstruction;
        globalStatsUpdater(this.room.name, 'eob', energySpentOnConstruction);
        this.say(`🚧${energySpentOnConstruction}`);
        return true;
    }
    return true;
};
Creep.prototype.findRampartRepairTarget = function () {
    let lowestScore = Infinity;
    let bestTarget;
    let ramparts = this.room.enemyAttackers.length ? this.room.defensiveRamparts : this.room.structures.rampart;
    for (const structure of ramparts) {
        if (structure.hits / structure.hitsMax > 0.9)
            continue;
        const score = getRange(this.pos.x, structure.pos.x, this.pos.y, structure.pos.y) + structure.hits / 1000;
        if (score >= lowestScore)
            continue;
        lowestScore = score;
        bestTarget = structure;
    }
    if (!bestTarget)
        return false;
    this.memory.repairTarget = bestTarget.id;
    return bestTarget;
};
Creep.prototype.findRepairTarget = function () {
    if (this.memory.repairTarget) {
        const repairTarget = findObjectWithID(this.memory.repairTarget);
        if (repairTarget)
            return repairTarget;
    }
    const { room } = this;
    let possibleRepairTargets = room.structures.road;
    possibleRepairTargets = possibleRepairTargets.concat(room.structures.container);
    let lowestScore = Infinity;
    let bestTarget;
    for (const structure of possibleRepairTargets) {
        if (structure.hits / structure.hitsMax > 0.3)
            continue;
        const score = getRange(this.pos.x, structure.pos.x, this.pos.y, structure.pos.y) +
            (structure.hits / structure.hitsMax) * 1000;
        if (score >= lowestScore)
            continue;
        lowestScore = score;
        bestTarget = structure;
    }
    if (!bestTarget)
        return false;
    this.memory.repairTarget = bestTarget.id;
    return bestTarget;
};
Creep.prototype.findOptimalSourceIndex = function () {
    const { room } = this;
    this.say('FOSN');
    if (this.memory.SI !== undefined)
        return true;
    if (!room.anchor)
        return false;
    let creepThreshold = 1;
    while (creepThreshold < 4) {
        for (const source of room.sourcesByEfficacy) {
            const index = source.index;
            if (Math.min(creepThreshold, room.sourcePositions[index].length) - room.creepsOfSourceAmount[index] > 0) {
                this.memory.SI = index;
                return true;
            }
        }
        creepThreshold += 1;
    }
    return false;
};
Creep.prototype.findSourcePos = function (index) {
    const { room } = this;
    this.say('FSHP');
    if (this.memory.PC)
        return unpackCoordAsPos(this.memory.PC, room.name);
    const usedSourceCoords = room.usedSourceCoords[index];
    const openSourcePositions = room.sourcePositions[index].filter(pos => !usedSourceCoords.has(packCoord(pos)));
    if (!openSourcePositions.length)
        return false;
    const packedCoord = packCoord(openSourcePositions[0]);
    this.memory.PC = packedCoord;
    room._usedSourceCoords[index].add(packedCoord);
    return openSourcePositions[0];
};
Creep.prototype.findMineralHarvestPos = function () {
    const { room } = this;
    this.say('FMHP');
    if (this.memory.PC)
        return unpackCoordAsPos(this.memory.PC, room.name);
    const usedMineralCoords = room.usedMineralCoords;
    const openMineralPositions = room.mineralPositions.filter(pos => !usedMineralCoords.has(packCoord(pos)));
    if (!openMineralPositions.length)
        return false;
    const packedCoord = packCoord(openMineralPositions[0]);
    this.memory.PC = packedCoord;
    room._usedMineralCoords.add(packedCoord);
    return openMineralPositions[0];
};
Creep.prototype.needsResources = function () {
    customLog('NEEDS CHECK', this.nextStore.energy +
        ', cap ' +
        this.store.getCapacity() +
        ', used ' +
        this.usedNextStore +
        ', free ' +
        this.freeNextStore, { superPosition: 1 });
    if (this.usedNextStore === 0)
        return (this.memory.NR = true);
    if (this.freeNextStore <= 0) {
        delete this.memory.NR;
        return false;
    }
    return this.memory.NR;
};
Creep.prototype.findRecycleTarget = function () {
    const { room } = this;
    const spawns = room.structures.spawn.filter(spawn => spawn.RCLActionable);
    if (!spawns.length)
        return false;
    if (this.memory.RecT) {
        const spawn = findObjectWithID(this.memory.RecT);
        if (spawn)
            return spawn;
    }
    const fastFillerContainers = [room.fastFillerContainerLeft, room.fastFillerContainerRight];
    for (const container of fastFillerContainers) {
        if (!container)
            continue;
        if (!findClosestObjectInRange(container.pos, spawns, 1))
            continue;
        return findObjectWithID((this.memory.RecT = container.id));
    }
    const spawn = findClosestObject(this.pos, spawns);
    return findObjectWithID((this.memory.RecT = spawn.id));
};
Creep.prototype.advancedRecycle = function () {
    const { room } = this;
    const recycleTarget = this.findRecycleTarget();
    if (!recycleTarget)
        return false;
    const range = getRange(this.pos.x, recycleTarget.pos.x, this.pos.y, recycleTarget.pos.y);
    if (recycleTarget instanceof StructureSpawn) {
        this.say('♻️ S');
        if (range > 1) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: recycleTarget.pos, range: 1 }],
                avoidEnemyRanges: true,
            });
            return true;
        }
        return recycleTarget.recycleCreep(this) === OK;
    }
    this.say('♻️ C');
    if (range === 0) {
        const spawn = findClosestObject(this.pos, room.structures.spawn);
        return spawn.recycleCreep(this) === OK;
    }
    this.createMoveRequest({
        origin: this.pos,
        goals: [{ pos: recycleTarget.pos, range: 0 }],
        avoidEnemyRanges: true,
    });
    return true;
};
Creep.prototype.activeRenew = function () {
    const { room } = this;
    if (Game.cpu.bucket < CPUBucketRenewThreshold)
        return;
    if (!room.myCreeps.fastFiller.length)
        return;
    if (this.dying)
        return;
    const energyCost = Math.ceil(this.findCost() / 2.5 / this.body.length);
    if (CREEP_LIFE_TIME - this.ticksToLive < Math.floor(600 / this.body.length))
        return;
    const spawns = room.structures.spawn;
    if (!spawns.length)
        return;
    const spawn = findClosestObject(this.pos, spawns);
    if (spawn.renewed)
        return;
    if (spawn.spawning)
        return;
    if (getRangeOfCoords(this.pos, spawn.pos) > 1) {
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: spawn.pos, range: 1 }],
            avoidEnemyRanges: true,
        });
        return;
    }
    const result = spawn.renewCreep(this);
    if (result === OK) {
        globalStatsUpdater(this.room.name, 'eosp', energyCost);
        spawn.renewed = true;
    }
};
Creep.prototype.passiveRenew = function () {
    const { room } = this;
    if (Game.cpu.bucket < CPUBucketRenewThreshold)
        return;
    if (!room.myCreeps.fastFiller.length)
        return;
    if (this.dying)
        return;
    const energyCost = Math.ceil(this.findCost() / 2.5 / this.body.length);
    if (CREEP_LIFE_TIME - this.ticksToLive < Math.floor(600 / this.body.length))
        return;
    const spawns = room.structures.spawn;
    const spawn = spawns.find(spawn => getRange(this.pos.x, spawn.pos.x, this.pos.y, spawn.pos.y) === 1 &&
        !spawn.renewed &&
        !spawn.spawning &&
        spawn.RCLActionable);
    if (!spawn)
        return;
    const result = spawn.renewCreep(this);
    if (result === OK) {
        globalStatsUpdater(this.room.name, 'eosp', energyCost);
        spawn.renewed = true;
    }
};
Creep.prototype.advancedReserveController = function () {
    const { room } = this;
    const { controller } = room;
    if (this.pos.getRangeTo(controller.pos) === 1) {
        if (controller.reservation && controller.reservation.username !== Memory.me) {
            this.say('🗡️');
            return this.attackController(controller) === OK;
        }
        this.say('🤳');
        return this.reserveController(controller) === OK;
    }
    this.say('⏩🤳');
    this.createMoveRequest({
        origin: this.pos,
        goals: [{ pos: controller.pos, range: 1 }],
        avoidEnemyRanges: true,
        plainCost: 1,
    });
    return true;
};
Creep.prototype.findCost = function () {
    let cost = 0;
    for (const part of this.body)
        cost += BODYPART_COST[part.type];
    return cost;
};
Creep.prototype.passiveHeal = function () {
    const { room } = this;
    this.say('PH');
    if (!this.worked) {
        if (this.hitsMax > this.hits) {
            this.heal(this);
            this.worked = true;
            return false;
        }
        let top = Math.max(Math.min(this.pos.y - 1, roomDimensions - 1), 0);
        let left = Math.max(Math.min(this.pos.x - 1, roomDimensions - 1), 0);
        let bottom = Math.max(Math.min(this.pos.y + 1, roomDimensions - 1), 0);
        let right = Math.max(Math.min(this.pos.x + 1, roomDimensions - 1), 0);
        const adjacentCreeps = room.lookForAtArea(LOOK_CREEPS, top, left, bottom, right, true);
        for (const posData of adjacentCreeps) {
            if (this.name === posData.creep.name)
                continue;
            if (!posData.creep.my && !Memory.allyPlayers.includes(posData.creep.owner.username))
                continue;
            if (posData.creep.hitsMax === posData.creep.hits)
                continue;
            this.heal(posData.creep);
            this.worked = true;
            return false;
        }
    }
    if (this.ranged)
        return false;
    let top = Math.max(Math.min(this.pos.y - 3, roomDimensions - 2), 2);
    let left = Math.max(Math.min(this.pos.x - 3, roomDimensions - 2), 2);
    let bottom = Math.max(Math.min(this.pos.y + 3, roomDimensions - 2), 2);
    let right = Math.max(Math.min(this.pos.x + 3, roomDimensions - 2), 2);
    const nearbyCreeps = room.lookForAtArea(LOOK_CREEPS, top, left, bottom, right, true);
    for (const posData of nearbyCreeps) {
        if (this.name === posData.creep.name)
            continue;
        if (!posData.creep.my && !Memory.allyPlayers.includes(posData.creep.owner.username))
            continue;
        if (posData.creep.hitsMax === posData.creep.hits)
            continue;
        this.rangedHeal(posData.creep);
        this.ranged = true;
        return true;
    }
    return false;
};
Creep.prototype.aggressiveHeal = function () {
    const { room } = this;
    this.say('AH');
    if (!this.worked) {
        if (this.hitsMax > this.hits) {
            this.heal(this);
            this.worked = true;
            return true;
        }
    }
    const healTargets = room
        .find(FIND_MY_CREEPS)
        .concat(room.allyCreeps)
        .filter(function (creep) {
        return creep.hitsMax > creep.hits;
    });
    if (!healTargets.length)
        return false;
    const healTarget = findClosestObject(this.pos, healTargets);
    const range = getRange(this.pos.x, healTarget.pos.x, this.pos.y, healTarget.pos.y);
    if (range > 1) {
        if (this.ranged)
            return false;
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: healTarget.pos, range: 1 }],
        });
        if (range <= 3) {
            this.rangedHeal(healTarget);
            return true;
        }
    }
    if (this.worked)
        return false;
    this.heal(healTarget);
    return true;
};
Creep.prototype.passiveRangedAttack = function () {
    return true;
};
Creep.prototype.deleteReservation = function (index) {
    this.memory.Rs.splice(index, 1);
    this.message += '❌';
};
Creep.prototype.createReservation = function (type, targetID, amount, resourceType = RESOURCE_ENERGY) {
    if (!this.memory.Rs)
        this.memory.Rs = [];
    if (amount <= 0)
        return;
    this.memory.Rs.push({
        type,
        targetID,
        amount,
        resourceType,
    });
    const reservation = this.memory.Rs[0];
    const target = findObjectWithID(reservation.targetID);
    this.message += '➕' + type[0];
    if (target instanceof Resource) {
        target.reserveAmount -= reservation.amount;
        return;
    }
    if (reservation.type === 'transfer') {
        return;
    }
};
Creep.prototype.reservationManager = function () {
    if (!this.memory.Rs)
        return;
    for (let index = 0; index < this.memory.Rs.length; index++) {
        const reservation = this.memory.Rs[index];
        const target = findObjectWithID(reservation.targetID);
        if (!target || target.room.name !== this.room.name) {
            this.deleteReservation(index);
            continue;
        }
        if (this.room.enemyThreatCoords.has(packCoord(target.pos))) {
            this.deleteReservation(index);
            continue;
        }
        if (target instanceof Resource) {
            let { amount } = reservation;
            target.reserveAmount -= amount;
            if (amount <= 0) {
                target.reserveAmount += amount;
                this.deleteReservation(0);
            }
            continue;
        }
        if (reservation.type === 'transfer') {
            let amount = Math.min(reservation.amount, target.store.getFreeCapacity(reservation.resourceType));
            if (amount <= 0) {
                this.deleteReservation(0);
            }
            reservation.amount = amount;
            continue;
        }
        reservation.amount;
    }
};
Creep.prototype.fulfillReservation = function () {
    if (!this.memory.Rs)
        return true;
    const reservation = this.memory.Rs[0];
    if (!reservation)
        return true;
    const target = findObjectWithID(reservation.targetID);
    if (!target) {
        this.deleteReservation(0);
        return true;
    }
    const { room } = this;
    if (Memory.roomVisuals)
        room.visual.line(this.pos, target.pos, {
            color: customColors.green,
            opacity: 0.2,
        });
    this.message += '📲';
    if (getRange(this.pos.x, target.pos.x, this.pos.y, target.pos.y) > 1) {
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: target.pos, range: 1 }],
            avoidEnemyRanges: true,
        });
        return false;
    }
    if (this.movedResource)
        return false;
    if (target instanceof Resource) {
        const pickupResult = this.pickup(target);
        this.message += pickupResult;
        if (pickupResult === ERR_FULL) {
            this.deleteReservation(0);
            return true;
        }
        if (pickupResult === OK) {
            this.movedResource = true;
            this.freeCapacityNextTick = Math.max(this.store.getFreeCapacity() - target.amount, 0);
            this.deleteReservation(0);
            return true;
        }
        return false;
    }
    let amount = 0;
    if (reservation.type === 'transfer') {
        amount = Math.min(reservation.amount, target.store.getFreeCapacity(reservation.resourceType), this.store[reservation.resourceType]);
        this.message += amount;
        const transferResult = this.transfer(target, reservation.resourceType, amount);
        this.message += transferResult;
        if (transferResult === ERR_FULL || transferResult === ERR_NOT_ENOUGH_RESOURCES) {
            this.deleteReservation(0);
            return true;
        }
        if (transferResult === OK) {
            this.movedResource = true;
            this.freeCapacityNextTick = this.store.getFreeCapacity() + amount;
            this.deleteReservation(0);
            return true;
        }
        return false;
    }
    amount = Math.min(Math.min(amount, this.store.getFreeCapacity(reservation.resourceType)), target.store[reservation.resourceType] + reservation.amount);
    let withdrawResult;
    if (target instanceof Creep) {
        withdrawResult = target.transfer(this, reservation.resourceType, amount);
    }
    else
        withdrawResult = this.withdraw(target, reservation.resourceType, amount);
    this.message += withdrawResult;
    if (withdrawResult === ERR_NOT_ENOUGH_RESOURCES) {
        this.deleteReservation(0);
        return true;
    }
    if (withdrawResult === ERR_INVALID_TARGET) {
        this.deleteReservation(0);
        return true;
    }
    if (withdrawResult === ERR_FULL) {
        this.deleteReservation(0);
        return true;
    }
    if (withdrawResult === OK) {
        this.movedResource = true;
        this.freeCapacityNextTick = this.store.getFreeCapacity() - amount;
        this.deleteReservation(0);
        return true;
    }
    return false;
};
Creep.prototype.reserveWithdrawEnergy = function () {
    var _a;
    if (this.memory.Rs && ((_a = this.memory.Rs) === null || _a === void 0 ? void 0 : _a.length))
        return;
    const { room } = this;
    if (!this.needsResources())
        return;
    if (this.freeCapacityNextTick === undefined)
        this.freeCapacityNextTick = this.store.getFreeCapacity();
    let withdrawTargets = room.MEWT.filter(target => {
        if (target instanceof Resource)
            return (target.reserveAmount >= this.store.getCapacity(RESOURCE_ENERGY) * 0.2 ||
                target.reserveAmount >= this.freeCapacityNextTick);
        return target.store.energy >= this.freeCapacityNextTick;
    });
    if (!room.storage && !room.terminal) {
        withdrawTargets = withdrawTargets.concat([room.fastFillerContainerLeft, room.fastFillerContainerRight, room.controllerContainer].filter(target => {
            return target && target.store.energy >= target.store.getCapacity(RESOURCE_ENERGY) * 0.5;
        }));
    }
    let target;
    let amount;
    if (withdrawTargets.length) {
        target = findClosestObject(this.pos, withdrawTargets);
        if (target instanceof Resource)
            amount = target.reserveAmount;
        else
            amount = Math.min(this.freeCapacityNextTick, target.store.energy);
        this.createReservation('withdraw', target.id, amount, RESOURCE_ENERGY);
        return;
    }
    withdrawTargets = room.OEWT.filter(target => {
        if (target instanceof Resource)
            return (target.reserveAmount >= this.store.getCapacity(RESOURCE_ENERGY) * 0.2 ||
                target.reserveAmount >= this.freeCapacityNextTick);
        return target.store.energy >= this.freeCapacityNextTick;
    });
    if (!withdrawTargets.length)
        return;
    target = findClosestObject(this.pos, withdrawTargets);
    if (target instanceof Resource)
        amount = target.reserveAmount;
    else
        amount = Math.min(this.freeCapacityNextTick, target.store.energy);
    this.createReservation('withdraw', target.id, amount, RESOURCE_ENERGY);
};
Creep.prototype.reserveTransferEnergy = function () {
    var _a;
    if ((_a = this.memory.Rs) === null || _a === void 0 ? void 0 : _a.length)
        return;
    const { room } = this;
    if (this.usedStore() === 0)
        return;
    let transferTargets = room.METT.filter(function (target) {
        return target.freeSpecificStore(RESOURCE_ENERGY) > 0;
    });
    transferTargets = transferTargets.concat(room.MEFTT.filter(target => {
        return ((target.freeStore() >= this.store.energy && this.store.energy > 0) ||
            target.freeSpecificStore(RESOURCE_ENERGY) >= this.store.energy + this.freeStore());
    }));
    let target;
    let amount;
    if (transferTargets.length) {
        target = findClosestObject(this.pos, transferTargets);
        amount = Math.min(Math.max(this.usedStore(), 0), target.freeSpecificStore(RESOURCE_ENERGY));
        this.createReservation('transfer', target.id, amount, RESOURCE_ENERGY);
        return;
    }
    transferTargets = room.OETT.filter(target => {
        return target.freeStore() >= this.usedStore();
    });
    if (!transferTargets.length)
        return;
    target = findClosestObject(this.pos, transferTargets);
    amount = Math.min(Math.max(this.usedStore(), 0), target.freeStore());
    this.createReservation('transfer', target.id, amount, RESOURCE_ENERGY);
};
Creep.prototype.findBulzodeTargets = function (goalPos) {
    return [];
};
Creep.prototype.findQuadBulldozeTargets = function (goalPos) {
    if (this.memory.QBTIDs && this.memory.QBTIDs.length)
        return this.memory.QBTIDs;
    const path = this.room.advancedFindPath({
        origin: this.pos,
        goals: [
            {
                pos: goalPos,
                range: 0,
            },
        ],
        weightCostMatrixes: ['quadBulldozeCostMatrix'],
    });
    path.push(goalPos);
    const targetStructureIDs = new Set();
    const visitedCoords = new Set();
    for (const pos of path) {
        for (let i = quadAttackMemberOffsets.length - 1; i > -1; i--) {
            const offset = quadAttackMemberOffsets[i];
            const coord = {
                x: pos.x + offset.x,
                y: pos.y + offset.y,
            };
            const packedCoord = packCoord(coord);
            if (visitedCoords.has(packedCoord))
                continue;
            visitedCoords.add(packedCoord);
            for (const structure of this.room.lookForAt(LOOK_STRUCTURES, coord.x, coord.y)) {
                if (structure.structureType === STRUCTURE_KEEPER_LAIR)
                    continue;
                if (!impassibleStructureTypes.includes(structure.structureType) &&
                    structure.structureType !== STRUCTURE_RAMPART)
                    continue;
                if (targetStructureIDs.has(structure.id))
                    continue;
                targetStructureIDs.add(structure.id);
            }
        }
    }
    return (this.memory.QBTIDs = Array.from(targetStructureIDs));
};
Creep.prototype.manageSpawning = function (spawn) {
    if (spawn.spawning.remainingTime > 1)
        return;
    const offset = offsetsByDirection[spawn.spawning.directions[0]];
    const coord = {
        x: this.pos.x + offset[0],
        y: this.pos.y + offset[1],
    };
    this.assignMoveRequest(coord);
};
Creep.prototype.roomLogisticsRequestManager = function () {
    if (!this.memory.RLRs) {
        this.memory.RLRs = [];
        return;
    }
    if (!this.memory.RLRs.length)
        return;
    for (let i = this.memory.RLRs.length - 1; i >= 0; i--) {
        const request = this.memory.RLRs[i];
        const target = findObjectWithID(request.TID);
        if (target)
            continue;
        this.memory.RLRs.splice(i, 1);
    }
    const request = this.memory.RLRs[0];
    if (!request)
        return;
    const target = findObjectWithID(request.TID);
    if (target instanceof Resource) {
        request.A = Math.min(Math.min(this.freeNextStore, target.nextAmount), request.A);
        if (request.A <= 0) {
            this.memory.RLRs.splice(0, 1);
            return;
        }
        if (!request.NR)
            target.reserveAmount -= request.A;
        return;
    }
    if (request.T === 'transfer') {
        if (target.freeNextStore < request.A) {
            this.memory.RLRs.splice(0, 1);
            return;
        }
        request.A = Math.min(Math.min(this.nextStore[request.RT], target.freeNextStore), request.A);
        if (request.A <= 0) {
            this.memory.RLRs.splice(0, 1);
            return;
        }
        if (!request.NR)
            target.reserveStore[request.RT] += request.A;
        return;
    }
    if (target.nextStore[request.RT] < request.A) {
        this.memory.RLRs.splice(0, 1);
        return;
    }
    request.A = Math.min(Math.min(this.freeNextStore, target.nextStore[request.RT]), request.A);
    if (request.A <= 0) {
        this.memory.RLRs.splice(0, 1);
        return;
    }
    if (!request.NR)
        target.reserveStore[request.RT] -= request.A;
};
Creep.prototype.findRoomLogisticsRequest = function (args) {
    if (this.memory.RLRs[0])
        return this.memory.RLRs[0];
    const types = this.findRoomLogisticsRequestTypes(args);
    if (!types.size)
        return RESULT_FAIL;
    let lowestScore = Infinity;
    let bestRequest;
    for (const type of types) {
        for (const requestID in this.room.roomLogisticsRequests[type]) {
            const request = this.room.roomLogisticsRequests[type][requestID];
            delete request.delivery;
            if (args) {
                if (args.conditions && !args.conditions(request))
                    continue;
            }
            if (!this.canAcceptRoomLogisticsRequest(request.type, request.ID.toString()))
                continue;
            const targetPos = findObjectWithID(request.targetID).pos;
            const score = request.priority + getRangeOfCoords(targetPos, this.pos) / 100;
            if (score >= lowestScore)
                continue;
            lowestScore = score;
            bestRequest = request;
        }
    }
    customLog('FINDING REQ', bestRequest + ', ' + Array.from(types), { superPosition: 1 });
    let creepRequest;
    if (!bestRequest) {
        creepRequest = this.createBackupStoringStructuresRoomLogisticsRequest(types);
        if (!creepRequest)
            return RESULT_FAIL;
    }
    else {
        creepRequest = {
            T: bestRequest.type,
            TID: bestRequest.targetID,
            RT: bestRequest.resourceType,
            A: this.findRoomLogisticRequestAmount(bestRequest),
            NR: bestRequest.noReserve,
        };
        if (bestRequest.delivery) {
            let nextCreepRequest;
            const storingStructure = findObjectWithID(bestRequest.delivery);
            if (storingStructure) {
                nextCreepRequest = {
                    T: 'withdraw',
                    TID: storingStructure.id,
                    RT: bestRequest.resourceType,
                    A: Math.min(storingStructure.reserveStore[bestRequest.resourceType], creepRequest.A),
                };
            }
            else {
                const nextRequest = this.room.roomLogisticsRequests.withdraw[bestRequest.delivery] ||
                    this.room.roomLogisticsRequests.offer[bestRequest.delivery] ||
                    this.room.roomLogisticsRequests.pickup[bestRequest.delivery];
                nextCreepRequest = {
                    T: nextRequest.type,
                    TID: nextRequest.targetID,
                    RT: nextRequest.resourceType,
                    A: this.freeNextStore,
                    NR: creepRequest.NR,
                };
                if (!creepRequest.NR) {
                    if (nextRequest.amount === nextCreepRequest.A)
                        delete this.room.roomLogisticsRequests[nextRequest.type][nextRequest.ID];
                    else
                        nextRequest.amount -= nextCreepRequest.A;
                    const target = findObjectWithID(nextRequest.targetID);
                    if (target instanceof Resource) {
                        target.reserveAmount -= nextCreepRequest.A;
                    }
                    else {
                        target.reserveStore[nextCreepRequest.RT] -= nextCreepRequest.A;
                    }
                }
            }
            this.memory.RLRs.push(nextCreepRequest);
        }
        if (!creepRequest.NR && bestRequest.amount === creepRequest.A)
            delete this.room.roomLogisticsRequests[bestRequest.type][bestRequest.ID];
        else
            bestRequest.amount -= creepRequest.A;
    }
    this.memory.RLRs.push(creepRequest);
    if (creepRequest.NR)
        return this.memory.RLRs[0];
    const target = findObjectWithID(creepRequest.TID);
    if (target instanceof Resource) {
        target.reserveAmount -= creepRequest.A;
        return this.memory.RLRs[0];
    }
    if (creepRequest.T === 'transfer') {
        target.reserveStore[creepRequest.RT] += creepRequest.A;
        return this.memory.RLRs[0];
    }
    target.reserveStore[creepRequest.RT] -= creepRequest.A;
    return this.memory.RLRs[0];
};
Creep.prototype.findRoomLogisticsRequestTypes = function (args) {
    if (args && args.types) {
        if (this.needsResources()) {
            args.types.delete('transfer');
            return args.types;
        }
        args.types.delete('pickup');
        args.types.delete('offer');
        args.types.delete('withdraw');
        return args.types;
    }
    if (this.needsResources())
        return new Set(['withdraw', 'pickup']);
    return new Set(['transfer']);
};
Creep.prototype.canAcceptRoomLogisticsRequest = function (requestType, requestID) {
    const request = this.room.roomLogisticsRequests[requestType][requestID];
    const target = findObjectWithID(request.targetID);
    if (target instanceof Resource) {
        if (request.onlyFull) {
            if (this.freeNextStore >= target.reserveAmount)
                return true;
            return false;
        }
        return true;
    }
    if (request.type === 'transfer') {
        const amount = Math.min(this.store.getCapacity(), request.amount);
        if (this.nextStore[request.resourceType] <= 0) {
            if (this.freeNextStore <= 0)
                return false;
            const types = ['withdraw', 'pickup'];
            let lowestScore = Infinity;
            let bestRequest2;
            for (const type of types) {
                for (const request2ID in this.room.roomLogisticsRequests[type]) {
                    const request2 = this.room.roomLogisticsRequests[type][request2ID];
                    if (request2.resourceType !== request.resourceType)
                        continue;
                    const target2Pos = findObjectWithID(request2.targetID).pos;
                    const score = request2.priority + getRangeOfCoords(target2Pos, this.pos) / 100;
                    if (score >= lowestScore)
                        continue;
                    lowestScore = score;
                    bestRequest2 = request2;
                }
            }
            if (bestRequest2) {
                request.delivery = bestRequest2.ID;
                return true;
            }
            if (this.room.name === this.commune.name) {
                const storingStructure = this.commune.communeManager.storingStructures.find(structure => structure.store[request.resourceType] >= amount);
                if (storingStructure) {
                    request.delivery = storingStructure.id;
                    return true;
                }
            }
            return false;
        }
        if (request.onlyFull) {
            if (this.nextStore[request.resourceType] >= amount)
                return true;
            return false;
        }
        return true;
    }
    if (request.onlyFull) {
        if (target.reserveStore[request.resourceType] >= this.freeNextStore)
            return true;
        return false;
    }
    return true;
};
Creep.prototype.createBackupStoringStructuresRoomLogisticsRequest = function (types) {
    if (this.room.name !== this.commune.name)
        return RESULT_FAIL;
    if (!types.has('transfer'))
        return RESULT_FAIL;
    const storingStructures = this.commune.communeManager.storingStructures;
    if (!storingStructures.length)
        return RESULT_FAIL;
    let resourceType;
    for (const key in this.store) {
        if (key === RESOURCE_ENERGY)
            continue;
        if (this.nextStore[key] <= 0)
            continue;
        resourceType = key;
        break;
    }
    if (!resourceType)
        return RESULT_FAIL;
    customLog('BACKUP', resourceType, { superPosition: 1 });
    const storingStructure = storingStructures.find(structure => structure.freeReserveStore >= this.nextStore[resourceType]);
    if (!storingStructure)
        return RESULT_FAIL;
    return {
        T: 'transfer',
        TID: storingStructure.id,
        RT: resourceType,
        A: this.nextStore[resourceType],
    };
};
Creep.prototype.findRoomLogisticRequestAmount = function (request) {
    const target = findObjectWithID(request.targetID);
    if (target instanceof Resource) {
        return Math.min(this.freeNextStore, request.amount);
    }
    if (request.type === 'transfer') {
        if (request.delivery)
            return Math.min(request.amount, this.nextStore[request.resourceType] + this.freeNextStore);
        return Math.min(this.nextStore[request.resourceType], request.amount);
    }
    return Math.min(this.freeNextStore, request.amount);
};
Creep.prototype.runRoomLogisticsRequest = function (args) {
    const request = this.findRoomLogisticsRequest(args);
    if (!request)
        return RESULT_FAIL;
    customLog('REQUEST RESPONSE', request.T, { superPosition: 1 });
    const target = findObjectWithID(request.TID);
    if (getRangeOfCoords(target.pos, this.pos) > 1) {
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: target.pos, range: 1 }],
        });
        return RESULT_ACTION;
    }
    customLog('DOING REQUEST', request.T + ', ' + request.A + ', ' + this.store.getCapacity(request.RT) + ', ' + this.name, { superPosition: 1 });
    if (target instanceof Resource) {
        this.pickup(target);
        customLog('PRE END AMOUNT', this.nextStore.energy, { superPosition: 1 });
        this.nextStore[request.RT] += request.A;
        target.nextAmount -= request.A;
        customLog('END AMOUNT', request.A + ', ' + this.nextStore.energy + ', ' + this.usedNextStore, {
            superPosition: 1,
        });
        this.memory.RLRs.splice(0, 1);
        return RESULT_SUCCESS;
    }
    if (request.T === 'transfer') {
        if (this.transfer(target, request.RT, request.A) !== OK)
            return RESULT_FAIL;
        this.nextStore[request.RT] -= request.A;
        target.nextStore[request.RT] += request.A;
        this.memory.RLRs.splice(0, 1);
        return RESULT_SUCCESS;
    }
    if (target instanceof Creep) {
        if (target.transfer(this, request.RT, request.A) !== OK)
            return RESULT_FAIL;
        this.nextStore[request.RT] += request.A;
        target.nextStore[request.RT] -= request.A;
        this.memory.RLRs.splice(0, 1);
        return RESULT_SUCCESS;
    }
    if (this.withdraw(target, request.RT, request.A) !== OK)
        return RESULT_FAIL;
    customLog('PRE END AMOUNT', this.nextStore.energy, { superPosition: 1 });
    this.nextStore[request.RT] += request.A;
    target.nextStore[request.RT] -= request.A;
    customLog('END AMOUNT', request.A + ', ' + this.nextStore.energy + ', ' + this.usedNextStore, { superPosition: 1 });
    this.memory.RLRs.splice(0, 1);
    return RESULT_SUCCESS;
};
Creep.prototype.runRoomLogisticsRequests = function (args) {
    if (this.spawning)
        return false;
    if (this.runRoomLogisticsRequest(args) !== RESULT_SUCCESS)
        return false;
    this.runRoomLogisticsRequest(args);
    return true;
};

PowerCreep.prototype.needsNewPath = Creep.prototype.needsNewPath = function (goalPos, cacheAmount, path) {
    if (!path)
        return true;
    if (this.spawning)
        return false;
    if (path.length === 0)
        return true;
    if (!this.memory.LC)
        return true;
    if (this.memory.LC + cacheAmount <= Game.time)
        return true;
    if (path[0].roomName !== this.room.name)
        return true;
    if (!this.memory.GP)
        return true;
    if (!areCoordsEqual(unpackPos(this.memory.GP), goalPos))
        return true;
    if (this.pos.getRangeTo(path[0]) > 1)
        return true;
    return false;
};
PowerCreep.prototype.createMoveRequestByPath = Creep.prototype.createMoveRequestByPath = function (opts, pathOpts) {
    if (this.moveRequest)
        return false;
    if (this.moved)
        return false;
    if (this.fatigue > 0)
        return false;
    if (this instanceof Creep && !this.parts.move)
        return false;
    if (this.room.enemyDamageThreat)
        return this.createMoveRequest(opts);
    const cachedIndex = pathOpts.packedPath.indexOf(packPos(this.pos));
    if (cachedIndex >= 0 && cachedIndex + 2 !== pathOpts.packedPath.length) {
        console.log(pathOpts.packedPath.length, unpackPosList(pathOpts.packedPath));
        console.log(pathOpts.packedPath[cachedIndex], pathOpts.packedPath);
        pathOpts.packedPath = pathOpts.packedPath.slice(cachedIndex);
        let path;
        if (pathOpts.remoteName) {
            console.log(pathOpts.packedPath.length, cachedIndex);
            const roomNames = new Set();
            path = unpackPosList(pathOpts.packedPath);
            for (const pos of path) {
                roomNames.add(pos.roomName);
            }
            for (const roomName of roomNames) {
                const roomMemory = Memory.rooms[roomName];
                if (Memory.rooms[roomName].T !== 'remote')
                    continue;
                if (!roomMemory.data[RemoteData.abandon])
                    continue;
                return this.createMoveRequest(opts);
            }
        }
        if (!path)
            path = unpackPosList(pathOpts.packedPath);
        this.memory.P = pathOpts.packedPath;
        this.assignMoveRequest(path[1]);
        return true;
    }
    if (pathOpts.loose)
        return this.createMoveRequest(opts);
    opts.goals = [];
    for (const pos of unpackPosList(pathOpts.packedPath))
        opts.goals.push({
            pos: pos,
            range: 0,
        });
    return this.createMoveRequest(opts);
};
PowerCreep.prototype.createMoveRequest = Creep.prototype.createMoveRequest = function (opts) {
    const { room } = this;
    if (this.moveRequest)
        return false;
    if (this.moved)
        return false;
    if (this.fatigue > 0)
        return false;
    if (this instanceof Creep && !this.parts.move)
        return false;
    if (!opts.origin)
        opts.origin = this.pos;
    if (!opts.cacheAmount)
        opts.cacheAmount = internationalManager.defaultMinCacheAmount;
    let path;
    if (this.spawning)
        path = [];
    if (this.memory.P && !this.spawning) {
        path = unpackPosList(this.memory.P);
        while (path[0] && arePositionsEqual(this.pos, path[0])) {
            path.shift();
        }
    }
    const needsNewPathResult = this.needsNewPath(opts.goals[0].pos, opts.cacheAmount, path);
    if (needsNewPathResult) {
        opts.creep = this;
        opts.avoidImpassibleStructures = true;
        opts.avoidStationaryPositions = true;
        if (!room.controller || !room.controller.safeMode)
            opts.avoidNotMyCreeps = true;
        if (this.memory.R) {
            if (!opts.plainCost)
                opts.plainCost = defaultPlainCost * 2;
            if (!opts.swampCost)
                opts.swampCost = defaultCreepSwampCost * 2;
        }
        path = room.advancedFindPath(opts);
        if (!path.length)
            return 'unpathable';
        path.splice(opts.cacheAmount);
        this.memory.LC = Game.time;
        if (Memory.roomVisuals)
            room.visual.text('NP', path[0], {
                align: 'center',
                color: customColors.lightBlue,
                opacity: 0.5,
                font: 0.5,
            });
        while (path[0] && areCoordsEqual(this.pos, path[0])) {
            path.shift();
        }
    }
    if (!path.length)
        return false;
    if (Memory.roomVisuals)
        path.length > 1
            ? room.pathVisual(path, 'lightBlue')
            : room.visual.line(this.pos, path[0], {
                color: customColors.lightBlue,
                opacity: 0.3,
            });
    if (path.length > 1) {
        if (Memory.roomVisuals)
            room.pathVisual(path, 'lightBlue');
    }
    else {
        if (Memory.roomVisuals)
            room.visual.line(this.pos, path[0], {
                color: customColors.lightBlue,
                opacity: 0.3,
            });
        delete this.memory.LC;
    }
    this.pathOpts = opts;
    this.memory.GP = packPos(opts.goals[0].pos);
    this.memory.P = packPosList(path);
    if (this.spawning) {
        const spawn = findObjectWithID(this.spawnID);
        if (spawn.spawning.directions)
            return true;
        const adjacentCoords = [];
        for (let x = spawn.pos.x - 1; x <= spawn.pos.x + 1; x += 1) {
            for (let y = spawn.pos.y - 1; y <= spawn.pos.y + 1; y += 1) {
                if (spawn.pos.x === x && spawn.pos.y === y)
                    continue;
                const coord = { x, y };
                adjacentCoords.push(coord);
            }
        }
        adjacentCoords.sort((a, b) => {
            return getRangeOfCoords(a, path[0]) - getRangeOfCoords(b, path[0]);
        });
        const directions = [];
        for (const coord of adjacentCoords) {
            directions.push(spawn.pos.getDirectionTo(coord.x, coord.y));
        }
        spawn.spawning.setDirections(directions);
        return true;
    }
    this.assignMoveRequest(path[0]);
    return true;
};
PowerCreep.prototype.assignMoveRequest = Creep.prototype.assignMoveRequest = function (coord) {
    const { room } = this;
    const packedCoord = packCoord(coord);
    this.moveRequest = packedCoord;
    room.moveRequests.get(packedCoord)
        ? room.moveRequests.get(packedCoord).push(this.name)
        : room.moveRequests.set(packedCoord, [this.name]);
};
PowerCreep.prototype.findShovePositions = Creep.prototype.findShovePositions = function (avoidPackedPositions) {
    const { room } = this;
    const { x } = this.pos;
    const { y } = this.pos;
    const adjacentPackedPositions = [
        packXYAsCoord(x - 1, y - 1),
        packXYAsCoord(x - 1, y),
        packXYAsCoord(x - 1, y + 1),
        packXYAsCoord(x, y - 1),
        packXYAsCoord(x, y + 1),
        packXYAsCoord(x + 1, y - 1),
        packXYAsCoord(x + 1, y + 1),
        packXYAsCoord(x + 1, y - 1),
    ];
    const shovePositions = [];
    const terrain = room.getTerrain();
    for (let index = 0; index < adjacentPackedPositions.length; index++) {
        const packedCoord = adjacentPackedPositions[index];
        if (room.creepPositions.get(packedCoord))
            continue;
        if (room.powerCreepPositions.get(packedCoord))
            continue;
        if (avoidPackedPositions.has(packedCoord))
            continue;
        const coord = unpackCoord(packedCoord);
        if (coord.x < 1 || coord.x >= roomDimensions - 1 || coord.y < 1 || coord.y >= roomDimensions - 1)
            continue;
        const pos = new RoomPosition(coord.x, coord.y, room.name);
        if (terrain.get(pos.x, pos.y) === TERRAIN_MASK_WALL)
            continue;
        if (room.enemyThreatCoords.has(packedCoord))
            continue;
        if (room.coordHasStructureTypes(pos, impassibleStructureTypesSet))
            continue;
        if (this.memory.ROS && !room.coordHasStructureTypes(pos, new Set([STRUCTURE_RAMPART])))
            continue;
        let hasImpassibleStructure;
        for (const cSite of pos.lookFor(LOOK_CONSTRUCTION_SITES)) {
            if (!cSite.my && !Memory.allyPlayers.includes(cSite.owner.username))
                continue;
            if (impassibleStructureTypes.includes(cSite.structureType)) {
                hasImpassibleStructure = true;
                break;
            }
        }
        if (hasImpassibleStructure)
            continue;
        shovePositions.push(pos);
    }
    return shovePositions;
};
PowerCreep.prototype.shove = Creep.prototype.shove = function (shoverPos) {
    const { room } = this;
    const shovePositions = this.findShovePositions(new Set([packCoord(shoverPos), packCoord(this.pos)]));
    if (!shovePositions.length)
        return false;
    let goalPos;
    if (this.memory.GP) {
        goalPos = unpackPos(this.memory.GP);
        goalPos = shovePositions.sort((a, b) => {
            return getRange(goalPos.x, a.x, goalPos.y, a.y) - getRange(goalPos.x, b.x, goalPos.y, b.y);
        })[0];
    }
    else
        goalPos = shovePositions[Math.floor(Math.random() * shovePositions.length)];
    this.assignMoveRequest(goalPos);
    if (Memory.roomVisuals)
        room.visual.circle(this.pos, {
            fill: '',
            stroke: customColors.red,
            radius: 0.5,
            strokeWidth: 0.15,
        });
    if (!this.moveRequest)
        return false;
    if (Memory.roomVisuals) {
        room.visual.circle(this.pos, {
            fill: '',
            stroke: customColors.yellow,
            radius: 0.5,
            strokeWidth: 0.15,
            opacity: 0.3,
        });
        room.visual.line(this.pos, unpackCoordAsPos(this.moveRequest, this.room.name), {
            color: customColors.yellow,
        });
    }
    this.recurseMoveRequest();
    if (this.moved)
        return true;
    return false;
};
PowerCreep.prototype.runMoveRequest = Creep.prototype.runMoveRequest = function () {
    const { room } = this;
    if (!room.moveRequests.get(this.moveRequest))
        return false;
    if (this.move(this.pos.getDirectionTo(unpackCoordAsPos(this.moveRequest, room.name))) !== OK)
        return false;
    if (Memory.roomVisuals)
        room.visual.rect(this.pos.x - 0.5, this.pos.y - 0.5, 1, 1, {
            fill: customColors.lightBlue,
            opacity: 0.2,
        });
    this.moved = this.moveRequest;
    room.moveRequests.delete(this.moveRequest);
    delete this.moveRequest;
    return true;
};
PowerCreep.prototype.recurseMoveRequest = Creep.prototype.recurseMoveRequest = function (queue = []) {
    const { room } = this;
    if (!this.moveRequest)
        return;
    if (!room.moveRequests.get(this.moveRequest)) {
        this.moved = 'moved';
        return;
    }
    queue.push(this.name);
    const creepNameAtPos = room.creepPositions.get(this.moveRequest) || room.powerCreepPositions.get(this.moveRequest);
    if (!creepNameAtPos) {
        if (this.spawning) {
            this.moved = this.moveRequest;
            room.moveRequests.delete(this.moveRequest);
            return;
        }
        if (Memory.roomVisuals) {
            const moveRequestPos = unpackCoordAsPos(this.moveRequest, room.name);
            room.visual.rect(moveRequestPos.x - 0.5, moveRequestPos.y - 0.5, 1, 1, {
                fill: customColors.green,
                opacity: 0.2,
            });
            for (let index = queue.length - 1; index >= 0; index--) {
                const creep = Game.creeps[queue[index]] || Game.powerCreeps[queue[index]];
                room.visual.rect(creep.pos.x - 0.5, creep.pos.y - 0.5, 1, 1, {
                    fill: customColors.yellow,
                    opacity: 0.2,
                });
            }
        }
        for (let index = queue.length - 1; index >= 0; index--)
            (Game.creeps[queue[index]] || Game.powerCreeps[queue[index]]).runMoveRequest();
        return;
    }
    const packedCoord = packCoord(this.pos);
    const creepAtPos = Game.creeps[creepNameAtPos] || Game.powerCreeps[creepNameAtPos];
    if (this.spawning) {
        if (creepAtPos.shove(this.pos)) {
            this.moved = this.moveRequest;
            room.moveRequests.delete(this.moveRequest);
        }
        return;
    }
    if (creepAtPos.moved) {
        if (creepAtPos.moved === 'moved') {
            delete this.moveRequest;
            this.moved = 'moved';
            return;
        }
        if (creepAtPos.moved === 'yeild') {
            if (creepAtPos instanceof PowerCreep ||
                TrafficPriorities[this.role] + (this.freeStore() === 0 ? 0.1 : 0) >
                    TrafficPriorities[creepAtPos.role] + (creepAtPos.freeStore() === 0 ? 0.1 : 0)) {
                this.runMoveRequest();
                creepAtPos.moveRequest = packedCoord;
                room.moveRequests.set(packedCoord, [creepAtPos.name]);
                creepAtPos.runMoveRequest();
                return;
            }
            delete this.moveRequest;
            this.moved = 'yeild';
            return;
        }
        if (Memory.roomVisuals)
            room.visual.rect(creepAtPos.pos.x - 0.5, creepAtPos.pos.y - 0.5, 1, 1, {
                fill: customColors.white,
                opacity: 0.2,
            });
        for (let index = queue.length - 1; index >= 0; index--)
            (Game.creeps[queue[index]] || Game.powerCreeps[queue[index]]).runMoveRequest();
        if (Memory.roomVisuals)
            for (let index = queue.length - 1; index >= 0; index--)
                room.visual.rect(creepAtPos.pos.x - 0.5, creepAtPos.pos.y - 0.5, 1, 1, {
                    fill: customColors.yellow,
                    opacity: 0.2,
                });
        return;
    }
    if (creepAtPos.moveRequest) {
        if (!room.moveRequests.get(creepAtPos.moveRequest)) {
            return;
        }
        if (packedCoord === creepAtPos.moveRequest) {
            if (Memory.roomVisuals)
                room.visual.rect(creepAtPos.pos.x - 0.5, creepAtPos.pos.y - 0.5, 1, 1, {
                    fill: customColors.teal,
                    opacity: 0.2,
                });
            this.runMoveRequest();
            creepAtPos.runMoveRequest();
            return;
        }
        if (this.moveRequest === creepAtPos.moveRequest) {
            if (Memory.roomVisuals)
                room.visual.rect(creepAtPos.pos.x - 0.5, creepAtPos.pos.y - 0.5, 1, 1, {
                    fill: customColors.pink,
                    opacity: 0.2,
                });
            if (creepAtPos instanceof PowerCreep ||
                TrafficPriorities[this.role] + (this.freeStore() === 0 ? 0.1 : 0) >
                    TrafficPriorities[creepAtPos.role] + (creepAtPos.freeStore() === 0 ? 0.1 : 0)) {
                this.runMoveRequest();
                delete creepAtPos.moveRequest;
                creepAtPos.moved = 'moved';
                return;
            }
            delete this.moveRequest;
            this.moved = 'moved';
            creepAtPos.runMoveRequest();
            return;
        }
        if (creepAtPos instanceof PowerCreep ||
            TrafficPriorities[this.role] + (this.freeStore() === 0 ? 0.1 : 0) >
                TrafficPriorities[creepAtPos.role] + (creepAtPos.freeStore() === 0 ? 0.1 : 0)) {
            if (Memory.roomVisuals)
                room.visual.rect(creepAtPos.pos.x - 0.5, creepAtPos.pos.y - 0.5, 1, 1, {
                    fill: customColors.pink,
                    opacity: 0.2,
                });
            this.runMoveRequest();
            creepAtPos.moveRequest = packedCoord;
            room.moveRequests.set(packedCoord, [creepAtPos.name]);
            creepAtPos.runMoveRequest();
            return;
        }
        if (queue.includes(creepAtPos.name)) {
            for (let index = queue.length - 1; index >= 0; index--)
                (Game.creeps[queue[index]] || Game.powerCreeps[queue[index]]).runMoveRequest();
            if (Memory.roomVisuals)
                for (let index = queue.length - 1; index >= 0; index--)
                    room.visual.rect(creepAtPos.pos.x - 0.5, creepAtPos.pos.y - 0.5, 1, 1, {
                        fill: customColors.yellow,
                        opacity: 0.2,
                    });
            return;
        }
        creepAtPos.recurseMoveRequest(queue);
        return;
    }
    if (!(creepAtPos instanceof PowerCreep) && creepAtPos.fatigue > 0)
        return;
    if (creepAtPos.shove(this.pos)) {
        this.room.visual.text('S', creepAtPos.pos);
        this.runMoveRequest();
        return;
    }
    if (Memory.roomVisuals)
        room.visual.rect(creepAtPos.pos.x - 0.5, creepAtPos.pos.y - 0.5, 1, 1, {
            fill: customColors.teal,
            opacity: 0.2,
        });
    this.runMoveRequest();
    creepAtPos.moveRequest = packedCoord;
    room.moveRequests.set(packedCoord, [creepAtPos.name]);
    creepAtPos.runMoveRequest();
};
PowerCreep.prototype.avoidEnemyThreatCoords = Creep.prototype.avoidEnemyThreatCoords = function () {
    if (!this.room.enemyThreatCoords.has(packCoord(this.pos)))
        return false;
    this.createMoveRequest({
        origin: this.pos,
        goals: this.room.enemyThreatGoals,
        flee: true,
    });
    return true;
};

class Maintainer extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    preTickManager() {
        this.avoidEnemyThreatCoords();
    }
    advancedMaintain() {
        const { room } = this;
        if (this.needsResources()) {
            delete this.memory.repairTarget;
            this.runRoomLogisticsRequests({
                types: new Set(['withdraw', 'offer', 'pickup']),
                conditions: request => request.resourceType === RESOURCE_ENERGY,
            });
            if (this.needsResources())
                return false;
        }
        const workPartCount = this.parts.work;
        const repairTarget = this.findRepairTarget() || this.findRampartRepairTarget();
        if (!repairTarget) {
            this.say('❌🔧');
            return false;
        }
        this.say('⏩🔧');
        room.targetVisual(this.pos, repairTarget.pos);
        if (this.pos.getRangeTo(repairTarget.pos) > 3) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: repairTarget.pos, range: 3 }],
                avoidEnemyRanges: true,
            });
            return false;
        }
        if (this.worked)
            return true;
        const repairResult = this.repair(repairTarget);
        if (repairResult !== OK)
            return false;
        const energySpentOnRepairs = Math.min(workPartCount, (repairTarget.hitsMax - repairTarget.hits) / REPAIR_POWER, this.store.energy);
        if (repairTarget.structureType === STRUCTURE_RAMPART || repairTarget.structureType === STRUCTURE_WALL) {
            globalStatsUpdater(this.room.name, 'eorwr', energySpentOnRepairs);
            this.say(`🧱${energySpentOnRepairs * REPAIR_POWER}`);
        }
        else {
            globalStatsUpdater(this.room.name, 'eoro', energySpentOnRepairs);
            this.say(`🔧${energySpentOnRepairs * REPAIR_POWER}`);
        }
        repairTarget.nextHits = Math.min(repairTarget.nextHits + workPartCount * REPAIR_POWER, repairTarget.hitsMax);
        if (repairTarget.structureType === STRUCTURE_RAMPART) {
            return true;
        }
        else if (repairTarget.hitsMax - repairTarget.nextHits >= workPartCount * REPAIR_POWER)
            return true;
        delete this.memory.repairTarget;
        const newRepairTarget = this.findRepairTarget();
        if (!newRepairTarget)
            return true;
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: newRepairTarget.pos, range: 3 }],
            avoidEnemyRanges: true,
        });
        return true;
    }
    maintainNearby() {
        const { room } = this;
        if (this.store.getUsedCapacity(RESOURCE_ENERGY) === 0)
            return false;
        const workPartCount = this.parts.work;
        const adjacentCoords = findCoordsInsideRect(this.pos.x - 3, this.pos.y - 3, this.pos.x + 3, this.pos.y + 3);
        let structureID;
        for (const coord of adjacentCoords) {
            const structureIDs = room.structureCoords.get(packCoord(coord));
            if (!structureIDs)
                continue;
            structureID = structureIDs.find(structureID => {
                const structure = findObjectWithID(structureID);
                if (structure.structureType !== STRUCTURE_ROAD && structure.structureType !== STRUCTURE_CONTAINER)
                    return false;
                if (structure.hitsMax - structure.hits < workPartCount * REPAIR_POWER)
                    return false;
                return true;
            });
        }
        if (!structureID)
            return false;
        const structure = findObjectWithID(structureID);
        if (this.repair(structure) !== OK)
            return false;
        const energySpentOnRepairs = Math.min(workPartCount, (structure.hitsMax - structure.hits) / REPAIR_POWER);
        this.message = `🗺️🔧${energySpentOnRepairs * REPAIR_POWER}`;
        return true;
    }
    run() {
        const cSiteTarget = this.room.cSiteTarget;
        if (cSiteTarget && cSiteTarget.structureType === STRUCTURE_SPAWN) {
            this.advancedBuild();
            this.say(this.message);
            return;
        }
        if (this.advancedMaintain())
            return;
        if (this.maintainNearby())
            return;
    }
    static maintainerManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            creep.run();
        }
    }
}

class Builder extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    preTickManager() {
        if (!this.room.cSiteTarget)
            return;
        this.room.roomManager.room.createRoomLogisticsRequest({
            target: this,
            type: 'transfer',
            priority: 8,
            threshold: this.store.getCapacity() * 0.5,
        });
    }
    run() {
        if (this.advancedBuild() === RESULT_FAIL)
            this.advancedRecycle();
        this.say(this.message);
    }
    static builderManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            creep.run();
        }
    }
}

class Hauler extends Creep {
    haul() {
        this.reserve();
        if (!this.fulfillReservation()) {
            this.say(this.message);
            return;
        }
        this.reserve();
        if (!this.fulfillReservation()) {
            this.say(this.message);
            return;
        }
        if (this.message.length)
            this.say(this.message);
    }
    reserve() {
        var _a, _b, _c;
        if ((_a = this.memory.Rs) === null || _a === void 0 ? void 0 : _a.length)
            return;
        const { room } = this;
        let withdrawTargets = room.MAWT.filter(target => {
            if (target instanceof Resource)
                return (target.reserveAmount >= this.store.getCapacity() * 0.2 || target.reserveAmount >= this.freeStore());
            return (target.store.getUsedCapacity(RESOURCE_ENERGY) >= this.store.getCapacity(RESOURCE_ENERGY) ||
                target.store.getUsedCapacity(RESOURCE_ENERGY) >= this.freeStore());
        });
        let transferTargets;
        let target;
        let amount;
        if (this.needsResources()) {
            if (withdrawTargets.length) {
                target = findClosestObject(this.pos, withdrawTargets);
                if (target instanceof Resource)
                    amount = target.reserveAmount;
                else
                    amount = Math.min(this.freeStore(), target.store.energy);
                this.createReservation('withdraw', target.id, amount);
                return;
            }
            transferTargets = room.MATT.filter(function (target) {
                return target.freeStore() > 0;
            });
            if (transferTargets.length == 0) {
                transferTargets = room.METT.filter(function (target) {
                    return target.store.getFreeCapacity(RESOURCE_ENERGY) > 0;
                });
            }
            transferTargets = transferTargets.concat(room.MEFTT.filter(target => {
                return ((target.freeStore() >= this.store.energy && this.store.energy > 0) ||
                    target.freeSpecificStore(RESOURCE_ENERGY) >= this.store.energy + this.freeStore());
            }));
            if (transferTargets.length) {
                withdrawTargets = room.OAWT.filter(target => {
                    if (target instanceof Resource)
                        return (target.reserveAmount >= this.store.getCapacity() * 0.2 ||
                            target.reserveAmount >= this.freeStore());
                    return (target.store.getUsedCapacity(RESOURCE_ENERGY) >= this.store.getCapacity(RESOURCE_ENERGY) ||
                        target.store.getUsedCapacity(RESOURCE_ENERGY) >= this.freeStore());
                });
                if (!withdrawTargets.length)
                    return;
                target = findClosestObject(this.pos, withdrawTargets);
                if (target instanceof Resource)
                    amount = target.reserveAmount;
                else
                    amount = Math.min(this.freeStore(), target.store.energy);
                this.createReservation('withdraw', target.id, amount);
                return;
            }
        }
        if (!transferTargets) {
            transferTargets = room.MATT.filter(function (target) {
                return target.freeSpecificStore(RESOURCE_ENERGY) > 0;
            });
            transferTargets = transferTargets.concat(room.MEFTT.filter(target => {
                return ((target.freeStore() >= this.store.energy && this.store.energy > 0) ||
                    target.freeSpecificStore(RESOURCE_ENERGY) >= this.store.energy + this.freeStore());
            }));
        }
        if (transferTargets.length) {
            target = transferTargets.sort((a, b) => {
                return (getRange(this.pos.x, a.pos.x, this.pos.y, a.pos.y) +
                    a.store.energy * 0.05 -
                    (getRange(this.pos.x, b.pos.x, this.pos.y, b.pos.y) + b.store.energy * 0.05));
            })[0];
            amount = Math.min(Math.max(this.store.energy, 0), target.freeSpecificStore(RESOURCE_ENERGY));
            if (amount > 0) {
                this.createReservation('transfer', target.id, amount);
                return;
            }
        }
        transferTargets = room.OATT.filter(target => {
            return target.freeStore() >= this.store.energy;
        });
        if (transferTargets.length) {
            target = findClosestObject(this.pos, transferTargets);
            amount = Math.min(Math.max(this.store.energy, 0), target.freeStore());
            this.createReservation('transfer', target.id, amount);
        }
        if (((_b = this.memory.Rs) === null || _b === void 0 ? void 0 : _b.length) == 0) {
            if (this.store.getUsedCapacity() > 0) {
                let target = room.OATT[0];
                if (target)
                    for (let rsc in this.store) {
                        this.createReservation('transfer', target.id, this.store[rsc], rsc);
                    }
            }
        }
        if (((_c = this.memory.Rs) === null || _c === void 0 ? void 0 : _c.length) == 0 && room.communeManager.labManager)
            room.communeManager.labManager.generateHaulingReservation(this);
    }
    constructor(creepID) {
        super(creepID);
    }
    static haulerManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            creep.passiveRenew();
            creep.runRoomLogisticsRequests();
            customLog('HAULER RUN', creep.name);
        }
    }
}

class RemoteHauler extends Creep {
    get dying() {
        if (this._dying !== undefined)
            return this._dying;
        if (this.spawning)
            return false;
        if (this.ticksToLive > this.body.length * CREEP_SPAWN_TIME)
            return false;
        return (this._dying = true);
    }
    preTickManager() {
        if (!this.memory.RN)
            return;
        if (randomTick() && !this.getActiveBodyparts(MOVE))
            this.suicide();
        if (!this.findRemote())
            return;
        if (this.dying)
            return;
        Memory.rooms[this.memory.RN].data[RemoteData[`remoteHauler${this.memory.SI}`]] -= this.parts.carry;
    }
    hasValidRemote() {
        if (!this.memory.RN)
            return false;
        const remoteMemory = Memory.rooms[this.memory.RN];
        if (remoteMemory.T !== 'remote')
            return false;
        if (remoteMemory.CN !== this.commune.name)
            return false;
        if (remoteMemory.data[RemoteData.abandon])
            return false;
        return true;
    }
    findRemote() {
        if (this.hasValidRemote())
            return true;
        for (const remoteInfo of this.commune.remoteSourceIndexesByEfficacy) {
            const splitRemoteInfo = remoteInfo.split(' ');
            const remoteName = splitRemoteInfo[0];
            const sourceIndex = parseInt(splitRemoteInfo[1]);
            const remoteMemory = Memory.rooms[remoteName];
            if (remoteMemory.data[RemoteData[`remoteHauler${sourceIndex}`]] <= 0)
                continue;
            this.assignRemote(remoteName, sourceIndex);
            return true;
        }
        return false;
    }
    assignRemote(remoteName, sourceIndex) {
        this.memory.RN = remoteName;
        this.memory.SI = sourceIndex;
        if (this.dying)
            return;
        Memory.rooms[remoteName].data[RemoteData[`remoteHauler${this.memory.SI}`]] -= this.parts.carry;
    }
    removeRemote() {
        if (!this.dying && Memory.rooms[this.memory.RN].data) {
            Memory.rooms[this.memory.RN].data[RemoteData[`remoteHauler${this.memory.SI}`]] += this.parts.carry;
        }
        delete this.memory.RN;
        delete this.memory.SI;
    }
    getResources() {
        if (!this.findRemote()) {
            if (this.room.name === this.commune.name) {
                this.advancedRecycle();
                return false;
            }
            this.createMoveRequest({
                origin: this.pos,
                goals: [
                    {
                        pos: this.commune.anchor,
                        range: 25,
                    },
                ],
            });
            return false;
        }
        if (this.room.name === this.memory.RN) {
            if (!this.getRemoteSourceResources())
                return false;
            delete this.moved;
            this.message += this.commune.name;
            this.message = 'X';
            this.createMoveRequestByPath({
                origin: this.pos,
                goals: [
                    {
                        pos: this.commune.anchor,
                        range: 3,
                    },
                ],
                avoidEnemyRanges: true,
                typeWeights: {
                    enemy: Infinity,
                    ally: Infinity,
                    keeper: Infinity,
                    enemyRemote: Infinity,
                    allyRemote: Infinity,
                },
            }, {
                packedPath: Memory.rooms[this.memory.RN].SPs[this.memory.SI],
                remoteName: this.memory.RN,
                loose: true,
            });
            return true;
        }
        const sourcePos = unpackPosList(Memory.rooms[this.memory.RN].SP[this.memory.SI])[0];
        this.message += this.memory.RN;
        this.say(this.message);
        this.createMoveRequestByPath({
            origin: this.pos,
            goals: [
                {
                    pos: sourcePos,
                    range: 1,
                },
            ],
            avoidEnemyRanges: true,
            typeWeights: {
                enemy: Infinity,
                ally: Infinity,
                keeper: Infinity,
                enemyRemote: Infinity,
                allyRemote: Infinity,
            },
            avoidAbandonedRemotes: true,
        }, {
            packedPath: reverseCoordList(Memory.rooms[this.memory.RN].SPs[this.memory.SI]),
            remoteName: this.memory.RN,
        });
        return true;
    }
    getRemoteSourceResources() {
        const sourcePos = unpackPosList(Memory.rooms[this.memory.RN].SP[this.memory.SI])[0];
        if (getRangeOfCoords(this.pos, sourcePos) > 1) {
            this.runRoomLogisticsRequests({
                types: new Set(['pickup']),
                conditions: request => {
                    if (request.resourceType !== RESOURCE_ENERGY)
                        return false;
                    const targetPos = findObjectWithID(request.targetID).pos;
                    return getRangeOfCoords(targetPos, this.pos) <= 1;
                },
            });
            if (!this.needsResources())
                return true;
            this.createMoveRequestByPath({
                origin: this.pos,
                goals: [
                    {
                        pos: sourcePos,
                        range: 1,
                    },
                ],
                avoidEnemyRanges: true,
            }, {
                packedPath: reverseCoordList(Memory.rooms[this.memory.RN].SPs[this.memory.SI]),
                remoteName: this.memory.RN,
            });
            return false;
        }
        this.moved = 'yeild';
        this.runRoomLogisticsRequests({
            types: new Set(['withdraw', 'pickup']),
            conditions: request => {
                if (request.resourceType !== RESOURCE_ENERGY)
                    return false;
                const targetPos = findObjectWithID(request.targetID).pos;
                return getRangeOfCoords(targetPos, this.pos) <= 1;
            },
        });
        customLog('END CHECK', this.nextStore.energy + ', ' + this.usedNextStore, { superPosition: 1 });
        return !this.needsResources();
    }
    deliverResources() {
        if (this.room.name === this.commune.name) {
            this.passiveRenew();
            this.runRoomLogisticsRequests({
                types: new Set(['transfer']),
                conditions: request => {
                    return request.resourceType === RESOURCE_ENERGY;
                },
            });
            if (!this.needsResources())
                return true;
            if (!this.findRemote())
                return false;
            this.message += this.memory.RN;
            this.say(this.message);
            const sourcePos = unpackPosList(Memory.rooms[this.memory.RN].SP[this.memory.SI])[0];
            this.createMoveRequestByPath({
                origin: this.pos,
                goals: [
                    {
                        pos: sourcePos,
                        range: 1,
                    },
                ],
                avoidEnemyRanges: true,
                typeWeights: {
                    enemy: Infinity,
                    ally: Infinity,
                    keeper: Infinity,
                    enemyRemote: Infinity,
                    allyRemote: Infinity,
                },
            }, {
                packedPath: reverseCoordList(Memory.rooms[this.memory.RN].SPs[this.memory.SI]),
                remoteName: this.memory.RN,
            });
            return false;
        }
        this.message += this.commune.name;
        this.say(this.message);
        this.createMoveRequestByPath({
            origin: this.pos,
            goals: [
                {
                    pos: this.commune.anchor,
                    range: 3,
                },
            ],
            avoidEnemyRanges: true,
            typeWeights: {
                enemy: Infinity,
                ally: Infinity,
                keeper: Infinity,
                enemyRemote: Infinity,
                allyRemote: Infinity,
            },
        }, {
            packedPath: Memory.rooms[this.memory.RN].SPs[this.memory.SI],
        });
        return true;
    }
    relayCoord(coord) {
        if (Memory.roomVisuals)
            this.room.visual.circle(coord.x, coord.y, { fill: customColors.lightBlue });
        const creepAtPosName = this.room.creepPositions.get(packCoord(coord));
        if (!creepAtPosName)
            return false;
        const creepAtPos = Game.creeps[creepAtPosName];
        if (creepAtPos.role !== 'remoteHauler')
            return false;
        if (creepAtPos.movedResource)
            return false;
        if (!creepAtPos.freeNextStore)
            return false;
        if (creepAtPos.freeNextStore !== this.usedNextStore &&
            creepAtPos.store.getCapacity() !== this.store.getCapacity())
            return false;
        this.transfer(creepAtPos, RESOURCE_ENERGY);
        this.movedResource = true;
        creepAtPos.movedResource = true;
        const nextEnergy = Math.min(this.nextStore.energy, creepAtPos.freeNextStore);
        this.nextStore.energy -= nextEnergy;
        creepAtPos.nextStore.energy += nextEnergy;
        delete this.moveRequest;
        delete creepAtPos.moveRequest;
        delete this.moved;
        delete creepAtPos.moved;
        delete this.memory.P;
        delete creepAtPos.memory.P;
        this.getResources();
        const remoteHauler = creepAtPos;
        remoteHauler.deliverResources();
        return true;
    }
    relayCardinal(moveCoord) {
        let offsets = relayOffsets.horizontal;
        if (this.pos.y === moveCoord.y)
            offsets = relayOffsets.vertical;
        for (const offset of offsets) {
            const coord = {
                x: moveCoord.x + offset.x,
                y: moveCoord.y + offset.y,
            };
            if (this.relayCoord(coord))
                return true;
        }
        return false;
    }
    relayDiagonal(moveCoord) {
        let offsets;
        if (this.pos.y > moveCoord.y) {
            offsets = relayOffsets.topLeft;
            if (this.pos.x < moveCoord.x)
                offsets = relayOffsets.topRight;
        }
        else {
            offsets = relayOffsets.bottomLeft;
            if (this.pos.x < moveCoord.x)
                offsets = relayOffsets.bottomRight;
        }
        for (const offset of offsets) {
            const coord = {
                x: moveCoord.x + offset.x,
                y: moveCoord.y + offset.y,
            };
            if (coord.x !== moveCoord.x && coord.y !== moveCoord.y)
                continue;
            if (this.relayCoord(coord))
                return true;
        }
        return false;
    }
    relay() {
        if (!this.moveRequest && (!this.memory.P || this.memory.P.length <= 2))
            return;
        if (this.movedResource)
            return;
        if (!this.nextStore.energy)
            return;
        if (!this.fatigue &&
            this.memory.RN == this.room.name &&
            getRangeOfCoords(this.room.sourcePositions[this.memory.SI][0], this.pos) <= 1)
            return;
        const moveCoord = this.moveRequest ? unpackCoord(this.moveRequest) : unpackPosList(this.memory.P)[2];
        if (this.pos.x === moveCoord.x || this.pos.y === moveCoord.y) {
            this.relayCardinal(moveCoord);
            return;
        }
        this.relayDiagonal(moveCoord);
    }
    constructor(creepID) {
        super(creepID);
    }
    run() {
        let returnTripTime = 0;
        if (this.memory.RN && this.memory.SI !== undefined && Memory.rooms[this.memory.RN]) {
            if (Memory.rooms[this.memory.RN] &&
                Memory.rooms[this.memory.RN].SP &&
                Memory.rooms[this.memory.RN].SPs.length > this.memory.SI + 1)
                returnTripTime = Memory.rooms[this.memory.RN].SPs[this.memory.SI].length * 1.1;
        }
        if (this.needsResources() && this.ticksToLive > returnTripTime) {
            this.getResources();
            return;
        }
        if (this.deliverResources())
            this.relay();
    }
    static remoteHaulerManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            creep.run();
            customLog('REMOTE RUN', creep.name);
        }
    }
}

class Claimer extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    preTickManager() {
        if (this.dying)
            return;
        const request = Memory.claimRequests[this.memory.TRN];
        if (!request)
            return;
        request.data[ClaimRequestData.claimer] -= 1;
    }
    claimRoom() {
        const creep = this;
        const { room } = creep;
        if (room.controller.my)
            return;
        if (creep.pos.getRangeTo(room.controller) > 1) {
            creep.createMoveRequest({
                origin: creep.pos,
                goals: [{ pos: room.controller.pos, range: 1 }],
                avoidEnemyRanges: true,
                plainCost: 1,
                swampCost: creep.parts.move >= 5 ? 1 : undefined,
            });
            return;
        }
        if (room.controller.owner ||
            (room.controller.reservation && room.controller.reservation.username !== Memory.me)) {
            creep.attackController(room.controller);
            return;
        }
        creep.claimController(room.controller);
    }
    static claimerManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            creep.say(creep.memory.TRN);
            if (room.name === creep.memory.TRN) {
                creep.claimRoom();
                continue;
            }
            if (creep.createMoveRequest({
                origin: creep.pos,
                goals: [{ pos: new RoomPosition(25, 25, creep.memory.TRN), range: 25 }],
                avoidEnemyRanges: true,
                plainCost: 1,
                swampCost: creep.parts.move >= 5 ? 1 : undefined,
                typeWeights: {
                    enemy: Infinity,
                    ally: Infinity,
                    keeper: Infinity,
                },
            }) === 'unpathable') {
                const request = Memory.claimRequests[creep.memory.TRN];
                if (request)
                    request.data[ClaimRequestData.abandon] = 20000;
            }
        }
    }
}

class AllyVanguard extends Creep {
    preTickManager() {
        const request = Memory.claimRequests[this.memory.TRN];
        if (!request)
            return;
        request.data[AllyCreepRequestData.allyVanguard] -= this.parts.work;
    }
    findRemote() {
        if (this.memory.RN)
            return true;
        const { room } = this;
        const exitRoomNames = Game.map.describeExits(room.name);
        for (const exitKey in exitRoomNames) {
            const roomName = exitRoomNames[exitKey];
            const roomMemory = Memory.rooms[roomName];
            if (!roomMemory ||
                roomMemory.T === 'enemy' ||
                roomMemory.T === 'enemyRemote' ||
                roomMemory.T === 'keeper' ||
                roomMemory.T === 'ally' ||
                roomMemory.T === 'allyRemote')
                continue;
            this.memory.RN = roomName;
            return true;
        }
        return false;
    }
    getEnergyFromRemote() {
        const { room } = this;
        if (!this.findRemote())
            return;
        if (room.name !== this.memory.RN) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: new RoomPosition(25, 25, this.memory.RN), range: 25 }],
                avoidEnemyRanges: true,
            });
            return;
        }
        if (!this.findOptimalSourceIndex())
            return;
        const sourceIndex = this.memory.SI;
        if (this.travelToSource(sourceIndex))
            return;
        if (this.advancedHarvestSource(room.sources[sourceIndex]))
            return;
    }
    getEnergyFromRoom() {
        const { room } = this;
        if (room.controller && (room.controller.owner || room.controller.reservation)) {
            if (!this.memory.Rs || !this.memory.Rs.length)
                this.reserveWithdrawEnergy();
            if (!this.fulfillReservation()) {
                this.say(this.message);
                return true;
            }
            this.reserveWithdrawEnergy();
            if (!this.fulfillReservation()) {
                this.say(this.message);
                return true;
            }
            if (this.needsResources())
                return false;
            return false;
        }
        if (!this.findOptimalSourceIndex())
            return true;
        const sourceIndex = this.memory.SI;
        if (this.travelToSource(sourceIndex))
            return true;
        if (this.advancedHarvestSource(room.sources[sourceIndex]))
            return true;
        return true;
    }
    travelToSource(sourceIndex) {
        const { room } = this;
        this.say('🚬');
        const harvestPos = this.findSourcePos(this.memory.SI);
        if (!harvestPos)
            return true;
        if (getRangeOfCoords(this.pos, harvestPos) === 0)
            return false;
        this.say(`⏩ ${sourceIndex}`);
        this.createMoveRequest({
            origin: this.pos,
            goals: [
                {
                    pos: new RoomPosition(harvestPos.x, harvestPos.y, room.name),
                    range: 0,
                },
            ],
            avoidEnemyRanges: true,
        });
        return true;
    }
    buildRoom() {
        const { room } = this;
        if (this.needsResources()) {
            if (this.memory.RN) {
                this.getEnergyFromRemote();
                return;
            }
            if (!this.getEnergyFromRoom()) {
                this.getEnergyFromRemote();
            }
            return;
        }
        if (room.name !== this.memory.TRN) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: new RoomPosition(25, 25, this.memory.TRN), range: 25 }],
                avoidEnemyRanges: true,
            });
            return;
        }
        this.advancedBuildAllyCSite();
    }
    constructor(creepID) {
        super(creepID);
    }
    static allyVanguardManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            const request = creep.memory.TRN;
            creep.say(request);
            if (room.name === request || (creep.memory.RN && room.name === creep.memory.RN)) {
                creep.buildRoom();
                continue;
            }
            if (creep.createMoveRequest({
                origin: creep.pos,
                goals: [{ pos: new RoomPosition(25, 25, creep.memory.TRN), range: 25 }],
                avoidEnemyRanges: true,
                typeWeights: {
                    enemy: Infinity,
                    ally: Infinity,
                    keeper: Infinity,
                },
            }) === 'unpathable') {
                const request = Memory.claimRequests[creep.memory.TRN];
                if (request)
                    request.data[AllyCreepRequestData.abandon] = 20000;
            }
        }
    }
}

class HubHauler extends Creep {
    travelToHub() {
        const { room } = this;
        const hubAnchor = unpackNumAsPos(room.memory.stampAnchors.hub[0], room.name);
        if (!hubAnchor)
            return true;
        if (getRangeOfCoords(this.pos, hubAnchor) === 0)
            return false;
        this.say('⏩H');
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: hubAnchor, range: 0 }],
        });
        return true;
    }
    reserve() {
        var _a;
        if ((_a = this.memory.Rs) === null || _a === void 0 ? void 0 : _a.length)
            return;
        const { room } = this;
        const { storage } = room;
        const { terminal } = room;
        if (!storage && !terminal)
            return;
        if (this.store.getUsedCapacity() > 0) {
            const resource = Object.keys(this.store)[0];
            this.createReservation('transfer', storage.id, this.store[resource], resource);
            return;
        }
        if (this.factoryEnergyOverfillTransfer())
            return;
        if (this.reserveHubLinkTransfer())
            return;
        if (this.reserveHubLinkWithdraw())
            return;
        if (this.reserveStorageTransfer())
            return;
        if (this.reserveTerminalTransfer())
            return;
        if (this.reserveFactoryWithdraw())
            return;
        if (this.reserveFactoryTransfer())
            return;
        if (this.reservePowerSpawnTransferPower())
            return;
        if (this.reservePowerSpawnTransferEnergy())
            return;
    }
    factoryEnergyOverfillTransfer() {
        const { room } = this;
        const { storage } = room;
        const factory = room.structures.factory[0];
        if (!storage || !factory)
            return false;
        if (factory.store.energy > 3000 && storage.store.getFreeCapacity() > 3000) {
            this.createReservation('withdraw', factory.id, 3000, RESOURCE_ENERGY);
            this.createReservation('transfer', storage.id, 3000, RESOURCE_ENERGY);
            return true;
        }
        return false;
    }
    reserveStorageTransfer() {
        const { room } = this;
        const { storage } = room;
        const { terminal } = room;
        if (!storage)
            return false;
        if (storage.freeStore() < this.store.getCapacity())
            return false;
        if (terminal && (!terminal.effects || !terminal.effects[PWR_DISRUPT_TERMINAL])) {
            for (const key in terminal.store) {
                const resourceType = key;
                if (terminal.store[resourceType] < this.store.getCapacity())
                    continue;
                if (terminal.store[resourceType] < storage.store[resourceType] * 0.3 + this.store.getCapacity())
                    continue;
                this.message += 'RST';
                let amount = this.freeStore();
                this.createReservation('withdraw', terminal.id, amount, resourceType);
                this.createReservation('transfer', storage.id, amount + this.store[resourceType], resourceType);
                return true;
            }
        }
        return false;
    }
    reserveTerminalTransfer() {
        const { room } = this;
        const { storage } = room;
        const { terminal } = room;
        if (!storage || !terminal)
            return false;
        if (terminal.freeStore() < this.store.getCapacity())
            return false;
        if (storage) {
            for (const key in storage.store) {
                const resourceType = key;
                if (storage.store[resourceType] < this.store.getCapacity())
                    continue;
                if (storage.store[resourceType] * 0.3 < terminal.store[resourceType] + this.store.getCapacity())
                    continue;
                this.message += 'RTT';
                let amount = this.freeStore();
                this.createReservation('withdraw', storage.id, amount, resourceType);
                this.createReservation('transfer', terminal.id, amount + this.store[resourceType], resourceType);
                return true;
            }
        }
        return false;
    }
    reserveHubLinkWithdraw() {
        const { room } = this;
        const { storage } = room;
        const { terminal } = room;
        const { hubLink } = room;
        if (!hubLink)
            return false;
        if (hubLink.store.getCapacity(RESOURCE_ENERGY) * linkReceiveTreshold > hubLink.store.energy)
            return false;
        const { controllerLink } = room;
        if (controllerLink &&
            controllerLink.store.getCapacity(RESOURCE_ENERGY) *
                (linkReceiveTreshold * (room.myCreeps.controllerUpgrader.length ? 2 : 1)) >
                controllerLink.store.energy)
            return false;
        const { fastFillerLink } = room;
        if (fastFillerLink &&
            fastFillerLink.store.getCapacity(RESOURCE_ENERGY) * linkReceiveTreshold > fastFillerLink.store.energy)
            return false;
        let target;
        if (terminal && terminal.freeStore() > this.store.getCapacity())
            target = terminal;
        else if (storage && storage.freeStore() > this.store.getCapacity())
            target = storage;
        if (!target)
            return false;
        this.message += 'RHLW';
        let amount = Math.min(this.freeStore(), hubLink.store.getUsedCapacity(RESOURCE_ENERGY));
        this.createReservation('withdraw', hubLink.id, amount);
        this.createReservation('transfer', target.id, amount + this.store.energy);
        return true;
    }
    reserveHubLinkTransfer() {
        const { room } = this;
        const { hubLink } = room;
        if (!hubLink)
            return false;
        if (hubLink.cooldown > 6)
            return false;
        if (hubLink.store.getCapacity(RESOURCE_ENERGY) * linkSendThreshold < hubLink.store.energy)
            return false;
        const { controllerLink } = room;
        const { fastFillerLink } = room;
        if ((!fastFillerLink ||
            fastFillerLink.store.getCapacity(RESOURCE_ENERGY) * linkReceiveTreshold <
                fastFillerLink.store.energy) &&
            (!controllerLink ||
                controllerLink.store.getCapacity(RESOURCE_ENERGY) *
                    (linkReceiveTreshold * (room.myCreeps.controllerUpgrader.length ? 2 : 1)) <
                    controllerLink.store.energy))
            return false;
        const amount = Math.min(this.freeStore(), hubLink.store.getFreeCapacity(RESOURCE_ENERGY));
        const provider = room.highestWeightedStoringStructures(RESOURCE_ENERGY);
        if (!provider)
            return false;
        this.message += 'RHLT';
        this.createReservation('withdraw', provider.id, amount);
        this.createReservation('transfer', hubLink.id, Math.min(this.freeStore() + this.store.energy, hubLink.store.getFreeCapacity(RESOURCE_ENERGY)));
        return true;
    }
    reserveFactoryWithdraw() {
        const { room } = this;
        const { storage } = room;
        const { terminal } = room;
        const factory = room.structures.factory[0];
        if (!factory)
            return false;
        for (let resource in factory.store) {
            if (room.memory.factoryUsableResources.includes(resource))
                continue;
            if (resource == RESOURCE_BATTERY)
                continue;
            if (resource == room.memory.factoryProduct && factory.store[resource] < this.freeStore())
                continue;
            let target;
            if (terminal && terminal.freeStore() > this.store.getCapacity())
                target = terminal;
            else if (storage && storage.freeStore() > this.store.getCapacity())
                target = storage;
            if (!target)
                return false;
            let amount = Math.min(this.freeStore(), target.freeStore(), factory.store[resource]);
            this.createReservation('withdraw', factory.id, amount, resource);
            this.createReservation('transfer', target.id, amount +
                this.store[resource], resource);
            return true;
        }
        if (factory.store.battery < this.store.getCapacity())
            return false;
        let target;
        if (terminal && terminal.freeStore() > this.store.getCapacity())
            target = terminal;
        else if (storage && storage.freeStore() > this.store.getCapacity())
            target = storage;
        if (!target)
            return false;
        this.message += 'RFW';
        let amount = this.freeStore();
        this.createReservation('withdraw', factory.id, amount, RESOURCE_BATTERY);
        this.createReservation('transfer', target.id, amount + this.store.battery, RESOURCE_BATTERY);
        return true;
    }
    reserveFactoryTransfer() {
        const { room } = this;
        const { storage } = room;
        const { terminal } = room;
        if (!storage && !terminal)
            return false;
        const factory = room.structures.factory[0];
        if (!factory)
            return false;
        if (factory.freeStore() < this.store.getCapacity())
            return false;
        if (room.memory.factoryProduct && room.memory.factoryUsableResources) {
            for (let resource of room.memory.factoryUsableResources) {
                if (factory.store[resource] >= 1000)
                    continue;
                let provider;
                if (terminal && terminal.store[resource] > 0)
                    provider = terminal;
                else if (storage && storage.store[resource] > 0)
                    provider = storage;
                if (!provider)
                    continue;
                const amount = Math.min(this.freeStore(), provider.store[resource], 2000 - factory.store[resource]);
                if (amount <= 0)
                    continue;
                if (resource === RESOURCE_ENERGY && room.resourcesInStoringStructures.energy < room.communeManager.minStoredEnergy)
                    continue;
                this.createReservation('withdraw', provider.id, amount, resource);
                this.createReservation('transfer', factory.id, amount + this.store[resource], resource);
                return true;
            }
        }
        return false;
    }
    reservePowerSpawnTransferPower() {
        const { room } = this;
        const powerSpawn = room.structures.powerSpawn[0];
        const resource = RESOURCE_POWER;
        if (!powerSpawn)
            return false;
        const { storage } = room;
        const { terminal } = room;
        if (!storage && !terminal)
            return false;
        if (powerSpawn.store.getCapacity(resource) * powerSpawnRefillThreshold <
            powerSpawn.store.getUsedCapacity(resource))
            return false;
        const amount = Math.min(this.freeStore(), powerSpawn.freeSpecificStore(resource));
        const provider = room.highestWeightedStoringStructures(RESOURCE_ENERGY);
        if (!provider)
            return false;
        this.message += 'RPSTP';
        this.createReservation('withdraw', provider.id, amount, resource);
        this.createReservation('transfer', powerSpawn.id, Math.min(this.freeStore() + this.store[resource], powerSpawn.freeSpecificStore(resource)), resource);
        return true;
    }
    reservePowerSpawnTransferEnergy() {
        const { room } = this;
        const powerSpawn = room.structures.powerSpawn[0];
        const resource = RESOURCE_ENERGY;
        if (!powerSpawn)
            return false;
        if (!powerSpawn.store.getCapacity(RESOURCE_POWER))
            return false;
        const { storage } = room;
        const { terminal } = room;
        if (!storage && !terminal)
            return false;
        if (powerSpawn.store.getCapacity(resource) * powerSpawnRefillThreshold <
            powerSpawn.store.getUsedCapacity(resource))
            return false;
        const amount = Math.min(this.freeStore(), powerSpawn.freeSpecificStore(resource));
        const provider = room.highestWeightedStoringStructures(RESOURCE_ENERGY);
        if (!provider)
            return false;
        this.message += 'RPSTE';
        this.createReservation('withdraw', provider.id, amount, resource);
        this.createReservation('transfer', powerSpawn.id, Math.min(this.freeStore() + this.store[resource], powerSpawn.freeSpecificStore(resource)), resource);
        return true;
    }
    constructor(creepID) {
        super(creepID);
    }
    static hubHaulerManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (creep.travelToHub())
                continue;
            if ((!creep.memory.Rs || !creep.memory.Rs.length) && creep.freeStore() === 0) {
                for (const key in creep.store) {
                    const resourceType = key;
                    creep.drop(resourceType);
                    break;
                }
                continue;
            }
            creep.reserve();
            if (!creep.fulfillReservation()) {
                creep.say(creep.message);
                continue;
            }
            creep.reserve();
            if (!creep.fulfillReservation()) {
                creep.say(creep.message);
                continue;
            }
            creep.say(creep.message);
            creep.say('🚬');
        }
    }
}

class ControllerUpgrader extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    get dying() {
        if (this._dying !== undefined)
            return this._dying;
        if (this.spawning)
            return false;
        if (this.ticksToLive > this.body.length * CREEP_SPAWN_TIME + (this.room.upgradePathLength - 3))
            return false;
        return (this._dying = true);
    }
    preTickManager() {
        this.room.upgradeStrength += this.upgradeStrength;
    }
    static controllerUpgraderManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            creep.advancedUpgradeController();
        }
    }
}

class SourceHarvester extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    get dying() {
        if (this._dying !== undefined)
            return this._dying;
        if (this.spawning)
            return false;
        if (this.ticksToLive > this.body.length * CREEP_SPAWN_TIME + (this.room.sourcePaths[this.memory.SI].length - 1))
            return false;
        return (this._dying = true);
    }
    preTickManager() {
        const { room } = this;
        if (this.memory.SI && !this.dying)
            room.creepsOfSourceAmount[this.memory.SI] += 1;
    }
    travelToSource() {
        this.say('🚬');
        const harvestPos = this.findSourcePos(this.memory.SI);
        if (!harvestPos)
            return true;
        if (getRangeOfCoords(this.pos, harvestPos) === 0)
            return false;
        if (this.memory.getPulled)
            return true;
        this.say(`⏩${this.memory.SI}`);
        if (this.memory.PC === packCoord(this.room.sourcePositions[this.memory.SI][0])) {
            this.createMoveRequestByPath({
                origin: this.pos,
                goals: [
                    {
                        pos: harvestPos,
                        range: 0,
                    },
                ],
                avoidEnemyRanges: true,
            }, {
                packedPath: reverseCoordList(this.room.memory.SPs[this.memory.SI]),
                loose: true,
            });
            return true;
        }
        this.createMoveRequest({
            origin: this.pos,
            goals: [
                {
                    pos: harvestPos,
                    range: 0,
                },
            ],
            avoidEnemyRanges: true,
        });
        return true;
    }
    transferToSourceExtensions() {
        const { room } = this;
        if (room.energyAvailable === room.energyCapacityAvailable)
            return false;
        if (this.store.getFreeCapacity(RESOURCE_ENERGY) > this.parts.work * HARVEST_POWER)
            return false;
        const adjacentCoords = findCoordsInsideRect(this.pos.x - 1, this.pos.y - 1, this.pos.x + 1, this.pos.y + 1);
        let structureID;
        for (const coord of adjacentCoords) {
            const structureIDs = room.structureCoords.get(packCoord(coord));
            if (!structureIDs)
                continue;
            structureID = structureIDs.find(structureID => {
                const structure = findObjectWithID(structureID);
                return structure.structureType === STRUCTURE_EXTENSION && structure.freeNextStore !== 0;
            });
        }
        if (!structureID)
            return false;
        const structure = findObjectWithID(structureID);
        this.transfer(structure, RESOURCE_ENERGY);
        return true;
    }
    transferToSourceLink() {
        const { room } = this;
        if (this.nextStore.energy > 0)
            return false;
        const sourceLink = room.sourceLinks[this.memory.SI];
        if (!sourceLink)
            return false;
        return this.advancedTransfer(sourceLink);
    }
    repairSourceContainer(sourceContainer) {
        if (this.worked)
            return false;
        if (!sourceContainer)
            return false;
        const workPartCount = this.parts.work;
        if (sourceContainer.hitsMax - sourceContainer.hits < workPartCount * REPAIR_POWER)
            return false;
        if (this.nextStore.energy < workPartCount && !this.movedResource)
            this.withdraw(sourceContainer, RESOURCE_ENERGY);
        const repairResult = this.repair(sourceContainer);
        if (repairResult === OK) {
            this.worked = true;
            const energySpentOnRepairs = Math.min(workPartCount, (sourceContainer.hitsMax - sourceContainer.hits) / REPAIR_POWER, this.store.energy);
            globalStatsUpdater(this.room.name, 'eoro', energySpentOnRepairs);
            this.say(`🔧${energySpentOnRepairs * REPAIR_POWER}`);
            return true;
        }
        return false;
    }
    transferToNearbyCreep() {
        const sourceContainer = this.room.sourceContainers[this.memory.SI];
        if (sourceContainer && sourceContainer.RCLActionable)
            return false;
        const sourceLink = this.room.sourceLinks[this.memory.SI];
        if (sourceLink && sourceLink.RCLActionable)
            return false;
        if (this.nextStore.energy < this.store.getCapacity() * 0.5)
            return false;
        this.room.createRoomLogisticsRequest({
            target: this,
            type: 'withdraw',
            priority: scalePriority(this.store.getCapacity(), this.reserveStore.energy, 5, true),
        });
        return true;
    }
    static sourceHarvesterManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            const sourceIndex = creep.memory.SI;
            if (creep.travelToSource())
                continue;
            creep.advancedHarvestSource(room.sources[sourceIndex]);
            if (creep.transferToSourceExtensions())
                continue;
            if (creep.transferToSourceLink())
                continue;
            creep.repairSourceContainer(room.sourceContainers[sourceIndex]);
            if (creep.transferToNearbyCreep())
                continue;
        }
    }
}

class MineralHarvester extends Creep {
    preTickManager() {
        this.room.mineralHarvestStrength += this.parts.work * HARVEST_MINERAL_POWER;
    }
    advancedHarvestMineral(mineral) {
        this.say('🚬');
        const harvestPos = this.findMineralHarvestPos();
        if (!harvestPos)
            return true;
        if (getRangeOfCoords(this.pos, harvestPos) > 0) {
            this.say('⏩M');
            this.createMoveRequestByPath({
                origin: this.pos,
                goals: [{ pos: harvestPos, range: 0 }],
                avoidEnemyRanges: true,
            }, {
                packedPath: reverseCoordList(this.room.memory.MPa),
                loose: true,
            });
            return true;
        }
        if (this.harvest(mineral) !== OK)
            return true;
        const mineralsHarvested = Math.min(this.parts.work * HARVEST_MINERAL_POWER, mineral.mineralAmount);
        globalStatsUpdater(this.room.name, 'mh', mineralsHarvested);
        this.say(`⛏️${mineralsHarvested}`);
        return true;
    }
    constructor(creepID) {
        super(creepID);
    }
    static mineralHarvesterManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            const mineral = room.mineral;
            if (mineral.mineralAmount === 0) {
                creep.advancedRecycle();
                continue;
            }
            creep.advancedHarvestMineral(mineral);
        }
    }
}

class FastFiller extends Creep {
    travelToFastFiller() {
        const fastFillerPos = this.findFastFillerPos();
        if (!fastFillerPos)
            return true;
        if (getRangeOfCoords(this.pos, fastFillerPos) === 0)
            return false;
        this.say('⏩F');
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: fastFillerPos, range: 0 }],
        });
        return true;
    }
    findFastFillerPos() {
        const { room } = this;
        this.say('FFP');
        if (this.memory.PC)
            return unpackCoordAsPos(this.memory.PC, room.name);
        const usedFastFillerPositions = room.usedFastFillerCoords;
        const openFastFillerPositions = room.fastFillerPositions.filter(pos => !usedFastFillerPositions.has(packCoord(pos)));
        if (!openFastFillerPositions.length)
            return false;
        const fastFillerPos = findClosestPos(this.pos, openFastFillerPositions);
        const packedCoord = packCoord(fastFillerPos);
        this.memory.PC = packedCoord;
        room._usedFastFillerCoords.add(packedCoord);
        return fastFillerPos;
    }
    fillFastFiller() {
        const { room } = this;
        this.say('💁');
        if (this.usedStore() > this.store.energy) {
            for (const resourceType in this.store) {
                if (resourceType == RESOURCE_ENERGY)
                    continue;
                this.say('WR');
                this.drop(resourceType);
                return true;
            }
        }
        const fastFillerContainers = [];
        if (room.fastFillerContainerLeft)
            fastFillerContainers.push(room.fastFillerContainerLeft);
        if (room.fastFillerContainerRight)
            fastFillerContainers.push(room.fastFillerContainerRight);
        if (room.energyAvailable === room.energyCapacityAvailable)
            return false;
        if (this.needsResources()) {
            for (let i = fastFillerContainers.length - 1; i >= 0; i--) {
                const structure = fastFillerContainers[i];
                if (getRangeOfCoords(this.pos, structure.pos) > 1) {
                    fastFillerContainers.splice(i, 1);
                    continue;
                }
                if (structure.usedStore() > structure.store.energy) {
                    for (const key in structure.store) {
                        const resourceType = key;
                        if (resourceType === RESOURCE_ENERGY)
                            continue;
                        this.say('WCR');
                        this.withdraw(structure, resourceType);
                        return true;
                    }
                }
                if (structure.store.getUsedCapacity(RESOURCE_ENERGY) < structure.store.getCapacity() * 0.5)
                    continue;
                this.withdraw(structure, RESOURCE_ENERGY);
                return true;
            }
            let fastFillerStoringStructures = [];
            if (room.fastFillerLink && room.fastFillerLink.RCLActionable)
                fastFillerStoringStructures.push(room.fastFillerLink);
            fastFillerStoringStructures = fastFillerStoringStructures.concat(fastFillerContainers);
            for (const structure of fastFillerStoringStructures) {
                if (getRangeOfCoords(this.pos, structure.pos) > 1)
                    continue;
                if (structure.nextStore.energy <= 0)
                    continue;
                this.say('W');
                this.withdraw(structure, RESOURCE_ENERGY);
                return true;
            }
            return false;
        }
        const adjacentStructures = room.lookForAtArea(LOOK_STRUCTURES, this.pos.y - 1, this.pos.x - 1, this.pos.y + 1, this.pos.x + 1, true);
        for (const adjacentPosData of adjacentStructures) {
            const structure = adjacentPosData.structure;
            if (!structure.nextStore)
                continue;
            if (structure.structureType !== STRUCTURE_SPAWN && structure.structureType !== STRUCTURE_EXTENSION)
                continue;
            if (structure.nextStore.energy >= structure.store.getCapacity(RESOURCE_ENERGY))
                continue;
            this.say('T');
            this.transfer(structure, RESOURCE_ENERGY);
            structure.nextStore.energy += this.store.energy;
            return true;
        }
        return false;
    }
    constructor(creepID) {
        super(creepID);
    }
    static fastFillerManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (creep.travelToFastFiller())
                continue;
            if (creep.fillFastFiller())
                continue;
            creep.passiveRenew();
        }
    }
}

class MeleeDefender extends Creep {
    preTickManager() {
        const { room } = this;
        room.attackingDefenderIDs.add(this.id);
        for (const enemyCreep of this.room.unprotectedEnemyCreeps) {
            const range = getRangeOfCoords(this.pos, enemyCreep.pos);
            if (range > 1)
                continue;
            const estimatedDamage = this.combatStrength.melee * enemyCreep.defenceStrength;
            const targetDamage = room.defenderEnemyTargetsWithDamage.get(enemyCreep.id);
            if (!targetDamage) {
                room.defenderEnemyTargetsWithDamage.set(enemyCreep.id, enemyCreep.netTowerDamage + estimatedDamage);
            }
            else
                room.defenderEnemyTargetsWithDamage.set(enemyCreep.id, targetDamage + estimatedDamage);
            if (!room.defenderEnemyTargetsWithDefender.get(enemyCreep.id)) {
                room.defenderEnemyTargetsWithDefender.set(enemyCreep.id, [this.id]);
                continue;
            }
            else
                room.defenderEnemyTargetsWithDefender.get(enemyCreep.id).push(this.id);
        }
        if (this.memory.RID) {
            const rampart = findObjectWithID(this.memory.RID);
            if (!rampart || rampart.hits < 3000) {
                delete this.memory.RID;
                return;
            }
            room.usedRampartIDs.add(rampart.id);
        }
    }
    advancedDefend() {
        const { room } = this;
        if (this.combatTarget) {
            this.room.targetVisual(this.pos, this.combatTarget.pos);
            this.attack(this.combatTarget);
        }
        let enemyCreeps = room.enemyAttackers;
        if (!enemyCreeps.length) {
            enemyCreeps = room.enemyAttackers;
            if (!enemyCreeps.length)
                return;
        }
        if (!room.enemyDamageThreat || room.controller.safeMode) {
            this.defendWithoutRamparts(enemyCreeps);
            return;
        }
        this.defendWithRampart();
    }
    defendWithoutRamparts(enemyCreeps) {
        const enemyCreep = findClosestObject(this.pos, enemyCreeps);
        if (Memory.roomVisuals)
            this.room.visual.line(this.pos, enemyCreep.pos, { color: customColors.green, opacity: 0.3 });
        if (getRange(this.pos.x, enemyCreep.pos.x, this.pos.y, enemyCreep.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: enemyCreep.pos, range: 1 }],
            });
            return true;
        }
        if (enemyCreep.canMove)
            this.assignMoveRequest(enemyCreep.pos);
        return true;
    }
    findRampart(enemyCreep) {
        const { room } = this;
        if (this.memory.RID && !randomTick(10))
            return findObjectWithID(this.memory.RID);
        const ramparts = room.defensiveRamparts.filter(rampart => {
            if (areCoordsEqual(this.pos, rampart.pos))
                return true;
            if (room.usedRampartIDs.has(rampart.id))
                return false;
            if (rampart.hits < 3000)
                return false;
            if (room.coordHasStructureTypes(rampart.pos, new Set(impassibleStructureTypes)))
                return false;
            return true;
        });
        if (!ramparts.length)
            return false;
        const rampart = findClosestObjectEuc(enemyCreep.pos, ramparts);
        this.memory.RID = rampart.id;
        room.usedRampartIDs.add(rampart.id);
        return rampart;
    }
    defendWithRampart() {
        const { room } = this;
        const enemyCreeps = room.enemyAttackers;
        const enemyCreep = this.pos.findClosestByPath(enemyCreeps, {
            ignoreCreeps: true,
            ignoreRoads: true,
        });
        const rampart = this.findRampart(enemyCreep);
        if (!rampart)
            return this.defendWithoutRamparts(enemyCreeps);
        this.memory.ROS = true;
        if (Memory.roomVisuals) {
            this.room.visual.line(this.pos.x, this.pos.y, rampart.pos.x, rampart.pos.y, { color: customColors.yellow });
            this.room.targetVisual(this.pos, enemyCreep.pos);
            room.visual.circle(enemyCreep.pos, { fill: customColors.green });
        }
        if (getRange(this.pos.x, rampart.pos.x, this.pos.y, rampart.pos.y) === 0)
            return false;
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: rampart.pos, range: 0 }],
            weightStructures: {
                road: 5,
                rampart: 1,
            },
            plainCost: 40,
            swampCost: 100,
        });
        return true;
    }
    constructor(creepID) {
        super(creepID);
    }
    static meleeDefenderManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (creep.spawning)
                continue;
            delete creep.memory.ROS;
            creep.advancedDefend();
        }
    }
}

class RemoteHarvester extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    get dying() {
        if (this._dying !== undefined)
            return this._dying;
        if (this.spawning)
            return false;
        if (this.memory.RN) {
            if (this.ticksToLive >
                this.body.length * CREEP_SPAWN_TIME + Memory.rooms[this.memory.RN].SPs[this.memory.SI].length)
                return false;
        }
        else if (this.ticksToLive > this.body.length * CREEP_SPAWN_TIME)
            return false;
        return (this._dying = true);
    }
    preTickManager() {
        if (randomTick() && !this.getActiveBodyparts(MOVE))
            this.suicide();
        if (!this.findRemote())
            return;
        if (this.dying)
            return;
        Memory.rooms[this.memory.RN].data[RemoteData[`remoteSourceHarvester${this.memory.SI}`]] -= this.parts.work;
        const commune = this.commune;
        if (commune && commune.creepsOfRemote[this.memory.RN])
            commune.creepsOfRemote[this.memory.RN][this.role].push(this.name);
    }
    hasValidRemote() {
        if (!this.memory.RN)
            return false;
        const remoteMemory = Memory.rooms[this.memory.RN];
        if (remoteMemory.T !== 'remote')
            return false;
        if (remoteMemory.CN !== this.commune.name)
            return false;
        if (remoteMemory.data[RemoteData.abandon])
            return false;
        return true;
    }
    findRemote() {
        if (this.hasValidRemote())
            return true;
        for (const remoteInfo of this.commune.remoteSourceIndexesByEfficacy) {
            const splitRemoteInfo = remoteInfo.split(' ');
            const remoteName = splitRemoteInfo[0];
            const remoteMemory = Memory.rooms[remoteName];
            if (remoteMemory.data[RemoteData[`remoteSourceHarvester${this.memory.SI}`]] <= 0)
                continue;
            this.assignRemote(remoteName);
            return true;
        }
        return false;
    }
    assignRemote(remoteName) {
        this.memory.RN = remoteName;
        if (this.dying)
            return;
        const needs = Memory.rooms[remoteName].data;
        needs[RemoteData[`remoteSourceHarvester${this.memory.SI}`]] -= this.parts.work;
    }
    removeRemote() {
        if (!this.dying) {
            const needs = Memory.rooms[this.memory.RN].data;
            needs[RemoteData[`remoteSourceHarvester${this.memory.SI}`]] += this.parts.work;
        }
        delete this.memory.RN;
        delete this.memory.PC;
    }
    remoteActions() {
        if (this.travelToSource(this.memory.SI))
            return;
        const container = this.room.sourceContainers[this.memory.SI];
        const source = this.room.sources[this.memory.SI];
        if (container)
            this.room.targetVisual(this.pos, container.pos, true);
        if (this.store.getFreeCapacity() <= this.getActiveBodyparts(WORK) || source.energy == 0) {
            if (!container) {
                if (this.nextStore.energy > this.store.getCapacity() * 0.5) {
                    this.room.createRoomLogisticsRequest({
                        target: this,
                        type: 'withdraw',
                        priority: scalePriority(this.store.getCapacity(), this.reserveStore.energy, 5, true),
                    });
                }
            }
            if (source.energy * 300 < (source.ticksToRegeneration - 1) * source.energyCapacity) {
                let didWork = this.maintainContainer();
                if (didWork)
                    return;
            }
            if (container && !container.pos.isEqualTo(this.pos)) {
                this.transfer(container, RESOURCE_ENERGY);
            }
        }
        if (this.advancedHarvestSource(source))
            return;
    }
    obtainEnergyIfNeeded() {
        let neededEnergy = this.parts.work * BUILD_POWER;
        if (this.store[RESOURCE_ENERGY] < neededEnergy * 2) {
            let droppedResource = this.pos
                .findInRange(FIND_DROPPED_RESOURCES, 1)
                .find(drop => drop.resourceType == RESOURCE_ENERGY);
            if (droppedResource)
                this.pickup(droppedResource);
        }
    }
    maintainContainer() {
        const container = this.room.sourceContainers[this.memory.SI];
        if (container) {
            if (container.hits < container.hitsMax * 0.8) {
                this.obtainEnergyIfNeeded();
                this.repair(container);
                return true;
            }
            return false;
        }
        if (this.commune.energyCapacityAvailable < 650)
            return false;
        let cSite;
        const cSitesAtCoord = this.room.cSiteCoords.get(packCoord(this.pos));
        if (cSitesAtCoord)
            cSite = findObjectWithID(cSitesAtCoord[0]);
        if (cSite) {
            this.obtainEnergyIfNeeded();
            this.build(cSite);
            delete Memory.constructionSites[cSite.id];
            return true;
        }
        const sourcePos = this.room.sourcePositions[this.memory.SI][0];
        this.room.createConstructionSite(sourcePos, STRUCTURE_CONTAINER);
        return false;
    }
    travelToSource(sourceIndex) {
        this.say('🚬');
        const harvestPos = this.findSourcePos(this.memory.SI);
        if (!harvestPos)
            return true;
        if (getRangeOfCoords(this.pos, harvestPos) === 0)
            return false;
        this.say(`⏩ ${sourceIndex}`);
        this.createMoveRequestByPath({
            origin: this.pos,
            goals: [
                {
                    pos: harvestPos,
                    range: 0,
                },
            ],
            avoidEnemyRanges: true,
        }, {
            packedPath: reverseCoordList(Memory.rooms[this.memory.RN].SPs[this.memory.SI]),
            remoteName: this.memory.RN,
            loose: true,
        });
        return true;
    }
    static RemoteHarvesterManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (!creep.findRemote()) {
                if (room.name === creep.commune.name) {
                    creep.advancedRecycle();
                    continue;
                }
                creep.createMoveRequest({
                    origin: creep.pos,
                    goals: [
                        {
                            pos: creep.commune.anchor,
                            range: 5,
                        },
                    ],
                });
                continue;
            }
            if (room.name === creep.memory.RN) {
                creep.remoteActions();
                continue;
            }
            creep.say(creep.memory.RN);
            const sourcePos = unpackPosList(Memory.rooms[creep.memory.RN].SP[creep.memory.SI])[0];
            creep.createMoveRequestByPath({
                origin: creep.pos,
                goals: [
                    {
                        pos: sourcePos,
                        range: 1,
                    },
                ],
                avoidEnemyRanges: true,
                typeWeights: {
                    enemy: Infinity,
                    ally: Infinity,
                    keeper: Infinity,
                    enemyRemote: Infinity,
                    allyRemote: Infinity,
                },
                avoidAbandonedRemotes: true,
            }, {
                packedPath: reverseCoordList(Memory.rooms[creep.memory.RN].SPs[creep.memory.SI]),
                remoteName: creep.memory.RN,
            });
        }
    }
}

class RemoteReserver extends Creep {
    get dying() {
        if (this._dying !== undefined)
            return this._dying;
        if (this.spawning)
            return false;
        if (this.memory.RN) {
            if (this.ticksToLive > this.body.length * CREEP_SPAWN_TIME + Memory.rooms[this.memory.RN].RE)
                return false;
        }
        else if (this.ticksToLive > this.body.length * CREEP_SPAWN_TIME)
            return false;
        return (this._dying = true);
    }
    hasValidRemote() {
        if (!this.memory.RN)
            return false;
        const remoteMemory = Memory.rooms[this.memory.RN];
        if (remoteMemory.T !== 'remote')
            return false;
        if (remoteMemory.CN !== this.commune.name)
            return false;
        if (remoteMemory.data[RemoteData.abandon])
            return false;
        return true;
    }
    findRemote() {
        if (this.hasValidRemote())
            return true;
        const remoteNamesByEfficacy = this.commune.remoteNamesBySourceEfficacy;
        let roomMemory;
        for (const roomName of remoteNamesByEfficacy) {
            roomMemory = Memory.rooms[roomName];
            if (roomMemory.data[RemoteData.remoteReserver] <= 0)
                continue;
            this.memory.RN = roomName;
            roomMemory.data[RemoteData.remoteReserver] -= 1;
            return true;
        }
        return false;
    }
    preTickManager() {
        if (randomTick() && !this.getActiveBodyparts(MOVE))
            this.suicide();
        const role = this.role;
        if (!this.findRemote())
            return;
        if (this.dying)
            return;
        Memory.rooms[this.memory.RN].data[RemoteData[role]] -= 1;
        const commune = this.commune;
        if (commune.creepsOfRemote[this.memory.RN])
            commune.creepsOfRemote[this.memory.RN][role].push(this.name);
    }
    constructor(creepID) {
        super(creepID);
    }
    static remoteReserverManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (!creep.findRemote()) {
                if (room.name === creep.commune.name) {
                    creep.advancedRecycle();
                    continue;
                }
                creep.createMoveRequest({
                    origin: creep.pos,
                    goals: [
                        {
                            pos: creep.commune.anchor,
                            range: 5,
                        },
                    ],
                });
                continue;
            }
            creep.say(creep.memory.RN);
            if (room.name === creep.memory.RN) {
                creep.advancedReserveController();
                continue;
            }
            creep.createMoveRequest({
                origin: creep.pos,
                goals: [
                    {
                        pos: new RoomPosition(25, 25, creep.memory.RN),
                        range: 25,
                    },
                ],
                avoidEnemyRanges: true,
                typeWeights: {
                    enemy: Infinity,
                    ally: Infinity,
                    keeper: Infinity,
                    enemyRemote: Infinity,
                    allyRemote: Infinity,
                },
                avoidAbandonedRemotes: true,
            });
        }
    }
}

class RemoteDefender extends Creep {
    get dying() {
        if (this._dying !== undefined)
            return this._dying;
        if (this.spawning)
            return false;
        if (this.ticksToLive > this.body.length * CREEP_SPAWN_TIME)
            return false;
        return (this._dying = true);
    }
    preTickManager() {
        if (!this.findRemote())
            return;
        const role = this.role;
        if (Memory.rooms[this.memory.RN].T !== 'remote') {
            delete this.memory.RN;
            if (!this.findRemote())
                return;
        }
        else if (Memory.rooms[this.memory.RN].CN !== this.commune.name) {
            delete this.memory.RN;
            if (!this.findRemote())
                return;
        }
        if (this.dying)
            return;
        Memory.rooms[this.memory.RN].data[RemoteData.minDamage] -= this.combatStrength.ranged;
        Memory.rooms[this.memory.RN].data[RemoteData.minHeal] -= this.combatStrength.heal;
        const commune = this.commune;
        if (commune.creepsOfRemote[this.memory.RN])
            commune.creepsOfRemote[this.memory.RN][role].push(this.name);
    }
    findRemote() {
        const creep = this;
        if (creep.memory.RN)
            return true;
        const remoteNamesByEfficacy = creep.commune.remoteNamesBySourceEfficacy;
        let roomMemory;
        for (const roomName of remoteNamesByEfficacy) {
            roomMemory = Memory.rooms[roomName];
            if (roomMemory.data[RemoteData.minDamage] + roomMemory.data[RemoteData.minHeal] <= 0)
                continue;
            creep.memory.RN = roomName;
            roomMemory.data[RemoteData.minDamage] -= creep.combatStrength.ranged;
            roomMemory.data[RemoteData.minHeal] -= creep.combatStrength.heal;
            return true;
        }
        return false;
    }
    advancedAttackEnemies() {
        const { room } = this;
        const enemyAttackers = room.enemyAttackers;
        if (!enemyAttackers.length) {
            const enemyCreeps = room.enemyCreeps;
            if (!enemyCreeps.length) {
                return this.aggressiveHeal();
            }
            if (this.passiveHeal())
                return true;
            this.say('EC');
            const enemyCreep = findClosestObject(this.pos, enemyCreeps);
            const range = getRange(this.pos.x, enemyCreep.pos.x, this.pos.y, enemyCreep.pos.y);
            if (range > 1) {
                this.rangedAttack(enemyCreep);
                this.createMoveRequest({
                    origin: this.pos,
                    goals: [{ pos: enemyCreep.pos, range: 1 }],
                });
                return true;
            }
            this.rangedMassAttack();
            return true;
        }
        const enemyAttacker = findClosestObject(this.pos, enemyAttackers);
        const range = getRange(this.pos.x, enemyAttacker.pos.x, this.pos.y, enemyAttacker.pos.y);
        if (range > 3) {
            this.passiveHeal();
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: enemyAttacker.pos, range: 1 }],
            });
            return true;
        }
        this.say('AEA');
        this.heal(this);
        if (range === 1) {
            this.rangedMassAttack();
        }
        else
            this.rangedAttack(enemyAttacker);
        if (this.combatStrength.heal < enemyAttacker.combatStrength.ranged) {
            if (range === 3)
                return true;
            if (range >= 3) {
                this.createMoveRequest({
                    origin: this.pos,
                    goals: [{ pos: enemyAttacker.pos, range: 3 }],
                });
                return true;
            }
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: enemyAttacker.pos, range: 25 }],
                flee: true,
            });
            return true;
        }
        if (this.combatStrength.heal < enemyAttacker.combatStrength.ranged) {
            if (range <= 2) {
                this.createMoveRequest({
                    origin: this.pos,
                    goals: [{ pos: enemyAttacker.pos, range: 1 }],
                    flee: true,
                });
                return true;
            }
        }
        if (range > 1) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: enemyAttacker.pos, range: 1 }],
            });
            return true;
        }
        return true;
    }
    constructor(creepID) {
        super(creepID);
    }
    static remoteDefenderManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (!creep.findRemote()) {
                if (room.name === creep.commune.name) {
                    creep.advancedRecycle();
                    continue;
                }
                creep.createMoveRequest({
                    origin: creep.pos,
                    goals: [
                        {
                            pos: creep.commune.anchor,
                            range: 5,
                        },
                    ],
                    typeWeights: {
                        enemy: Infinity,
                        ally: Infinity,
                        keeper: Infinity,
                        enemyRemote: Infinity,
                        allyRemote: Infinity,
                    },
                });
                continue;
            }
            creep.say(creep.memory.RN);
            if (creep.advancedAttackEnemies()) {
                delete creep.memory.TW;
                continue;
            }
            if (room.name === creep.memory.RN) {
                if (!creep.memory.TW)
                    creep.memory.TW = 0;
                else
                    creep.memory.TW += 1;
                if (creep.memory.TW > randomIntRange(20, 100)) {
                    delete creep.memory.RN;
                    if (creep.moveRequest)
                        continue;
                    if (!creep.findRemote())
                        continue;
                }
            }
            creep.createMoveRequest({
                origin: creep.pos,
                goals: [
                    {
                        pos: new RoomPosition(25, 25, creep.memory.RN),
                        range: 25,
                    },
                ],
                typeWeights: {
                    enemy: Infinity,
                    ally: Infinity,
                    keeper: Infinity,
                    enemyRemote: Infinity,
                    allyRemote: Infinity,
                },
                avoidAbandonedRemotes: true,
            });
        }
    }
}

class RemoteCoreAttacker extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    get dying() {
        if (this._dying !== undefined)
            return this._dying;
        if (this.spawning)
            return false;
        if (this.ticksToLive > this.body.length * CREEP_SPAWN_TIME)
            return false;
        return (this._dying = true);
    }
    preTickManager() {
        if (randomTick() && !this.getActiveBodyparts(MOVE))
            this.suicide();
        const role = this.role;
        if (!this.findRemote())
            return;
        if (this.dying)
            return;
        Memory.rooms[this.memory.RN].data[RemoteData[role]] -= 1;
        const commune = this.commune;
        if (commune.creepsOfRemote[this.memory.RN])
            commune.creepsOfRemote[this.memory.RN][role].push(this.name);
    }
    hasValidRemote() {
        if (!this.memory.RN)
            return false;
        const remoteMemory = Memory.rooms[this.memory.RN];
        if (remoteMemory.T !== 'remote')
            return false;
        if (remoteMemory.CN !== this.commune.name)
            return false;
        if (remoteMemory.data[RemoteData.abandon])
            return false;
        return true;
    }
    findRemote() {
        if (this.hasValidRemote())
            return true;
        const role = 'remoteCoreAttacker';
        const remoteNamesByEfficacy = this.commune.remoteNamesBySourceEfficacy;
        for (const roomName of remoteNamesByEfficacy) {
            const roomMemory = Memory.rooms[roomName];
            if (roomMemory.data[RemoteData[role]] <= 0)
                continue;
            this.memory.RN = roomName;
            roomMemory.data[RemoteData[role]] -= 1;
            return true;
        }
        return false;
    }
    advancedAttackCores() {
        const { room } = this;
        if (!room.structures.invaderCore.length)
            return false;
        const closestCore = room.structures.invaderCore[0];
        if (getRange(this.pos.x, closestCore.pos.x, this.pos.y, closestCore.pos.y) === 1) {
            this.say('🗡️C');
            this.attack(closestCore);
            return true;
        }
        this.say('⏩C');
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: closestCore.pos, range: 1 }],
            avoidEnemyRanges: true,
        });
        return true;
    }
    static remoteCoreAttackerManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (!creep.findRemote()) {
                if (room.name === creep.commune.name) {
                    creep.advancedRecycle();
                    continue;
                }
                creep.createMoveRequest({
                    origin: creep.pos,
                    goals: [
                        {
                            pos: creep.commune.anchor,
                            range: 5,
                        },
                    ],
                });
                continue;
            }
            creep.say(creep.memory.RN);
            if (creep.advancedAttackCores())
                continue;
            if (room.name === creep.memory.RN) {
                delete creep.memory.RN;
                continue;
            }
            creep.createMoveRequest({
                origin: creep.pos,
                goals: [
                    {
                        pos: new RoomPosition(25, 25, creep.memory.RN),
                        range: 25,
                    },
                ],
                typeWeights: {
                    enemy: Infinity,
                    ally: Infinity,
                    keeper: Infinity,
                    enemyRemote: Infinity,
                    allyRemote: Infinity,
                },
                avoidAbandonedRemotes: true,
            });
        }
    }
}

class RemoteDismantler extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    get dying() {
        if (this._dying !== undefined)
            return this._dying;
        if (this.spawning)
            return false;
        if (this.ticksToLive > this.body.length * CREEP_SPAWN_TIME)
            return false;
        return (this._dying = true);
    }
    preTickManager() {
        if (!this.findRemote())
            return;
        if (randomTick() && !this.getActiveBodyparts(MOVE))
            this.suicide();
        const role = this.role;
        if (this.dying)
            return;
        Memory.rooms[this.memory.RN].data[RemoteData[role]] -= 1;
        const commune = this.commune;
        if (commune.creepsOfRemote[this.memory.RN])
            commune.creepsOfRemote[this.memory.RN][role].push(this.name);
    }
    hasValidRemote() {
        if (!this.memory.RN)
            return false;
        const remoteMemory = Memory.rooms[this.memory.RN];
        if (remoteMemory.T !== 'remote')
            return false;
        if (remoteMemory.CN !== this.commune.name)
            return false;
        if (remoteMemory.data[RemoteData.abandon])
            return false;
        return true;
    }
    findRemote() {
        if (this.hasValidRemote())
            return true;
        const role = 'remoteDismantler';
        const remoteNamesByEfficacy = this.commune.remoteNamesBySourceEfficacy;
        for (const roomName of remoteNamesByEfficacy) {
            const roomMemory = Memory.rooms[roomName];
            if (roomMemory.data[RemoteData[role]] <= 0)
                continue;
            this.memory.RN = roomName;
            roomMemory.data[RemoteData[role]] -= 1;
            return true;
        }
        return false;
    }
    advancedDismantle() {
        const { room } = this;
        if (this.room.controller && this.room.controller.owner && Memory.allyPlayers.includes(this.room.controller.owner.username))
            return true;
        let target;
        let range;
        if (this.memory.dismantleTarget) {
            target = findObjectWithID(this.memory.dismantleTarget);
            if (target) {
                range = getRange(this.pos.x, target.pos.x, this.pos.y, target.pos.y);
                if (range > 1) {
                    this.createMoveRequest({
                        origin: this.pos,
                        goals: [
                            {
                                pos: target.pos,
                                range: 1,
                            },
                        ],
                        avoidEnemyRanges: true,
                    });
                    return true;
                }
                this.dismantle(target);
                return true;
            }
        }
        const targets = room.dismantleTargets;
        if (targets.length) {
            target = this.pos.findClosestByPath(targets, { ignoreRoads: true, ignoreCreeps: true });
            range = getRange(this.pos.x, target.pos.x, this.pos.y, target.pos.y);
            if (range > 1) {
                this.createMoveRequest({
                    origin: this.pos,
                    goals: [
                        {
                            pos: target.pos,
                            range: 1,
                        },
                    ],
                    avoidEnemyRanges: true,
                });
                return true;
            }
            this.memory.dismantleTarget = target.id;
            this.dismantle(target);
            return true;
        }
        return false;
    }
    static remoteDismantlerManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (!creep.findRemote()) {
                if (room.name === creep.commune.name) {
                    creep.advancedRecycle();
                    continue;
                }
                creep.createMoveRequest({
                    origin: creep.pos,
                    goals: [
                        {
                            pos: creep.commune.anchor,
                            range: 5,
                        },
                    ],
                });
                continue;
            }
            creep.say(creep.memory.RN);
            if (room.name === creep.memory.RN) {
                if (creep.advancedDismantle())
                    continue;
                continue;
            }
            creep.createMoveRequest({
                origin: creep.pos,
                goals: [
                    {
                        pos: new RoomPosition(25, 25, creep.memory.RN),
                        range: 25,
                    },
                ],
                typeWeights: {
                    enemy: Infinity,
                    ally: Infinity,
                    keeper: Infinity,
                    enemyRemote: Infinity,
                    allyRemote: Infinity,
                },
                avoidAbandonedRemotes: true,
            });
        }
    }
}

class Scout extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    preTickManager() {
        if (!this.memory.scT)
            return;
        this.commune.scoutTargets.add(this.memory.scT);
    }
    findScoutTarget() {
        if (this.memory.scT)
            return true;
        const scoutTarget = this.findBestScoutTarget();
        if (!scoutTarget)
            return false;
        this.commune.scoutTargets.add(this.memory.scT);
        return true;
    }
    findScoutTargets() {
        this.scoutedRooms = [];
        this.unscoutedRooms = [];
        const exits = Game.map.describeExits(this.room.name);
        for (const exitType in exits) {
            const roomName = exits[exitType];
            if (this.commune.scoutTargets.has(roomName))
                continue;
            if (Game.map.getRoomStatus(roomName).status !== Game.map.getRoomStatus(this.room.name).status)
                continue;
            if (Memory.rooms[roomName] && Memory.rooms[roomName].LST) {
                this.scoutedRooms.push(roomName);
                continue;
            }
            this.unscoutedRooms.push(roomName);
        }
    }
    findBestScoutTarget() {
        this.findScoutTargets();
        if (this.unscoutedRooms.length) {
            let lowestRange = Infinity;
            for (const roomName of this.unscoutedRooms) {
                const range = Game.map.getRoomLinearDistance(this.commune.name, roomName);
                if (range > lowestRange)
                    continue;
                lowestRange = range;
                this.memory.scT = roomName;
            }
            return this.memory.scT;
        }
        let lowestLastScoutTick = Infinity;
        for (const roomName of this.scoutedRooms) {
            const lastScoutTick = Memory.rooms[roomName].LST;
            if (lastScoutTick > lowestLastScoutTick)
                continue;
            lowestLastScoutTick = lastScoutTick;
            this.memory.scT = roomName;
        }
        return this.memory.scT;
    }
    advancedSignController() {
        const { room } = this;
        const { controller } = room;
        if (!controller)
            return true;
        if (room.name !== this.memory.siT)
            return true;
        this.say('🔤');
        let signMessage;
        if (room.memory.T === 'ally' || room.memory.T === 'enemy')
            return true;
        if (controller.reservation && controller.reservation.username !== Memory.me)
            return true;
        if (room.memory.T === 'commune') {
            if (controller.sign && communeSign.startsWith(controller.sign.text))
                return true;
            signMessage = communeSign;
        }
        else {
            if (controller.sign && nonCommuneSigns.includes(controller.sign.text))
                return true;
            signMessage = nonCommuneSigns[Math.floor(Math.random() * nonCommuneSigns.length)];
        }
        if (getRangeOfCoords(this.pos, controller.pos) > 1) {
            if (this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: room.controller.pos, range: 1 }],
                avoidEnemyRanges: true,
                plainCost: 1,
                swampCost: 1,
            }) === 'unpathable')
                return true;
            this.say(this.moveRequest.toString());
            return false;
        }
        return this.signController(room.controller, signMessage) === OK;
    }
    static scoutManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (creep.ticksToLive === CREEP_LIFE_TIME - 1)
                creep.notifyWhenAttacked(false);
            if (creep.memory.scT === room.name) {
                creep.say('👁️');
                room.advancedScout(creep.commune);
                cleanRoomMemory(room.name);
                delete creep.memory.scT;
            }
            if (!creep.findScoutTarget())
                return;
            creep.say(`🔭${creep.memory.scT.toString()}`);
            if (!creep.advancedSignController())
                continue;
            creep.memory.siT = creep.memory.scT;
            if (creep.createMoveRequest({
                origin: creep.pos,
                goals: [
                    {
                        pos: new RoomPosition(25, 25, creep.memory.scT),
                        range: 25,
                    },
                ],
                avoidEnemyRanges: true,
                plainCost: 1,
                swampCost: 1,
            }) === 'unpathable') {
                let roomMemory = Memory.rooms[creep.memory.scT];
                if (!roomMemory)
                    roomMemory = Memory.rooms[creep.memory.scT] = {};
                roomMemory.T = 'neutral';
                roomMemory.LST = Game.time;
                delete creep.memory.scT;
            }
        }
    }
}

class Vanguard extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    preTickManager() {
        if (this.dying)
            return;
        if (this.memory.SI !== undefined)
            this.room.creepsOfSourceAmount[this.memory.SI] += 1;
        const request = Memory.claimRequests[this.memory.TRN];
        if (!request)
            return;
        request.data[ClaimRequestData.vanguard] -=
            this.parts.work;
    }
    travelToSource(sourceIndex) {
        const { room } = this;
        this.say('🚬');
        const harvestPos = this.findSourcePos(this.memory.SI);
        if (!harvestPos)
            return true;
        if (getRangeOfCoords(this.pos, harvestPos) === 0)
            return false;
        this.say(`⏩ ${sourceIndex}`);
        this.createMoveRequest({
            origin: this.pos,
            goals: [
                {
                    pos: new RoomPosition(harvestPos.x, harvestPos.y, room.name),
                    range: 0,
                },
            ],
            avoidEnemyRanges: true,
        });
        return true;
    }
    upgradeRoom() {
        const { controller } = this.room;
        if (controller.level >= 2 && controller.ticksToDowngrade > 5000)
            return false;
        if (getRangeOfCoords(this.pos, controller.pos) > 3) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: controller.pos, range: 3 }],
            });
            return true;
        }
        this.upgradeController(controller);
        return true;
    }
    repairRampart() {
        if (this.room.cSites.rampart.length) {
            const cSite = this.room.cSites.rampart[0];
            if (getRangeOfCoords(this.pos, cSite.pos) > 3) {
                this.createMoveRequest({
                    origin: this.pos,
                    goals: [{ pos: cSite.pos, range: 3 }],
                });
                return true;
            }
            this.build(cSite);
            return true;
        }
        const rampartTarget = this.room.structures.rampart.find(rampart => rampart.hits < 20000);
        if (!rampartTarget)
            return false;
        if (getRangeOfCoords(this.pos, rampartTarget.pos) > 3) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: rampartTarget.pos, range: 3 }],
            });
            return true;
        }
        this.repair(rampartTarget);
        return true;
    }
    run() {
        this.say(this.memory.TRN);
        if (this.room.name === this.memory.TRN || !this.memory.TRN) {
            if (this.needsResources()) {
                if (!this.findOptimalSourceIndex())
                    return;
                const sourceIndex = this.memory.SI;
                if (this.travelToSource(sourceIndex))
                    return;
                if (this.advancedHarvestSource(this.room.sources[sourceIndex]))
                    return;
                return;
            }
            delete this.memory.SI;
            delete this.memory.PC;
            if (this.upgradeRoom())
                return;
            if (this.repairRampart())
                return;
            if (this.room.cSiteTarget && this.advancedBuildCSite(this.room.cSiteTarget))
                return;
            return;
        }
        if (this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: new RoomPosition(25, 25, this.memory.TRN), range: 25 }],
            avoidEnemyRanges: true,
            typeWeights: {
                enemy: Infinity,
                ally: Infinity,
                keeper: Infinity,
            },
        }) === 'unpathable') {
            const request = Memory.claimRequests[this.memory.TRN];
            if (request)
                request.data[ClaimRequestData.abandon] = 20000;
        }
    }
    static vanguardManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            creep.run();
        }
    }
}

class Duo {
    constructor(memberNames) {
        this.members = [];
        for (let i = 0; i < memberNames.length; i++) {
            const member = Game.creeps[memberNames[i]];
            this.members.push(member);
            member.squad = this;
            member.squadRan = true;
        }
        this.leader = this.members[0];
        if (!(this.leader.parts.attack + this.leader.parts.work) &&
            this.members[1].parts.attack + this.members[1].parts.work) {
            this.members.reverse();
            this.leader = this.members[0];
        }
    }
    get combatStrength() {
        if (this._combatStrength)
            return this._combatStrength;
        this._combatStrength = {
            dismantle: 0,
            melee: 0,
            ranged: 0,
            heal: 0,
        };
        for (const member of this.members) {
            for (const key in this._combatStrength) {
                const combatType = key;
                this._combatStrength[combatType] = member.combatStrength[combatType];
            }
        }
        return this._combatStrength;
    }
    get canMove() {
        for (const member of this.members)
            if (!member.canMove)
                return false;
        return true;
    }
    run() {
        if (this.runCombatRoom())
            return;
        this.advancedHeal();
        if (!this.getInFormation())
            return;
        this.leader.say('IF');
        if (this.leader.room.enemyDamageThreat && this.runCombat())
            return;
        this.createMoveRequest({
            origin: this.leader.pos,
            goals: [
                {
                    pos: new RoomPosition(25, 25, this.leader.memory.CRN),
                    range: 25,
                },
            ],
            typeWeights: {
                enemy: Infinity,
                ally: Infinity,
                keeper: Infinity,
                enemyRemote: 4,
                allyRemote: 4,
                neutral: 2,
            },
        });
    }
    runCombatRoom() {
        if (this.leader.room.name !== this.leader.memory.CRN)
            return false;
        if (!this.leader.room.enemyDamageThreat) {
            for (const member of this.members)
                member.runCombat();
            return true;
        }
        if (this.runCombat())
            return true;
        this.stompEnemyCSites();
        return true;
    }
    runCombat() {
        if (this.leader.memory.ST === 'rangedAttack')
            return this.advancedRangedAttack();
        if (this.leader.memory.ST === 'attack')
            return this.advancedAttack();
        return this.advancedDismantle();
    }
    getInFormation() {
        if (this.leader.room.name === this.members[1].room.name) {
            const range = getRangeOfCoords(this.leader.pos, this.members[1].pos);
            if (range === 1)
                return true;
            if (range > 2) {
                this.leader.createMoveRequest({
                    origin: this.leader.pos,
                    goals: [
                        {
                            pos: this.members[1].pos,
                            range: 1,
                        },
                    ],
                });
            }
        }
        this.leader.say('GIF');
        this.members[1].createMoveRequest({
            origin: this.members[1].pos,
            goals: [
                {
                    pos: this.leader.pos,
                    range: 1,
                },
            ],
        });
        return this.leader.isOnExit;
    }
    holdFormation() {
        for (const member of this.members)
            member.moved = 'moved';
    }
    createMoveRequest(opts, moveLeader = this.leader) {
        if (!this.canMove) {
            this.holdFormation();
            return;
        }
        this.leader.say('x');
        if (!moveLeader.createMoveRequest(opts))
            return;
        if (getRangeOfCoords(this.leader.pos, this.members[1].pos) > 1) {
            this.members[1].createMoveRequest({
                origin: this.members[1].pos,
                goals: [
                    {
                        pos: this.leader.pos,
                        range: 1,
                    },
                ],
            });
            return;
        }
        this.members[1].assignMoveRequest(moveLeader.pos);
    }
    advancedRangedAttack() {
        const { room } = this.leader;
        let enemyAttackers = room.enemyAttackers.filter(function (creep) {
            return !creep.isOnExit;
        });
        if (!room.enemyAttackers.length)
            enemyAttackers = room.enemyAttackers;
        if (!enemyAttackers.length) {
            let enemyCreeps = room.enemyCreeps.filter(function (creep) {
                return !creep.isOnExit;
            });
            if (!room.enemyCreeps.length)
                enemyCreeps = room.enemyCreeps;
            if (!enemyCreeps.length) {
                return this.rangedAttackStructures();
            }
            if (this.leader.passiveHeal())
                return true;
            this.leader.say('EC');
            const enemyCreep = findClosestObject(this.leader.pos, enemyCreeps);
            if (Memory.roomVisuals)
                this.leader.room.visual.line(this.leader.pos, enemyCreep.pos, {
                    color: customColors.green,
                    opacity: 0.3,
                });
            const range = getRange(this.leader.pos.x, enemyCreep.pos.x, this.leader.pos.y, enemyCreep.pos.y);
            if (range > 1) {
                this.leader.rangedAttack(enemyCreep);
                this.createMoveRequest({
                    origin: this.leader.pos,
                    goals: [{ pos: enemyCreep.pos, range: 1 }],
                });
                return true;
            }
            this.leader.rangedMassAttack();
            if (enemyCreep.canMove && this.canMove) {
                this.leader.assignMoveRequest(enemyCreep.pos);
                this.members[1].assignMoveRequest(this.leader.pos);
            }
            return true;
        }
        const enemyAttacker = findClosestObject(this.leader.pos, enemyAttackers);
        if (Memory.roomVisuals)
            this.leader.room.visual.line(this.leader.pos, enemyAttacker.pos, {
                color: customColors.green,
                opacity: 0.3,
            });
        const range = getRange(this.leader.pos.x, enemyAttacker.pos.x, this.leader.pos.y, enemyAttacker.pos.y);
        if (this.combatStrength.heal + this.combatStrength.ranged <
            enemyAttacker.combatStrength.heal + enemyAttacker.combatStrength.ranged) {
            if (range === 4) {
                return true;
            }
            if (range <= 3) {
                this.leader.rangedAttack(enemyAttacker);
                this.createMoveRequest({
                    origin: this.leader.pos,
                    goals: [{ pos: enemyAttacker.pos, range: 1 }],
                    flee: true,
                });
            }
            return true;
        }
        if (range > 3) {
            this.leader.passiveHeal();
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: enemyAttacker.pos, range: 1 }],
            });
            return true;
        }
        this.leader.say('AEA');
        if (range === 1)
            this.leader.rangedMassAttack();
        else
            this.leader.rangedAttack(enemyAttacker);
        if (range > 1) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: enemyAttacker.pos, range: 1 }],
            });
            return true;
        }
        if (enemyAttacker.canMove && this.canMove) {
            this.leader.assignMoveRequest(enemyAttacker.pos);
            this.members[1].assignMoveRequest(this.leader.pos);
        }
        return true;
    }
    rangedAttackStructures() {
        const structures = this.leader.room.combatStructureTargets;
        if (!structures.length)
            return false;
        let structure = findClosestObject(this.leader.pos, structures);
        if (Memory.roomVisuals)
            this.leader.room.visual.line(this.leader.pos, structure.pos, { color: customColors.green, opacity: 0.3 });
        if (getRange(this.leader.pos.x, structure.pos.x, this.leader.pos.y, structure.pos.y) > 3) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: structure.pos, range: 3 }],
            });
            return false;
        }
        if (this.leader.rangedAttack(structure) !== OK)
            return false;
        structure.nextHits -= this.leader.parts.ranged_attack * RANGED_ATTACK_POWER;
        if (structure.nextHits > 0)
            return true;
        structures.splice(structures.indexOf(structure), 1);
        if (!structures.length)
            return true;
        structure = findClosestObject(this.leader.pos, structures);
        if (getRange(this.leader.pos.x, structure.pos.y, this.leader.pos.y, structure.pos.y) > 3) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: structure.pos, range: 3 }],
            });
        }
        return true;
    }
    advancedAttack() {
        const { room } = this.leader;
        let enemyAttackers = room.enemyAttackers.filter(function (creep) {
            return !creep.isOnExit;
        });
        if (!enemyAttackers.length)
            enemyAttackers = room.enemyAttackers;
        if (!enemyAttackers.length) {
            let enemyCreeps = room.enemyCreeps.filter(function (creep) {
                return !creep.isOnExit;
            });
            if (!enemyCreeps.length)
                enemyCreeps = room.enemyCreeps;
            if (!enemyCreeps.length)
                return this.attackStructures();
            this.leader.say('EC');
            const enemyCreep = findClosestObject(this.leader.pos, enemyCreeps);
            if (Memory.roomVisuals)
                this.leader.room.visual.line(this.leader.pos, enemyCreep.pos, {
                    color: customColors.green,
                    opacity: 0.3,
                });
            if (getRange(this.leader.pos.x, enemyCreep.pos.x, this.leader.pos.y, enemyCreep.pos.y) > 1) {
                this.createMoveRequest({
                    origin: this.leader.pos,
                    goals: [{ pos: enemyCreep.pos, range: 1 }],
                });
                return true;
            }
            this.leader.attack(enemyCreep);
            if (enemyCreep.canMove && this.canMove) {
                this.leader.assignMoveRequest(enemyCreep.pos);
                this.members[1].assignMoveRequest(this.leader.pos);
            }
            return true;
        }
        const enemyAttacker = findClosestObject(this.leader.pos, enemyAttackers);
        if (Memory.roomVisuals)
            this.leader.room.visual.line(this.leader.pos, enemyAttacker.pos, {
                color: customColors.green,
                opacity: 0.3,
            });
        if (getRange(this.leader.pos.x, enemyAttacker.pos.x, this.leader.pos.y, enemyAttacker.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: enemyAttacker.pos, range: 1 }],
            });
            return true;
        }
        this.leader.attack(enemyAttacker);
        if (enemyAttacker.canMove && this.canMove) {
            this.leader.assignMoveRequest(enemyAttacker.pos);
            this.members[1].assignMoveRequest(this.leader.pos);
        }
        return true;
    }
    attackStructures() {
        const structures = this.leader.room.combatStructureTargets;
        if (!structures.length)
            return false;
        let structure = findClosestObject(this.leader.pos, structures);
        if (Memory.roomVisuals)
            this.leader.room.visual.line(this.leader.pos, structure.pos, { color: customColors.green, opacity: 0.3 });
        if (getRange(this.leader.pos.x, structure.pos.x, this.leader.pos.y, structure.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: structure.pos, range: 1 }],
            });
            return false;
        }
        if (this.leader.attack(structure) !== OK)
            return false;
        structure.nextHits -= this.leader.parts.attack * ATTACK_POWER;
        if (structure.nextHits > 0)
            return true;
        structures.splice(structures.indexOf(structure), 1);
        if (!structures.length)
            return true;
        structure = findClosestObject(this.leader.pos, structures);
        if (getRange(this.leader.pos.x, structure.pos.y, this.leader.pos.y, structure.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: structure.pos, range: 1 }],
            });
        }
        return true;
    }
    advancedDismantle() {
        const structures = this.leader.room.combatStructureTargets;
        if (!structures.length)
            return false;
        let structure = findClosestObject(this.leader.pos, structures);
        if (Memory.roomVisuals)
            this.leader.room.visual.line(this.leader.pos, structure.pos, { color: customColors.green, opacity: 0.3 });
        if (getRange(this.leader.pos.x, structure.pos.x, this.leader.pos.y, structure.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: structure.pos, range: 1 }],
            });
            return true;
        }
        if (this.leader.dismantle(structure) !== OK)
            return false;
        structure.nextHits -= this.leader.parts.work * DISMANTLE_POWER;
        if (structure.nextHits > 0)
            return true;
        structures.splice(structures.indexOf(structure), 1);
        if (!structures.length)
            return true;
        structure = findClosestObject(this.leader.pos, structures);
        if (getRange(this.leader.pos.x, structure.pos.y, this.leader.pos.y, structure.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: structure.pos, range: 1 }],
            });
        }
        return true;
    }
    stompEnemyCSites() {
        if (this.leader.room.controller && this.leader.room.controller.safeMode)
            return false;
        const enemyCSites = this.leader.room.enemyCSites.filter(cSite => cSite.progress > 0 && !isCoordExit(cSite.pos));
        if (!enemyCSites.length)
            return false;
        const enemyCSite = findClosestObject(this.leader.pos, enemyCSites);
        this.createMoveRequest({
            origin: this.leader.pos,
            goals: [{ pos: enemyCSite.pos, range: 0 }],
        });
        return true;
    }
    advancedHeal() {
        if (this.members[1].hits < this.members[1].hitsMax) {
            this.members[1].heal(this.members[1]);
            return;
        }
        if (!this.leader.room.enemyAttackers.length) {
            if (this.leader.hits < this.leader.hitsMax)
                this.members[1].heal(this.leader);
            return;
        }
        this.members[1].heal(this.leader);
    }
}

class Quad {
    constructor(memberNames) {
        this.members = [];
        for (const memberName of memberNames) {
            const member = Game.creeps[memberName];
            this.members.push(member);
            member.squad = this;
            member.squadRan = true;
        }
        this.leader = this.members[0];
        this.sortMembersByCoord();
        if (Memory.combatRequests[this.leader.memory.CRN])
            Memory.combatRequests[this.leader.memory.CRN].data[CombatRequestData.quads] += 1;
    }
    get combatStrength() {
        if (this._combatStrength)
            return this._combatStrength;
        this._combatStrength = {
            dismantle: 0,
            melee: 0,
            ranged: 0,
            heal: 0,
        };
        for (const member of this.members) {
            for (const key in this._combatStrength) {
                const combatType = key;
                this._combatStrength[combatType] = member.combatStrength[combatType];
            }
        }
        return this._combatStrength;
    }
    get enemyThreatCoords() {
        if (this._enemyThreatCoords)
            return this._enemyThreatCoords;
        this._enemyThreatCoords = new Set();
        const enemyAttackers = [];
        const enemyRangedAttackers = [];
        for (const enemyCreep of this.leader.room.enemyAttackers) {
            if (this.combatStrength.heal + this.combatStrength.melee + this.combatStrength.ranged >
                (enemyCreep.combatStrength.heal + enemyCreep.combatStrength.melee + enemyCreep.combatStrength.ranged) *
                    1.2)
                continue;
            if (enemyCreep.parts.ranged_attack) {
                enemyRangedAttackers.push(enemyCreep);
                continue;
            }
            enemyAttackers.push(enemyCreep);
        }
        for (const enemyAttacker of enemyAttackers) {
            const coords = findCoordsInsideRect(enemyAttacker.pos.x - 2, enemyAttacker.pos.y - 2, enemyAttacker.pos.x + 2, enemyAttacker.pos.y + 2);
            for (const coord of coords)
                this._enemyThreatCoords.add(packCoord(coord));
        }
        for (const enemyAttacker of enemyRangedAttackers) {
            const coords = findCoordsInsideRect(enemyAttacker.pos.x - 3, enemyAttacker.pos.y - 3, enemyAttacker.pos.x + 3, enemyAttacker.pos.y + 3);
            for (const coord of coords)
                this._enemyThreatCoords.add(packCoord(coord));
        }
        for (const packedCoord of this._enemyThreatCoords) {
            const coord = unpackCoord(packedCoord);
            this.leader.room.visual.circle(coord.x, coord.y, { fill: customColors.red });
        }
        return this._enemyThreatCoords;
    }
    get enemyThreatGoals() {
        this._enemyThreatGoals = [];
        for (const enemyCreep of this.leader.room.enemyAttackers) {
            if ((enemyCreep.combatStrength.ranged + enemyCreep.combatStrength.melee + enemyCreep.combatStrength.heal) *
                1.2 <
                this.combatStrength.ranged + this.combatStrength.melee + this.combatStrength.heal)
                continue;
            if (enemyCreep.parts.ranged_attack) {
                this._enemyThreatGoals.push({
                    pos: enemyCreep.pos,
                    range: 5,
                });
                continue;
            }
            if (!enemyCreep.parts.attack)
                continue;
            this._enemyThreatGoals.push({
                pos: enemyCreep.pos,
                range: 3,
            });
        }
        return this._enemyThreatGoals;
    }
    get canMove() {
        for (const member of this.members) {
            if (!member.canMove)
                return false;
        }
        return true;
    }
    get willMove() {
        for (const member of this.members) {
            if (!member.canMove)
                return false;
            if (member.moveRequest)
                return false;
        }
        return true;
    }
    sortMembersByCoord() {
        const unsortedMembersByCoord = {};
        for (const member of this.members) {
            unsortedMembersByCoord[packCoord(member.pos)] = member;
        }
        this.membersByCoord = {
            [packCoord(this.leader.pos)]: this.leader,
        };
        const packedMemberCoords = [
            packXYAsCoord(this.leader.pos.x, this.leader.pos.y + 1),
            packXYAsCoord(this.leader.pos.x + 1, this.leader.pos.y + 1),
            packXYAsCoord(this.leader.pos.x + 1, this.leader.pos.y),
        ];
        for (const packedCoord of packedMemberCoords) {
            const member = unsortedMembersByCoord[packedCoord];
            if (!member)
                continue;
            this.membersByCoord[packedCoord] = member;
        }
    }
    run() {
        this.leader.say(this.type);
        this.passiveHealQuad();
        if (this.runCombatRoom())
            return;
        if (!this.getInFormation()) {
            this.passiveRangedAttack();
            return;
        }
        this.leader.say('IF');
        if (this.leader.room.enemyDamageThreat && this.runCombat())
            return;
        this.passiveRangedAttack();
        this.createMoveRequest({
            goals: [
                {
                    pos: new RoomPosition(25, 25, this.leader.memory.CRN),
                    range: 25,
                },
            ],
            typeWeights: {
                enemy: Infinity,
                ally: Infinity,
                keeper: 5,
                enemyRemote: 5,
                allyRemote: 5,
                neutral: 2,
            },
        });
    }
    runCombatRoom() {
        if (this.leader.room.name !== this.leader.memory.CRN)
            return false;
        if (!this.getInFormation()) {
            this.passiveRangedAttack();
            return true;
        }
        this.runCombat();
        return true;
    }
    runCombat() {
        if (this.leader.memory.ST === 'rangedAttack') {
            this.passiveRangedAttack();
            const nearbyThreat = this.leader.room.enemyAttackers.find(enemyCreep => this.findMinRange(enemyCreep.pos) <= 4 &&
                (enemyCreep.combatStrength.ranged || enemyCreep.combatStrength.melee));
            if (nearbyThreat)
                this.advancedTransform();
            this.rangedKite();
            if (this.bulldoze())
                return true;
            if (this.advancedRangedAttack())
                return true;
            if (this.rangedAttackStructures())
                return true;
            return false;
        }
        if (this.leader.memory.ST === 'attack') {
            if (this.advancedAttack())
                return false;
        }
        this.advancedDismantle();
        return false;
    }
    getInFormation() {
        if (this.leader.isOnExit)
            return true;
        if (this.leader.room.quadCostMatrix.get(this.leader.pos.x, this.leader.pos.y) >= 254) {
            return true;
        }
        let inFormation = true;
        if (this.type === 'transport') {
            let lastMember = this.leader;
            for (let i = 1; i < this.members.length; i++) {
                const member = this.members[i];
                if (getRange(member.pos.x, lastMember.pos.x, member.pos.y, lastMember.pos.y) <= 1 &&
                    member.room.name === lastMember.room.name) {
                    lastMember = member;
                    continue;
                }
                member.createMoveRequest({
                    goals: [
                        {
                            pos: lastMember.pos,
                            range: 1,
                        },
                    ],
                });
                if (member.isOnExit)
                    continue;
                if (member.moveRequest === packCoord(this.leader.pos)) ;
                lastMember = member;
                inFormation = false;
            }
            return inFormation;
        }
        let newLeader;
        let newLeaderIndex;
        for (let i = 1; i < this.members.length; i++) {
            const offset = quadAttackMemberOffsets[i];
            const goalCoord = {
                x: this.leader.pos.x + offset.x,
                y: this.leader.pos.y + offset.y,
            };
            if (isCoordExit(goalCoord))
                return true;
            if (!doesCoordExist(goalCoord))
                return true;
            const goalPos = new RoomPosition(goalCoord.x, goalCoord.y, this.leader.room.name);
            const member = this.members[i];
            if (arePositionsEqual(member.pos, goalPos))
                continue;
            member.createMoveRequest({
                goals: [
                    {
                        pos: goalPos,
                        range: 0,
                    },
                ],
            });
            if (member.moveRequest === packCoord(this.leader.pos)) {
                newLeader = member;
                newLeaderIndex = i;
            }
            inFormation = false;
        }
        if (newLeader) {
            this.members[newLeaderIndex] = this.leader;
            this.members[0] = newLeader;
            this.leader = newLeader;
            const memberNames = [];
            for (const member of this.members) {
                memberNames.push(member.name);
            }
            for (const member of this.members) {
                member.memory.SMNs = memberNames;
            }
        }
        return inFormation;
    }
    holdFormation() {
        for (const member of this.members)
            member.moved = 'moved';
    }
    createMoveRequest(opts, moveLeader = this.leader) {
        if (!this.willMove) {
            for (const member1 of this.members) {
                if (!member1.fatigue)
                    continue;
                for (const member2 of this.members) {
                    if (member2.name === member1.name)
                        continue;
                    member2.pull(member1);
                }
            }
            return false;
        }
        if (this.type === 'transport') {
            if (!moveLeader.createMoveRequest(opts))
                return false;
            let lastMember = moveLeader;
            for (let i = 1; i < this.members.length; i++) {
                const member = this.members[i];
                member.assignMoveRequest(lastMember.pos);
                lastMember = member;
            }
            return true;
        }
        opts.weightCostMatrixes = ['quadCostMatrix'];
        if (moveLeader.createMoveRequest(opts) !== true)
            return false;
        if (!this.membersAttackMove())
            return false;
        return true;
    }
    membersAttackMove(moveLeader = this.leader) {
        const moveRequestCoord = unpackCoord(moveLeader.moveRequest);
        const moveLeaderOffset = {
            x: moveLeader.pos.x - moveRequestCoord.x,
            y: moveLeader.pos.y - moveRequestCoord.y,
        };
        for (let i = 1; i < this.members.length; i++) {
            const member = this.members[i];
            const goalCoord = {
                x: member.pos.x - moveLeaderOffset.x,
                y: member.pos.y - moveLeaderOffset.y,
            };
            if (!doesCoordExist(goalCoord))
                continue;
            if (member.room.quadCostMatrix.get(goalCoord.x, goalCoord.y) >= 255)
                continue;
            member.assignMoveRequest(goalCoord);
        }
        return true;
    }
    transform(transformType) {
        const transformOffsets = quadTransformOffsets[transformType];
        const newIndexes = quadTransformIndexes[transformType];
        const membersByCoordArray = Object.values(this.membersByCoord);
        const newMemberNames = [];
        for (let i = 0; i < membersByCoordArray.length; i++) {
            const member = membersByCoordArray[i];
            if (!member)
                continue;
            const offset = transformOffsets[i];
            member.assignMoveRequest({ x: member.pos.x + offset.x, y: member.pos.y + offset.y });
            const newIndex = newIndexes[i];
            newMemberNames[newIndex] = member.name;
        }
        for (const member of this.members) {
            member.memory.SMNs = newMemberNames;
        }
        return true;
    }
    randomTransform() {
        const quadTransformKeys = Object.keys(quadTransformIndexes);
        return this.transform(quadTransformKeys[Math.floor(Math.random() * quadTransformKeys.length)]);
    }
    scoreTransform(transformType) {
        let score = 0;
        const transformOffsets = quadTransformOffsets[transformType];
        const membersByCoordArray = Object.values(this.membersByCoord);
        for (let i = 0; i < membersByCoordArray.length; i++) {
            const member = membersByCoordArray[i];
            if (!member)
                continue;
            const offset = transformOffsets[i];
            score += (1 - member.defenceStrength) * 5000;
            const range = getRange(this.target.pos.x, member.pos.x + offset.x, this.target.pos.y, member.pos.y + offset.y);
            if (this.leader.memory.ST === 'rangedAttack') {
                score += rangedMassAttackMultiplierByRange[range] * member.combatStrength.ranged || 0;
                continue;
            }
            if (this.leader.memory.ST === 'attack') {
                score += member.combatStrength.melee;
                continue;
            }
            score += member.combatStrength.dismantle;
            continue;
        }
        customLog(transformType, score);
        return score;
    }
    advancedTransform() {
        if (!this.willMove)
            return false;
        if (!this.target)
            return false;
        let highestScore = 0;
        let bestTransformName;
        for (const transformType in quadTransformOffsets) {
            const score = this.scoreTransform(transformType);
            if (score <= highestScore)
                continue;
            highestScore = score;
            bestTransformName = transformType;
        }
        customLog('FOUND TRANSFORM', bestTransformName);
        if (bestTransformName === 'none')
            return true;
        return this.transform(bestTransformName);
    }
    passiveHealQuad() {
        let lowestHits = Infinity;
        let lowestHitsMember;
        for (const member of this.members) {
            if (member.hits === member.hitsMax)
                continue;
            if (member.hits >= lowestHits)
                continue;
            lowestHits = member.hits;
            lowestHitsMember = member;
        }
        if (lowestHitsMember) {
            for (const member of this.members) {
                if (member.worked)
                    continue;
                member.heal(lowestHitsMember);
                member.worked = true;
            }
            return;
        }
        if (this.preHeal())
            return;
    }
    shouldPreHeal() {
        if (this.leader.room.enemyAttackers.find(enemyCreep => (enemyCreep.combatStrength.ranged && this.findMinRange(enemyCreep.pos) <= 3) ||
            (enemyCreep.combatStrength.melee && this.findMinRange(enemyCreep.pos) <= 1)))
            return true;
        const controller = this.leader.room.controller;
        if (!controller)
            return false;
        if (!controller.owner)
            return false;
        if (controller.owner.username === Memory.me)
            return false;
        if (Memory.allyPlayers.includes(controller.owner.username))
            return false;
        if (!this.leader.room.structures.tower.length)
            return false;
        return true;
    }
    preHeal() {
        if (!this.shouldPreHeal())
            return false;
        const notHealedMembers = Array.from(this.members);
        for (const member of this.members) {
            const memberIndex = Math.floor(Math.random() * notHealedMembers.length);
            const memberHealer = notHealedMembers[memberIndex];
            memberHealer.heal(member);
            memberHealer.worked = true;
            notHealedMembers.splice(memberIndex, 1);
        }
        return true;
    }
    passiveRangedAttack() {
        const attackingMemberNames = new Set(this.leader.memory.SMNs);
        const enemyTargetsWithDamage = new Map();
        const enemyTargetsWithAntifa = new Map();
        for (const enemyCreep of this.leader.room.unprotectedEnemyCreeps) {
            const memberIDsInRange = [];
            let netDamage = -1 * enemyCreep.combatStrength.heal;
            for (const memberName of attackingMemberNames) {
                const member = Game.creeps[memberName];
                if (getRangeOfCoords(member.pos, enemyCreep.pos) > 3)
                    continue;
                netDamage += member.combatStrength.ranged;
                memberIDsInRange.push(member.id);
            }
            if (!memberIDsInRange.length)
                continue;
            enemyTargetsWithDamage.set(enemyCreep.id, netDamage);
            enemyTargetsWithAntifa.set(enemyCreep.id, memberIDsInRange);
            if (memberIDsInRange.length === this.members.length)
                break;
        }
        const enemyTargetsByDamage = Array.from(enemyTargetsWithAntifa.keys()).sort((a, b) => {
            return enemyTargetsWithDamage.get(a) - enemyTargetsWithDamage.get(b);
        });
        for (const enemyCreepID of enemyTargetsByDamage) {
            const enemyCreep = findObjectWithID(enemyCreepID);
            for (const memberID of enemyTargetsWithAntifa.get(enemyCreepID)) {
                const member = findObjectWithID(memberID);
                if (!attackingMemberNames.has(member.name))
                    continue;
                if (getRangeOfCoords(member.pos, enemyCreep.pos) > 1)
                    member.rangedAttack(enemyCreep);
                else
                    member.rangedMassAttack();
                member.ranged = true;
                attackingMemberNames.delete(member.name);
            }
            if (!attackingMemberNames.size)
                return;
        }
        if (!this.target)
            return;
        for (const memberName of attackingMemberNames) {
            const member = Game.creeps[memberName];
            const range = getRangeOfCoords(member.pos, this.target.pos);
            if (range > 3)
                continue;
            if (range === 1)
                member.rangedMassAttack();
            else
                member.rangedAttack(this.target);
        }
    }
    advancedRangedAttack() {
        const { room } = this.leader;
        let enemyAttackers = room.enemyAttackers.filter(function (creep) {
            return !creep.isOnExit;
        });
        if (!room.enemyAttackers.length)
            enemyAttackers = room.enemyAttackers;
        if (!enemyAttackers.length) {
            let enemyCreeps = room.enemyCreeps.filter(function (creep) {
                return !creep.isOnExit;
            });
            if (!room.enemyCreeps.length)
                enemyCreeps = room.enemyCreeps;
            this.leader.say('EC');
            const enemyCreep = findClosestObject(this.leader.pos, enemyCreeps);
            if (Memory.roomVisuals)
                this.leader.room.visual.line(this.leader.pos, enemyCreep.pos, {
                    color: customColors.green,
                    opacity: 0.3,
                });
            const range = this.findMinRange(enemyCreep.pos);
            this.leader.say(range.toString());
            if (range <= 3) {
                this.target = enemyCreep;
                this.passiveRangedAttack();
            }
            if (range > 1) {
                this.createMoveRequest({
                    origin: this.leader.pos,
                    goals: [{ pos: enemyCreep.pos, range: 1 }],
                });
                return true;
            }
            return true;
        }
        const enemyAttacker = findClosestObject(this.leader.pos, enemyAttackers);
        if (Memory.roomVisuals)
            this.leader.room.visual.line(this.leader.pos, enemyAttacker.pos, {
                color: customColors.green,
                opacity: 0.3,
            });
        const range = this.findMinRange(enemyAttacker.pos);
        if (range > 3) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: enemyAttacker.pos, range: 1 }],
            });
            return true;
        }
        this.leader.say('AEA');
        this.target = enemyAttacker;
        this.passiveRangedAttack();
        if (range > 1) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: enemyAttacker.pos, range: 1 }],
            });
            return true;
        }
        return true;
    }
    bulldoze() {
        const request = Memory.combatRequests[this.leader.memory.CRN];
        if (!request)
            return false;
        if (request.T === 'defend')
            return false;
        let bulldozeTarget;
        this.leader.memory.QBTIDs = [];
        let quadBulldozeTargetIDs = this.leader.memory.QBTIDs || [];
        for (let i = 0; i < quadBulldozeTargetIDs.length; i++) {
            const ID = quadBulldozeTargetIDs[i];
            const structure = findObjectWithID(ID);
            if (!structure) {
                quadBulldozeTargetIDs.splice(i, 1);
                continue;
            }
            bulldozeTarget = structure;
        }
        if (!bulldozeTarget) {
            let bulldozeTargets = [];
            bulldozeTargets = bulldozeTargets.concat(this.leader.room.structures.spawn);
            bulldozeTargets = bulldozeTargets.concat(this.leader.room.structures.tower);
            if (!bulldozeTargets.length)
                return false;
            bulldozeTarget = findClosestObject(this.leader.pos, bulldozeTargets);
            quadBulldozeTargetIDs = this.leader.findQuadBulldozeTargets(bulldozeTarget.pos);
            if (!quadBulldozeTargetIDs.length)
                return false;
            bulldozeTarget = findObjectWithID(quadBulldozeTargetIDs[0]);
        }
        this.leader.room.targetVisual(this.leader.pos, bulldozeTarget.pos, true);
        const range = this.findMinRange(bulldozeTarget.pos);
        if (range > 1) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: bulldozeTarget.pos, range: 1 }],
            });
        }
        if (range > 3)
            return true;
        this.target = bulldozeTarget;
        this.passiveRangedAttack();
        return true;
    }
    rangedAttackStructures() {
        const request = Memory.combatRequests[this.leader.memory.CRN];
        if (!request)
            return false;
        if (request.T === 'defend')
            return false;
        const structures = this.leader.room.combatStructureTargets;
        if (!structures.length)
            return false;
        let structure = findClosestObject(this.leader.pos, structures);
        if (Memory.roomVisuals)
            this.leader.room.visual.line(this.leader.pos, structure.pos, { color: customColors.green, opacity: 0.3 });
        const range = this.findMinRange(structure.pos);
        if (range > 1) {
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: [{ pos: structure.pos, range: 1 }],
            });
        }
        if (range > 3)
            return true;
        this.target = structure;
        this.passiveRangedAttack();
        return true;
    }
    advancedAttack() {
        return true;
    }
    advancedDismantle() {
        return true;
    }
    rangedKite() {
        if (!this.willMove)
            return;
        for (const member of this.members) {
            if (!this.enemyThreatCoords.has(packCoord(member.pos)))
                continue;
            this.leader.room.errorVisual(member.pos, true);
            this.createMoveRequest({
                origin: this.leader.pos,
                goals: this.leader.room.enemyThreatGoals,
                flee: true,
            });
            return;
        }
    }
    findMinRange(coord) {
        let minRange = Infinity;
        for (const member of this.members) {
            const range = getRangeOfCoords(member.pos, coord);
            if (range < minRange)
                minRange = range;
        }
        return minRange;
    }
}

class Antifa extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    preTickManager() {
        if (internationalManager.creepsByCombatRequest[this.memory.CRN])
            internationalManager.creepsByCombatRequest[this.memory.CRN][this.role].push(this.name);
        if (this.spawning)
            return;
        if (!this.memory.SS)
            return;
        if (this.memory.SF)
            return;
        this.memory.SMNs = [this.name];
        this.room.squadRequests.add(this.name);
    }
    runSquad() {
        if (!this.memory.SS)
            return false;
        if (this.memory.SF && this.memory.SMNs.length === 1)
            return false;
        if (this.squadRan)
            return true;
        if (!this.findSquad()) {
            if (Memory.combatRequests[this.memory.CRN])
                this.activeRenew();
            return true;
        }
        this.squad.run();
        return true;
    }
    findSquad() {
        if (this.squad)
            return true;
        if (this.memory.SF) {
            const memberNames = [];
            for (const memberName of this.memory.SMNs) {
                if (!Game.creeps[memberName])
                    continue;
                memberNames.push(memberName);
            }
            for (const memberName of memberNames) {
                Memory.creeps[memberName].SMNs = memberNames;
            }
            if (memberNames.length === 1)
                return false;
            this.createSquad(memberNames);
            return true;
        }
        for (const requestingCreepName of this.room.squadRequests) {
            if (requestingCreepName === this.name)
                continue;
            const requestingCreep = Game.creeps[requestingCreepName];
            if (this.memory.ST !== requestingCreep.memory.ST)
                continue;
            if (!allowedSquadCombinations[this.memory.SS][this.role].has(requestingCreep.role))
                continue;
            this.memory.SMNs.push(requestingCreepName);
            if (this.memory.SMNs.length === this.memory.SS)
                break;
        }
        if (this.memory.SMNs.length !== this.memory.SS)
            return false;
        const memberNames = [];
        for (const memberName of this.memory.SMNs) {
            this.room.squadRequests.delete(memberName);
            const memberMemory = Memory.creeps[memberName];
            memberMemory.SMNs = this.memory.SMNs;
            memberMemory.SF = true;
            memberNames.push(memberName);
        }
        this.createSquad(memberNames);
        return true;
    }
    createSquad(memberNames) {
        if (this.memory.SMNs.length === 2) {
            this.squad = new Duo(memberNames);
            return;
        }
        this.squad = new Quad(memberNames);
        return;
    }
    runSingle() {
        const { room } = this;
        this.say('S');
        if (this.memory.CRN === room.name) {
            if (this.runCombat())
                return;
            this.stompEnemyCSites();
            return;
        }
        this.passiveRangedAttack();
        this.passiveHeal();
        if (this.commune.name === this.name) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [
                    {
                        pos: new RoomPosition(25, 25, this.memory.CRN),
                        range: 25,
                    },
                ],
                typeWeights: {
                    enemy: Infinity,
                    ally: Infinity,
                    keeper: Infinity,
                },
            });
            return;
        }
        this.createMoveRequest({
            origin: this.pos,
            goals: [
                {
                    pos: new RoomPosition(25, 25, this.memory.CRN),
                    range: 25,
                },
            ],
            typeWeights: {
                enemy: Infinity,
                ally: Infinity,
                keeper: Infinity,
            },
        });
    }
    runCombat() {
        if (this.role === 'antifaRangedAttacker')
            return this.advancedRangedAttack();
        if (this.role === 'antifaAttacker')
            return this.advancedAttack();
        return this.advancedDismantle();
    }
    advancedRangedAttack() {
        const { room } = this;
        let enemyAttackers = room.enemyAttackers.filter(function (creep) {
            return !creep.isOnExit;
        });
        if (!enemyAttackers.length)
            enemyAttackers = room.enemyAttackers;
        if (!enemyAttackers.length) {
            let enemyCreeps = room.enemyCreeps.filter(function (creep) {
                return !creep.isOnExit;
            });
            if (!enemyCreeps.length)
                enemyCreeps = room.enemyCreeps;
            if (!enemyCreeps.length) {
                if (this.aggressiveHeal())
                    return true;
                return this.rangedAttackStructures();
            }
            if (this.passiveHeal())
                return true;
            this.say('EC');
            const enemyCreep = findClosestObject(this.pos, enemyCreeps);
            if (Memory.roomVisuals)
                this.room.visual.line(this.pos, enemyCreep.pos, { color: customColors.green, opacity: 0.3 });
            const range = getRange(this.pos.x, enemyCreep.pos.x, this.pos.y, enemyCreep.pos.y);
            if (range > 1) {
                this.rangedAttack(enemyCreep);
                this.createMoveRequest({
                    origin: this.pos,
                    goals: [{ pos: enemyCreep.pos, range: 1 }],
                });
                return true;
            }
            this.rangedMassAttack();
            if (enemyCreep.canMove && !enemyCreep.isOnExit)
                this.assignMoveRequest(enemyCreep.pos);
            return true;
        }
        const enemyAttacker = findClosestObject(this.pos, enemyAttackers);
        if (Memory.roomVisuals)
            this.room.visual.line(this.pos, enemyAttacker.pos, { color: customColors.green, opacity: 0.3 });
        const range = getRange(this.pos.x, enemyAttacker.pos.x, this.pos.y, enemyAttacker.pos.y);
        if (range > 3) {
            this.passiveHeal();
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: enemyAttacker.pos, range: 1 }],
            });
            return true;
        }
        this.say('AEA');
        this.heal(this);
        if (range === 1)
            this.rangedMassAttack();
        else
            this.rangedAttack(enemyAttacker);
        if (this.combatStrength.heal < enemyAttacker.combatStrength.ranged) {
            if (range === 3)
                return true;
            if (range <= 2) {
                this.createMoveRequest({
                    origin: this.pos,
                    goals: [{ pos: enemyAttacker.pos, range: 1 }],
                    flee: true,
                });
            }
            return true;
        }
        if (range > 1) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: enemyAttacker.pos, range: 1 }],
            });
            return true;
        }
        if (enemyAttacker.canMove)
            this.assignMoveRequest(enemyAttacker.pos);
        return true;
    }
    rangedAttackStructures() {
        this.say('RAS');
        const structures = this.room.combatStructureTargets;
        if (!structures.length)
            return false;
        let structure = findClosestObject(this.pos, structures);
        if (Memory.roomVisuals)
            this.room.visual.line(this.pos, structure.pos, { color: customColors.green, opacity: 0.3 });
        if (getRange(this.pos.x, structure.pos.x, this.pos.y, structure.pos.y) > 3) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: structure.pos, range: 3 }],
            });
            return false;
        }
        if (this.rangedAttack(structure) !== OK)
            return false;
        structure.nextHits -= this.parts.ranged_attack * RANGED_ATTACK_POWER;
        if (structure.nextHits > 0)
            return true;
        structures.splice(structures.indexOf(structure), 1);
        if (!structures.length)
            return true;
        structure = findClosestObject(this.pos, structures);
        if (getRange(this.pos.x, structure.pos.y, this.pos.y, structure.pos.y) > 3) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: structure.pos, range: 3 }],
            });
        }
        return true;
    }
    advancedAttack() {
        const { room } = this;
        let enemyAttackers = room.enemyAttackers.filter(function (creep) {
            return !creep.isOnExit;
        });
        if (!enemyAttackers.length)
            enemyAttackers = room.enemyAttackers;
        if (!enemyAttackers.length) {
            let enemyCreeps = room.enemyCreeps.filter(function (creep) {
                return !creep.isOnExit;
            });
            if (!enemyCreeps)
                enemyCreeps = room.enemyCreeps;
            if (!enemyCreeps.length)
                return this.attackStructures();
            this.say('EC');
            const enemyCreep = findClosestObject(this.pos, enemyCreeps);
            if (Memory.roomVisuals)
                this.room.visual.line(this.pos, enemyCreep.pos, { color: customColors.green, opacity: 0.3 });
            if (getRange(this.pos.x, enemyCreep.pos.x, this.pos.y, enemyCreep.pos.y) > 1) {
                this.createMoveRequest({
                    origin: this.pos,
                    goals: [{ pos: enemyCreep.pos, range: 1 }],
                });
                return true;
            }
            this.attack(enemyCreep);
            if (enemyCreep.canMove)
                this.assignMoveRequest(enemyCreep.pos);
            return true;
        }
        const enemyAttacker = findClosestObject(this.pos, enemyAttackers);
        if (Memory.roomVisuals)
            this.room.visual.line(this.pos, enemyAttacker.pos, { color: customColors.green, opacity: 0.3 });
        if (getRange(this.pos.x, enemyAttacker.pos.x, this.pos.y, enemyAttacker.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: enemyAttacker.pos, range: 1 }],
            });
            return true;
        }
        this.attack(enemyAttacker);
        if (this.canMove && enemyAttacker.canMove)
            this.assignMoveRequest(enemyAttacker.pos);
        return true;
    }
    attackStructures() {
        this.say('AS');
        const structures = this.room.combatStructureTargets;
        if (!structures.length)
            return false;
        let structure = findClosestObject(this.pos, structures);
        if (Memory.roomVisuals)
            this.room.visual.line(this.pos, structure.pos, { color: customColors.green, opacity: 0.3 });
        if (getRange(this.pos.x, structure.pos.x, this.pos.y, structure.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: structure.pos, range: 1 }],
            });
            return false;
        }
        if (this.attack(structure) !== OK)
            return false;
        structure.nextHits -= this.parts.attack * ATTACK_POWER;
        if (structure.nextHits > 0)
            return true;
        structures.splice(structures.indexOf(structure), 1);
        if (!structures.length)
            return true;
        structure = findClosestObject(this.pos, structures);
        if (getRange(this.pos.x, structure.pos.y, this.pos.y, structure.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: structure.pos, range: 1 }],
            });
        }
        return true;
    }
    advancedDismantle() {
        const structures = this.room.combatStructureTargets;
        if (!structures.length)
            return false;
        let structure = findClosestObject(this.pos, structures);
        if (Memory.roomVisuals)
            this.room.visual.line(this.pos, structure.pos, { color: customColors.green, opacity: 0.3 });
        if (getRange(this.pos.x, structure.pos.x, this.pos.y, structure.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: structure.pos, range: 1 }],
            });
            return true;
        }
        if (this.dismantle(structure) !== OK)
            return false;
        structure.nextHits -= this.parts.work * DISMANTLE_POWER;
        if (structure.nextHits > 0)
            return true;
        structures.splice(structures.indexOf(structure), 1);
        if (!structures.length)
            return true;
        structure = findClosestObject(this.pos, structures);
        if (getRange(this.pos.x, structure.pos.y, this.pos.y, structure.pos.y) > 1) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: structure.pos, range: 1 }],
            });
        }
        return true;
    }
    stompEnemyCSites() {
        if (this.room.controller && this.room.controller.safeMode)
            return false;
        const enemyCSites = this.room.enemyCSites.filter(cSite => cSite.progress > 0 && !isCoordExit(cSite.pos));
        if (!enemyCSites.length)
            return false;
        const enemyCSite = findClosestObject(this.pos, enemyCSites);
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: enemyCSite.pos, range: 0 }],
        });
        return true;
    }
    static antifaManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (creep.spawning)
                continue;
            if (!creep.runSquad())
                creep.runSingle();
        }
    }
}

class RequestHauler extends Creep {
    constructor(creepID) {
        super(creepID);
    }
    preTickManager() {
        if (Memory.haulRequests[this.memory.HRN]) {
            internationalManager.creepsByHaulRequest[this.memory.HRN].push(this.name);
        }
    }
    static requestHaulerManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            Game.creeps[creepName];
        }
    }
}

class RangedDefender extends Creep {
    preTickManager() {
        const { room } = this;
        room.attackingDefenderIDs.add(this.id);
        for (const enemyCreep of this.room.unprotectedEnemyCreeps) {
            const range = getRangeOfCoords(this.pos, enemyCreep.pos);
            if (range > 3)
                continue;
            const estimatedDamage = this.combatStrength.ranged * enemyCreep.defenceStrength;
            const targetDamage = room.defenderEnemyTargetsWithDamage.get(enemyCreep.id);
            if (!targetDamage) {
                room.defenderEnemyTargetsWithDamage.set(enemyCreep.id, enemyCreep.netTowerDamage + estimatedDamage);
            }
            else
                room.defenderEnemyTargetsWithDamage.set(enemyCreep.id, targetDamage + estimatedDamage);
            if (!room.defenderEnemyTargetsWithDefender.get(enemyCreep.id)) {
                room.defenderEnemyTargetsWithDefender.set(enemyCreep.id, [this.id]);
                continue;
            }
            else
                room.defenderEnemyTargetsWithDefender.get(enemyCreep.id).push(this.id);
        }
        if (this.memory.RID) {
            const rampart = findObjectWithID(this.memory.RID);
            if (!rampart || rampart.hits < 3000) {
                delete this.memory.RID;
                return;
            }
            room.usedRampartIDs.add(rampart.id);
        }
    }
    advancedDefend() {
        const { room } = this;
        if (this.combatTarget) {
            this.room.targetVisual(this.pos, this.combatTarget.pos);
            if (getRangeOfCoords(this.pos, this.combatTarget.pos) <= 1)
                this.rangedMassAttack();
            else
                this.rangedAttack(this.combatTarget);
        }
        let enemyCreeps = room.enemyAttackers.filter(function (enemyAttacker) {
            return !enemyAttacker.isOnExit;
        });
        if (!enemyCreeps.length) {
            enemyCreeps = room.enemyAttackers.filter(function (enemyAttacker) {
                return !enemyAttacker.isOnExit;
            });
            if (!enemyCreeps.length)
                return;
        }
        if (!room.enemyDamageThreat || room.controller.safeMode) {
            this.defendWithoutRamparts(enemyCreeps);
            return;
        }
        this.defendWithRampart();
    }
    defendWithoutRamparts(enemyCreeps) {
        const enemyCreep = findClosestObject(this.pos, enemyCreeps);
        if (Memory.roomVisuals)
            this.room.visual.line(this.pos, enemyCreep.pos, { color: customColors.green, opacity: 0.3 });
        if (getRange(this.pos.x, enemyCreep.pos.x, this.pos.y, enemyCreep.pos.y) > 3) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: enemyCreep.pos, range: 1 }],
            });
            return true;
        }
        return true;
    }
    findRampart(enemyCreep) {
        const { room } = this;
        if (this.memory.RID && !randomTick(10))
            return findObjectWithID(this.memory.RID);
        const ramparts = room.defensiveRamparts.filter(rampart => {
            if (areCoordsEqual(this.pos, rampart.pos))
                return true;
            if (room.usedRampartIDs.has(rampart.id))
                return false;
            if (rampart.hits < 3000)
                return false;
            if (room.coordHasStructureTypes(rampart.pos, new Set(impassibleStructureTypes)))
                return false;
            return true;
        });
        if (!ramparts.length)
            return false;
        const rampart = findClosestObjectEuc(enemyCreep.pos, ramparts);
        this.memory.RID = rampart.id;
        room.usedRampartIDs.add(rampart.id);
        return rampart;
    }
    defendWithRampart() {
        const { room } = this;
        const enemyCreeps = room.enemyAttackers;
        const enemyCreep = this.pos.findClosestByPath(enemyCreeps, {
            ignoreCreeps: true,
            ignoreRoads: true,
        });
        const rampart = this.findRampart(enemyCreep);
        if (!rampart)
            return this.defendWithoutRamparts(enemyCreeps);
        this.memory.ROS = true;
        if (Memory.roomVisuals) {
            this.room.visual.line(this.pos.x, this.pos.y, rampart.pos.x, rampart.pos.y, { color: customColors.yellow });
            this.room.targetVisual(this.pos, enemyCreep.pos);
            room.visual.circle(enemyCreep.pos, { fill: customColors.green });
        }
        if (getRange(this.pos.x, rampart.pos.x, this.pos.y, rampart.pos.y) === 0)
            return false;
        this.createMoveRequest({
            origin: this.pos,
            goals: [{ pos: rampart.pos, range: 0 }],
            weightStructures: {
                road: 5,
                rampart: 1,
            },
            plainCost: 40,
            swampCost: 100,
        });
        return true;
    }
    constructor(creepID) {
        super(creepID);
    }
    static rangedDefenderManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.creeps[creepName];
            if (creep.spawning)
                continue;
            delete creep.memory.ROS;
            creep.advancedDefend();
        }
    }
}

const managers$1 = {
    meleeDefender: MeleeDefender.meleeDefenderManager,
    rangedDefender: RangedDefender.rangedDefenderManager,
    allyVanguard: AllyVanguard.allyVanguardManager,
    antifaRangedAttacker: Antifa.antifaManager,
    antifaAttacker: Antifa.antifaManager,
    antifaHealer: Antifa.antifaManager,
    antifaDismantler: Antifa.antifaManager,
    antifaDowngrader: Antifa.antifaManager,
    claimer: Claimer.claimerManager,
    remoteDefender: RemoteDefender.remoteDefenderManager,
    source1Harvester: SourceHarvester.sourceHarvesterManager,
    source2Harvester: SourceHarvester.sourceHarvesterManager,
    hauler: Hauler.haulerManager,
    requestHauler: RequestHauler.requestHaulerManager,
    maintainer: Maintainer.maintainerManager,
    fastFiller: FastFiller.fastFillerManager,
    hubHauler: HubHauler.hubHaulerManager,
    controllerUpgrader: ControllerUpgrader.controllerUpgraderManager,
    builder: Builder.builderManager,
    mineralHarvester: MineralHarvester.mineralHarvesterManager,
    remoteSourceHarvester0: RemoteHarvester.RemoteHarvesterManager,
    remoteSourceHarvester1: RemoteHarvester.RemoteHarvesterManager,
    remoteHauler: RemoteHauler.remoteHaulerManager,
    remoteReserver: RemoteReserver.remoteReserverManager,
    remoteCoreAttacker: RemoteCoreAttacker.remoteCoreAttackerManager,
    remoteDismantler: RemoteDismantler.remoteDismantlerManager,
    scout: Scout.scoutManager,
    vanguard: Vanguard.vanguardManager,
};
class CreepRoleManager {
    constructor(roomManager) {
        this.roomManager = roomManager;
    }
    run() {
        const { room } = this.roomManager;
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        for (const role of creepRoles)
            this.runManager(role);
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            const cpuUsed2 = this.roomManager.room.myCreepsAmount ? cpuUsed / this.roomManager.room.myCreepsAmount : 0;
            customLog('Role Manager', `CPU: ${cpuUsed.toFixed(2)}, CPU Per Creep: ${cpuUsed2.toFixed(2)}`, {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'rolmcu';
            const statName2 = 'rolmpccu';
            globalStatsUpdater(room.name, statName, cpuUsed);
            globalStatsUpdater(room.name, statName2, cpuUsed2);
        }
    }
    runManager(role) {
        const roleCPUStart = Game.cpu.getUsed();
        const creepsOfRoleAmount = this.roomManager.room.myCreeps[role].length;
        if (!this.roomManager.room.myCreeps[role].length)
            return;
        managers$1[role](this.roomManager.room, this.roomManager.room.myCreeps[role]);
        customLog(`${role}s`, `Creeps: ${creepsOfRoleAmount}, CPU: ${(Game.cpu.getUsed() - roleCPUStart).toFixed(2)}, CPU Per Creep: ${((Game.cpu.getUsed() - roleCPUStart) /
            creepsOfRoleAmount).toFixed(2)}`, {
            superPosition: 3,
        });
    }
}

class EndTickCreepManager {
    constructor(roomManager) {
        this.roomManager = roomManager;
    }
    run() {
        const { room } = this.roomManager;
        if (!this.roomManager.room.myCreepsAmount)
            return;
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        for (const className of powerCreepClassNames) {
            for (const creepName of this.roomManager.room.myPowerCreeps[className]) {
                const creep = Game.powerCreeps[creepName];
                creep.endTickManager();
                creep.recurseMoveRequest();
                if (creep.message.length)
                    creep.say(creep.message);
            }
        }
        for (const role in this.roomManager.room.myCreeps) {
            for (const creepName of this.roomManager.room.myCreeps[role]) {
                const creep = Game.creeps[creepName];
                creep.endTickManager();
                creep.recurseMoveRequest();
                if (creep.message.length)
                    creep.say(creep.message);
            }
        }
        this.runChant();
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('End Tick Creep Manager', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'etcmcu';
            globalStatsUpdater(room.name, statName, cpuUsed);
        }
    }
    runChant() {
        if (!Memory.doChant)
            return;
        const currentChant = chant[Memory.chantIndex];
        if (!currentChant)
            return;
        for (const className of powerCreepClassNames) {
            for (const creepName of this.roomManager.room.myPowerCreeps[className]) {
                const creep = Game.powerCreeps[creepName];
                creep.say(currentChant, true);
            }
        }
        for (const role in this.roomManager.room.myCreeps)
            for (const creepName of this.roomManager.room.myCreeps[role]) {
                const creep = Game.creeps[creepName];
                creep.say(currentChant, true);
            }
    }
}

class Operator extends PowerCreep {
    constructor(creepID) {
        super(creepID);
    }
    preTickManager() {
        this.managePowerTask();
        this.avoidEnemyThreatCoords();
    }
    managePowerTask() {
        if (!this.memory.TTID)
            return;
        const taskTarget = findObjectWithID(this.memory.TTID);
        if (!taskTarget) {
            delete this.memory.TTID;
            return;
        }
        taskTarget.reservePowers;
        taskTarget._reservePowers.add(this.memory.PT);
    }
    endTickManager() { }
    runTask() {
        if (!this.memory.TN && !this.findTask())
            return RESULT_FAIL;
        const taskResult = this[this.memory.TN]();
        if (!taskResult)
            return taskResult === RESULT_FAIL;
        delete this.memory.TN;
        return RESULT_SUCCESS;
    }
    findTask() {
        if (this.findRenewTask())
            return true;
        if (this.findEnablePowerTask())
            return true;
        if (this.findGenerateOpsTask())
            return true;
        return false;
    }
    findRenewTask() {
        if (this.ticksToLive > POWER_CREEP_LIFE_TIME * 0.1)
            return false;
        if (!this.room.powerSpawn)
            return false;
        this.memory.TN = 'advancedRenew';
        return true;
    }
    advancedRenew() {
        const powerSpawn = this.room.powerSpawn;
        if (!powerSpawn)
            return RESULT_FAIL;
        const minRange = 1;
        if (getRangeOfCoords(this.pos, powerSpawn.pos) > minRange) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [
                    {
                        pos: powerSpawn.pos,
                        range: minRange,
                    },
                ],
                avoidEnemyRanges: true,
            });
            return false;
        }
        this.renew(powerSpawn);
        return true;
    }
    findEnablePowerTask() {
        const { controller } = this.room;
        if (!controller)
            return false;
        if (controller.isPowerEnabled)
            return false;
        this.memory.TN = 'advancedEnablePower';
        return true;
    }
    advancedEnablePower() {
        const { controller } = this.room;
        if (!controller || controller.isPowerEnabled)
            return RESULT_NO_ACTION;
        const minRange = 1;
        if (getRangeOfCoords(this.pos, controller.pos) > minRange) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [
                    {
                        pos: controller.pos,
                        range: minRange,
                    },
                ],
                avoidEnemyRanges: true,
            });
            return RESULT_ACTION;
        }
        this.enableRoom(controller);
        return RESULT_SUCCESS;
    }
    findGenerateOpsTask() {
        if (this.powered)
            return false;
        const power = this.powers[PWR_GENERATE_OPS];
        if (!power)
            return false;
        if (power.cooldown)
            return false;
        this.memory.TN = 'advancedGenerateOps';
        return true;
    }
    advancedGenerateOps() {
        this.say('AGO');
        if (this.powered)
            return false;
        this.usePower(PWR_GENERATE_OPS);
        this.powered = true;
        return true;
    }
    findPowerTask() {
        if (this.memory.TTID)
            return findObjectWithID(this.memory.TTID);
        const task = this.findNewBestPowerTask();
        if (!task)
            return RESULT_FAIL;
        customLog('FIND TASK', findObjectWithID(task.targetID));
        const taskTarget = findObjectWithID(task.targetID);
        taskTarget.reservePowers;
        taskTarget._reservePowers.add(this.memory.PT);
        this.memory.TTID = task.targetID;
        this.memory.PT = task.powerType;
        delete this.room.powerTasks[task.taskID];
        return findObjectWithID(task.targetID);
    }
    findNewBestPowerTask() {
        let lowestScore = Infinity;
        let bestTask;
        for (const ID in this.room.powerTasks) {
            const task = this.room.powerTasks[ID];
            const power = this.powers[task.powerType];
            if (!power)
                continue;
            if (POWER_INFO[task.powerType].ops > this.nextStore.ops)
                continue;
            const taskTargetPos = findObjectWithID(task.targetID).pos;
            const range = getRangeOfCoords(this.pos, taskTargetPos);
            if (Math.max(task.cooldown, this.powerCooldowns.get(task.powerType) || 0) >
                range + POWER_INFO[task.powerType].range + 3)
                continue;
            const score = task.priority + range / 100;
            if (score >= lowestScore)
                continue;
            lowestScore = score;
            bestTask = task;
        }
        return bestTask;
    }
    runPowerTask() {
        const taskTarget = this.findPowerTask();
        if (!taskTarget)
            return RESULT_FAIL;
        customLog('TRY TASK', taskTarget);
        const minRange = POWER_INFO[this.memory.PT].range;
        if (minRange && getRangeOfCoords(this.pos, taskTarget.pos) > minRange) {
            this.createMoveRequest({
                origin: this.pos,
                goals: [{ pos: taskTarget.pos, range: minRange }],
            });
            return RESULT_ACTION;
        }
        if (this.powered)
            return RESULT_FAIL;
        const effect = taskTarget.effectsData.get(this.memory.PT);
        if (effect && effect.ticksRemaining > 0)
            return RESULT_FAIL;
        this.usePower(this.memory.PT, taskTarget);
        customLog('WE DID THE POWA', taskTarget);
        const ops = POWER_INFO[this.memory.PT].ops;
        if (ops)
            this.nextStore.ops -= ops;
        this.powered = true;
        delete this.memory.TTID;
        this.powerCooldowns;
        this._powerCooldowns.set(this.memory.PT, POWER_INFO[this.memory.PT].cooldown);
        return RESULT_SUCCESS;
    }
    static operatorManager(room, creepsOfRole) {
        for (const creepName of creepsOfRole) {
            const creep = Game.powerCreeps[creepName];
            if (creep.runTask())
                continue;
            if (creep.runPowerTask() === RESULT_SUCCESS)
                creep.runPowerTask();
        }
    }
}

const managers = {
    [POWER_CLASS.OPERATOR]: Operator.operatorManager,
};
class PowerCreepRoleManager {
    constructor(roomManager) {
        this.roomManager = roomManager;
    }
    run() {
        const { room } = this.roomManager;
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        for (const className of powerCreepClassNames)
            this.runManager(className);
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            const cpuUsed2 = this.roomManager.room.myCreepsAmount
                ? (Game.cpu.getUsed() - managerCPUStart) / this.roomManager.room.myCreepsAmount
                : 0;
            customLog('Power Role Manager', `CPU: ${cpuUsed.toFixed(2)}, CPU Per Creep: ${cpuUsed2.toFixed(2)}`, {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'prmcu';
            const statName2 = 'prmpccu';
            globalStatsUpdater(room.name, statName, cpuUsed);
            globalStatsUpdater(room.name, statName2, cpuUsed2);
        }
    }
    runManager(className) {
        const roleCPUStart = Game.cpu.getUsed();
        const creepsOfRoleAmount = this.roomManager.room.myPowerCreeps[className].length;
        if (!this.roomManager.room.myPowerCreeps[className].length)
            return;
        managers[className](this.roomManager.room, this.roomManager.room.myPowerCreeps[className]);
        customLog(`${className}s`, `Creeps: ${creepsOfRoleAmount}, CPU: ${(Game.cpu.getUsed() - roleCPUStart).toFixed(2)}, CPU Per Creep: ${((Game.cpu.getUsed() - roleCPUStart) /
            creepsOfRoleAmount).toFixed(2)}`, undefined);
    }
}

var main = {};

Object.defineProperty(main, '__esModule', { value: true });

// Borrowed from https://github.com/voodoocreation/ts-deepmerge
// istanbul ignore next
var isObject = function (obj) {
    if (typeof obj === "object" && obj !== null) {
        if (typeof Object.getPrototypeOf === "function") {
            var prototype = Object.getPrototypeOf(obj);
            return prototype === Object.prototype || prototype === null;
        }
        return Object.prototype.toString.call(obj) === "[object Object]";
    }
    return false;
};
var deepMerge = function () {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    return objects.reduce(function (result, current) {
        Object.keys(current).forEach(function (key) {
            if (Array.isArray(result[key]) && Array.isArray(current[key])) {
                result[key] = Array.from(new Set(result[key].concat(current[key])));
            }
            else if (isObject(result[key]) && isObject(current[key])) {
                result[key] = deepMerge(result[key], current[key]);
            }
            else {
                result[key] = current[key];
            }
        });
        return result;
    }, {});
};

var roomVisual = new RoomVisual();
var setRoom = function (room) {
    roomVisual = new RoomVisual(room);
};
var viz = function () { return roomVisual; };

var defaultConfig = {};
function Dashboard(params) {
    var widgets = params.widgets, config = params.config;
    var mergedConfig = config ? deepMerge(defaultConfig, config) : defaultConfig;
    setRoom(mergedConfig.room);
    widgets.forEach(function (widget) {
        widget.widget({
            pos: widget.pos,
            width: widget.width,
            height: widget.height
        });
    });
}

function ConfiguredWidget(defaultConfig, handler) {
    return function (generator) {
        return function (props) {
            var _a = (typeof generator === 'object') ? generator : generator(), data = _a.data, config = _a.config;
            var mergedConfig = config ? deepMerge(defaultConfig, config) : defaultConfig;
            handler({
                data: data,
                config: mergedConfig,
                renderConfig: props
            });
        };
    };
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || from);
}

var Bar = ConfiguredWidget({
    label: '',
    style: {
        fill: 'white',
        stroke: 'white',
        lineStyle: 'solid'
    }
}, function (_a) {
    var _b;
    var data = _a.data, config = _a.config, renderConfig = _a.renderConfig;
    var height = renderConfig.height, width = renderConfig.width, pos = renderConfig.pos;
    var value = data.value, maxValue = data.maxValue;
    var effectiveMax = Math.max(value, maxValue !== null && maxValue !== void 0 ? maxValue : 0);
    var valueHeight = Math.max(effectiveMax !== 0 ? (value / effectiveMax) * (height - 1) : 0, 0.1);
    var maxValueHeight = Math.max(effectiveMax !== 0 ? ((maxValue !== null && maxValue !== void 0 ? maxValue : value) / effectiveMax) * (height - 1) : 0, 0.1);
    // Draw labels
    var center = pos.x + width / 2;
    viz().text(config.label, center, pos.y + height);
    viz().text((_b = maxValue === null || maxValue === void 0 ? void 0 : maxValue.toFixed(0)) !== null && _b !== void 0 ? _b : '', center, pos.y + 1);
    viz().text(value.toFixed(0), center, pos.y + height - 1.5);
    // Draw bar, scaled
    viz().rect(pos.x, pos.y + (height - maxValueHeight - 1), width, maxValueHeight, __assign(__assign({}, config.style), { fill: 'transparent' }));
    viz().rect(pos.x, pos.y + (height - valueHeight - 1), width, valueHeight, __assign(__assign({}, config.style), { stroke: 'transparent' }));
});

/**
 * A simple grid that splits space evenly between widgets. If more widgets are provided than
 * will fit, the remaining widgets are silently ignored.
 */
var Grid = ConfiguredWidget({
    padding: 1,
    rows: 2,
    columns: 2,
}, function (_a) {
    var widgets = _a.data, config = _a.config, renderConfig = _a.renderConfig;
    var padding = config.padding, rows = config.rows, columns = config.columns;
    var height = renderConfig.height, width = renderConfig.width, pos = renderConfig.pos;
    var widgetHeight = (height - (padding * (rows - 1))) / rows;
    var widgetWidth = (width - (padding * (columns - 1))) / columns;
    for (var q = 0; q < columns; q++) {
        for (var r = 0; r < rows; r++) {
            if (!widgets[q + (r * columns)])
                break;
            widgets[q + (r * columns)]({
                pos: {
                    x: pos.x + (widgetWidth + padding) * q,
                    y: pos.y + (widgetHeight + padding) * r,
                },
                width: widgetWidth,
                height: widgetHeight,
            });
        }
    }
});

var Rectangle = ConfiguredWidget({
    padding: 1,
    style: {
        fill: 'black',
        stroke: 'white',
        opacity: 0.3,
        lineStyle: 'solid'
    }
}, function (_a) {
    var data = _a.data, config = _a.config, renderConfig = _a.renderConfig;
    var padding = config.padding, style = config.style;
    var pos = renderConfig.pos, width = renderConfig.width, height = renderConfig.height;
    viz().rect(pos.x, pos.y, width, height, style);
    data({
        pos: {
            x: pos.x + padding,
            y: pos.y + padding,
        },
        width: width - (2 * padding),
        height: height - (2 * padding)
    });
});

var Table = ConfiguredWidget({
    headers: [],
}, function (_a) {
    var data = _a.data, config = _a.config, renderConfig = _a.renderConfig;
    var label = config.label, headers = config.headers;
    var pos = renderConfig.pos, height = renderConfig.height, width = renderConfig.width;
    var labelHeight = (label ? 1 : 0);
    var rows = data.slice(0, height - labelHeight);
    var columnWidths = headers.map(function (header, index) {
        var width = Math.max(header.length, rows.reduce(function (maxWidth, row) { return Math.max(maxWidth, row[index].toString().length); }, 0), 1);
        return width;
    });
    var columnWidthSum = columnWidths.reduce(function (a, b) { return (a + b); }, 0);
    var columnOffsets = [0];
    columnWidths.forEach(function (colWidth, index) {
        columnOffsets.push((width * (colWidth / columnWidthSum)) + columnOffsets[index]);
    });
    // Draw label
    if (label) {
        viz().text(label, (pos.x + width / 2), pos.y);
    }
    // Draw headers
    headers.forEach(function (header, index) {
        viz().text(header, pos.x + columnOffsets[index], pos.y + labelHeight, { align: 'left' });
    });
    // Draw body
    rows.forEach(function (row, rowIndex) {
        row.forEach(function (cell, columnIndex) {
            viz().text(cell, pos.x + columnOffsets[columnIndex], pos.y + 1 + labelHeight + rowIndex, { align: 'left' });
        });
    });
});

var Label = ConfiguredWidget({
    style: {
        color: 'white',
        align: 'center'
    }
}, function (_a) {
    var _b;
    var data = _a.data, config = _a.config, renderConfig = _a.renderConfig;
    // Draw labels
    var pos = renderConfig.pos, height = renderConfig.height, width = renderConfig.width;
    var fontSize = ((_b = config.style.font) !== null && _b !== void 0 ? _b : 0.7);
    var baseline = typeof fontSize === 'number' ? fontSize / 3 : 0.25;
    var x;
    var y;
    if (config.style.align === 'left') {
        x = pos.x;
        y = pos.y + height / 2 + baseline;
    }
    else if (config.style.align === 'right') {
        x = pos.x + width;
        y = pos.y + height / 2 + baseline;
    }
    else {
        x = pos.x + width / 2;
        y = pos.y + height / 2 + baseline;
    }
    viz().text(data, x, y, config.style);
});

/**
 * Given a Record of series data, calculates the appropriate scale to contain all data
 */
var calculateScaleFromSeries = function (chartSeriesData) {
    var initialScale = {
        x: { min: Infinity, max: -Infinity },
        y: { min: Infinity, max: -Infinity },
    };
    return Object.values(chartSeriesData).reduce(function (results, series) {
        var data = Array.isArray(series) ? series : series.values;
        var seriesBounds = data.reduce(function (seriesResults, row) {
            return {
                x: {
                    min: Math.min(seriesResults.x.min, row[0]),
                    max: Math.max(seriesResults.x.max, row[0])
                },
                y: {
                    min: Math.min(seriesResults.y.min, row[1]),
                    max: Math.max(seriesResults.y.max, row[1])
                }
            };
        }, initialScale);
        return {
            x: {
                min: Math.min(seriesBounds.x.min, results.x.min),
                max: Math.max(seriesBounds.x.max, results.x.max),
            },
            y: {
                min: Math.min(seriesBounds.y.min, results.y.min),
                max: Math.max(seriesBounds.y.max, results.y.max),
            }
        };
    }, initialScale);
};
var scaleToChartSpace = function (scale, coords) {
    return {
        x: Math.min(1, Math.max(0, (coords[0] - scale.x.min) / (scale.x.max - scale.x.min))),
        y: Math.min(1, Math.max(0, (coords[1] - scale.y.min) / (scale.y.max - scale.y.min))),
    };
};
/**
 * (0,0) corresponds to the bottom left of chart space, but top left of room space
 */
var chartSpaceToRoomPosition = function (x, y, width, height, chartSpaceCoords) {
    return [
        x + width * chartSpaceCoords.x,
        y + height - (height * chartSpaceCoords.y)
    ];
};

var randomWebColor = function () { return (['red', 'yellow', 'lime', 'green', 'aqua', 'teal', 'blue', 'fuchsia', 'purple'][Math.round(Math.random() * 9)]); };
/**
 * A simple line chart that can plot multiple series.
 */
var LineChart = ConfiguredWidget({
    label: '',
    style: {
        fill: 'black',
        stroke: 'white',
        lineStyle: 'solid',
        opacity: 0.7
    },
    series: {}
}, function (_a) {
    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    var chartSeriesData = _a.data, config = _a.config, renderConfig = _a.renderConfig;
    var width = renderConfig.width, height = renderConfig.height, pos = renderConfig.pos;
    var series = Object.keys(chartSeriesData).sort();
    // Draw labels
    var center = pos.x + width / 2;
    viz().text(config.label, center, pos.y + height);
    // Draw Chart, scaled
    viz().rect(pos.x + 1, pos.y, width - 1, height - 1, config.style);
    // Calculate bounds of chart
    var calculatedScale = calculateScaleFromSeries(chartSeriesData);
    var mergedScale = {
        x: {
            min: (_d = (_c = (_b = config === null || config === void 0 ? void 0 : config.scale) === null || _b === void 0 ? void 0 : _b.x) === null || _c === void 0 ? void 0 : _c.min) !== null && _d !== void 0 ? _d : calculatedScale.x.min,
            max: (_g = (_f = (_e = config === null || config === void 0 ? void 0 : config.scale) === null || _e === void 0 ? void 0 : _e.x) === null || _f === void 0 ? void 0 : _f.max) !== null && _g !== void 0 ? _g : calculatedScale.x.max,
        },
        y: {
            min: (_k = (_j = (_h = config === null || config === void 0 ? void 0 : config.scale) === null || _h === void 0 ? void 0 : _h.y) === null || _j === void 0 ? void 0 : _j.min) !== null && _k !== void 0 ? _k : calculatedScale.y.min,
            max: (_o = (_m = (_l = config === null || config === void 0 ? void 0 : config.scale) === null || _l === void 0 ? void 0 : _l.y) === null || _m === void 0 ? void 0 : _m.max) !== null && _o !== void 0 ? _o : calculatedScale.y.max,
        }
    };
    // Display axes and labels, if configured
    var labelCount = series.length;
    series.forEach(function (s, index) {
        var _a, _b;
        var _c, _d;
        // Generate series config, if needed
        (_a = (_c = config.series)[s]) !== null && _a !== void 0 ? _a : (_c[s] = {
            label: s,
        });
        (_b = (_d = config.series[s]).color) !== null && _b !== void 0 ? _b : (_d.color = randomWebColor());
        // Draw label
        var labelWidth = ((width - 6) / labelCount);
        var offset = 3 + labelWidth * (index + 0.5);
        viz().text(config.series[s].label, pos.x + offset, pos.y + height, {
            color: config.series[s].color,
        });
    });
    viz().text(mergedScale.x.min.toFixed(0), pos.x + 1.5, pos.y + height);
    viz().text(mergedScale.x.max.toFixed(0), pos.x + width - 0.5, pos.y + height);
    viz().text(mergedScale.y.min.toFixed(0), pos.x, pos.y + height - 1);
    viz().text(mergedScale.y.max.toFixed(0), pos.x, pos.y + 0.5);
    // Display lines
    series.forEach(function (seriesName) {
        var s = chartSeriesData[seriesName];
        var data = Array.isArray(s) ? s : s.values;
        viz().poly(data.map(function (coords) {
            return chartSpaceToRoomPosition(pos.x + 1, pos.y, width - 1, height - 1, scaleToChartSpace(mergedScale, coords));
        }), {
            strokeWidth: 0.1,
            stroke: config.series[seriesName].color,
            opacity: 1
        });
    });
});

var Dial = ConfiguredWidget({
    label: '',
    textStyle: { font: '0.85', },
    foregroundStyle: {
        stroke: 'white',
        strokeWidth: 1,
    },
    backgroundStyle: {
        stroke: '#333333',
        strokeWidth: 1,
    },
}, function (_a) {
    var data = _a.data, config = _a.config, renderConfig = _a.renderConfig;
    var height = renderConfig.height, width = renderConfig.width, pos = renderConfig.pos;
    var value = data.value;
    value = Math.max(0, Math.min(1, value)); // Constrain between 0 and 1
    // Display constants labels
    var RESOLUTION = 16;
    var RANGE = 1.2 * Math.PI;
    var START_ANGLE = (3 * Math.PI - RANGE) / 2;
    var background_increment = RANGE / (RESOLUTION - 1);
    var increment = (RANGE * value) / (RESOLUTION - 1);
    var radius = Math.min(width * (1 / 3), height * (1 / 2));
    var offsetX = pos.x + (width * (1 / 2));
    var offsetY = pos.y + (height + radius / 2) * (1 / 2);
    var background = [];
    for (var i = 0; i < RESOLUTION; i++) {
        background.push([
            (Math.cos(i * background_increment + START_ANGLE) * radius) + offsetX,
            (Math.sin(i * background_increment + START_ANGLE) * radius) + offsetY,
        ]);
    }
    var points = [];
    for (var i = 0; i < RESOLUTION; i++) {
        points.push([
            (Math.cos(i * increment + START_ANGLE) * radius) + offsetX,
            (Math.sin(i * increment + START_ANGLE) * radius) + offsetY,
        ]);
    }
    viz().poly(background, __assign(__assign({}, config.backgroundStyle), { strokeWidth: radius / 2 }));
    viz().poly(points, __assign(__assign({}, config.foregroundStyle), { strokeWidth: radius / 2 }));
    viz().text(config.label, offsetX, offsetY, __assign(__assign({}, config.textStyle), { align: 'center' }));
});

var newTimeseries = function () { return ({ values: [] }); };
var min = function (series, dimension) {
    if (dimension === void 0) { dimension = 1; }
    return series.values.reduce(function (min, item) {
        return (!min || item[dimension] < min[dimension]) ? item : min;
    });
};
var max = function (series, dimension) {
    if (dimension === void 0) { dimension = 1; }
    return series.values.reduce(function (max, item) {
        return (!max || item[dimension] > max[dimension]) ? item : max;
    });
};
var sum = function (series) {
    return series.values.reduce(function (sum, item) {
        return item[1] + sum;
    }, 0);
};
var head = function (series, count) {
    return __assign(__assign({}, series), { values: series.values.slice(0, count) });
};
var tail = function (series, count) {
    return __assign(__assign({}, series), { values: series.values.slice(-count) });
};
var granularity = function (series, ticks) {
    var buckets = new Map();
    series.values.forEach(function (_a) {
        var _b;
        var _c = __read(_a, 2), time = _c[0], value = _c[1];
        var index = Math.floor(time / ticks) * ticks;
        var bucket = (_b = buckets.get(index)) !== null && _b !== void 0 ? _b : [];
        bucket.push(value);
        buckets.set(index, bucket);
    });
    return __assign(__assign({}, series), { values: __spreadArray([], __read(buckets.entries())).map(function (_a) {
            var _b = __read(_a, 2), time = _b[0], values = _b[1];
            return [
                time,
                values.reduce(function (a, b) { return a + b; }, 0) / values.length
            ];
        }) });
};
var avg = function (series) {
    return sum(series) / series.values.length;
};
var last = function (series) {
    return series.values[series.values.length - 1];
};
var timestampValue = function (value) {
    if (Array.isArray(value)) {
        return value;
    }
    return [Game.time, value];
};
var update = function (series, value, limit) {
    series.values.push(timestampValue(value));
    while (limit !== undefined && series.values.length > limit) {
        series.values.shift();
    }
    return series;
};
var updateDelta = function (series, value, limit) {
    var v = timestampValue(value);
    if (series.last === undefined || isNaN(series.last)) {
        series.last = v[1];
    }
    update(series, [v[0], v[1] - series.last], limit);
    series.last = v[1];
    return series;
};
var updateNonNegativeDelta = function (series, value, limit) {
    var v = timestampValue(value);
    if (series.last === undefined || isNaN(series.last)) {
        series.last = v[1];
    }
    update(series, [v[0], Math.max(0, v[1] - series.last)], limit);
    series.last = v[1];
    return series;
};

var Timeseries = /*#__PURE__*/Object.freeze({
    __proto__: null,
    newTimeseries: newTimeseries,
    min: min,
    max: max,
    sum: sum,
    head: head,
    tail: tail,
    granularity: granularity,
    avg: avg,
    last: last,
    update: update,
    updateDelta: updateDelta,
    updateNonNegativeDelta: updateNonNegativeDelta
});

var _a, _b;
(_a = Memory.timeseries1) !== null && _a !== void 0 ? _a : (Memory.timeseries1 = newTimeseries());
(_b = Memory.timeseries2) !== null && _b !== void 0 ? _b : (Memory.timeseries2 = newTimeseries());
function loop$1() {
    update(Memory.timeseries1, Math.random() * 10, 20);
    update(Memory.timeseries2, Math.random() * 10, 20);
    Dashboard({
        widgets: [
            {
                pos: {
                    x: 1,
                    y: 1
                },
                width: 10,
                height: 20,
                widget: Rectangle({
                    data: Grid({
                        data: [
                            Bar(function () { return ({
                                data: { value: 10, maxValue: 20 },
                                config: {
                                    label: 'Bar 1',
                                    style: {
                                        fill: 'rgba(255,0,0,0.3)',
                                        stroke: 'rgba(255,0,0,0.7'
                                    }
                                },
                            }); }),
                            Bar(function () { return ({
                                data: { value: 5, maxValue: 20, targetValue: 15 },
                                config: {
                                    label: 'Bar 2',
                                    style: {
                                        fill: 'rgba(0,255,0,0.3)',
                                        stroke: 'rgba(0,255,0,0.7'
                                    }
                                },
                            }); }),
                            Bar(function () { return ({
                                data: { value: 10 },
                                config: {
                                    label: 'Bar 3',
                                    style: {
                                        fill: 'rgba(255,255,0,0.3)',
                                        stroke: 'rgba(255,255,0,0.7'
                                    }
                                },
                            }); }),
                            Bar(function () { return ({
                                data: { value: 9, maxValue: 10 },
                                config: {
                                    label: 'Bar 4',
                                },
                            }); }),
                        ],
                        config: { columns: 2, rows: 2 },
                    })
                })
            },
            {
                pos: {
                    x: 11,
                    y: 1
                },
                width: 10,
                height: 10,
                widget: Rectangle({
                    data: Table(function () { return ({
                        data: [
                            ['value1', 'value2'],
                            ['value3', 'value4'],
                            ['value5', 'value6'],
                        ],
                        config: {
                            label: 'Table',
                            headers: ['header1', 'header2']
                        }
                    }); })
                })
            },
            {
                pos: {
                    x: 11,
                    y: 11
                },
                width: 20,
                height: 10,
                widget: Rectangle({
                    data: LineChart(function () { return ({
                        data: {
                            series1: Memory.timeseries1,
                            series2: Memory.timeseries2,
                        },
                        config: {
                            scale: {
                                y: {
                                    min: 0,
                                    max: 10
                                }
                            },
                            series: {
                                series1: {
                                    label: 'Series 1',
                                    color: 'lime',
                                },
                                series2: {
                                    label: 'Series 2',
                                    color: 'aqua'
                                },
                            }
                        }
                    }); })
                })
            },
            {
                pos: {
                    x: 25,
                    y: 3
                },
                width: 20,
                height: 5,
                widget: Rectangle({
                    data: Label({
                        data: 'screeps-viz',
                        config: { style: { font: 1.4 } }
                    })
                })
            },
            {
                pos: {
                    x: 1,
                    y: 21
                },
                width: 31,
                height: 8,
                widget: Rectangle({
                    data: Grid({
                        data: [
                            Dial({
                                data: { value: 0.25 },
                                config: {
                                    label: '25%',
                                    foregroundStyle: { stroke: 'cyan' }
                                }
                            }),
                            Dial({
                                data: { value: 0.50 },
                                config: {
                                    label: '50%',
                                    foregroundStyle: { stroke: 'green' }
                                }
                            }),
                            Dial({
                                data: { value: 0.75 },
                                config: {
                                    label: '75%',
                                    foregroundStyle: { stroke: 'red' }
                                }
                            }),
                        ],
                        config: { columns: 3, rows: 1 },
                    })
                })
            }
        ]
    });
}

main.Bar = Bar;
main.ConfiguredWidget = ConfiguredWidget;
var Dashboard_1 = main.Dashboard = Dashboard;
main.Dial = Dial;
main.Grid = Grid;
main.Label = Label;
main.LineChart = LineChart;
main.Metrics = Timeseries;
var Rectangle_1 = main.Rectangle = Rectangle;
var Table_1 = main.Table = Table;
main.loop = loop$1;

class RoomVisualsManager {
    constructor(roomManager) {
        this.roomManager = roomManager;
    }
    run() {
        const { room } = this.roomManager;
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        this.roomVisuals();
        this.baseVisuals();
        this.dataVisuals();
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('Room Visuals Manager', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'rvmcu';
            globalStatsUpdater(room.name, statName, cpuUsed);
        }
    }
    roomVisuals() {
        if (!Memory.roomVisuals)
            return;
        this.controllerVisuals();
        this.spawnVisuals();
        this.cSiteTargetVisuals();
    }
    controllerVisuals() {
        if (!this.roomManager.room.controller)
            return;
        if (this.roomManager.room.controller.my) {
            if (this.roomManager.room.controller.level < 8)
                this.roomManager.room.visual.text(`%${((this.roomManager.room.controller.progress / this.roomManager.room.controller.progressTotal) *
                    100).toFixed(2)}`, this.roomManager.room.controller.pos.x, this.roomManager.room.controller.pos.y - 1, {
                    backgroundColor: 'rgb(255, 0, 0, 0)',
                    font: 0.5,
                    opacity: 1,
                    color: customColors.lightBlue,
                    stroke: customColors.white,
                    strokeWidth: 0.03,
                });
            this.roomManager.room.visual.text(`${this.roomManager.room.controller.level}`, this.roomManager.room.controller.pos, {
                backgroundColor: 'rgb(255, 0, 0, 0)',
                font: 0.5,
                opacity: 0.8,
            });
            return;
        }
        if (this.roomManager.room.controller.reservation) {
            const color = () => {
                if (this.roomManager.room.controller.reservation.username === Memory.me) {
                    return customColors.lightBlue;
                }
                if (Memory.allyPlayers.includes(this.roomManager.room.controller.reservation.username)) {
                    return customColors.green;
                }
                return customColors.red;
            };
            this.roomManager.room.visual.text(`${this.roomManager.room.controller.reservation.ticksToEnd}`, this.roomManager.room.controller.pos, {
                backgroundColor: 'rgb(255, 0, 0, 0)',
                font: 0.5,
                opacity: 0.8,
                color: color(),
                stroke: customColors.white,
                strokeWidth: 0.03,
            });
        }
    }
    spawnVisuals() {
        const spawns = this.roomManager.room.structures.spawn;
        for (const spawn of spawns) {
            if (!spawn.spawning)
                continue;
            const creep = Game.creeps[spawn.spawning.name];
            if (!creep)
                continue;
            this.roomManager.room.visual.text(creep.role, spawn.pos.x, spawn.pos.y + 0.25, {
                backgroundColor: 'rgb(255, 0, 0, 0)',
                font: 0.5,
                opacity: 1,
                color: customColors.lightBlue,
                stroke: customColors.white,
                strokeWidth: 0.03,
            });
            this.roomManager.room.visual.text((spawn.spawning.remainingTime - 1).toString(), spawn.pos.x, spawn.pos.y - 0.25, {
                backgroundColor: 'rgb(255, 0, 0, 0)',
                font: 0.5,
                opacity: 1,
                color: customColors.lightBlue,
                stroke: customColors.white,
                strokeWidth: 0.03,
            });
        }
    }
    cSiteTargetVisuals() {
        if (!this.roomManager.room.memory.CSTID)
            return;
        const constructionTarget = findObjectWithID(this.roomManager.room.memory.CSTID);
        if (constructionTarget)
            this.roomManager.room.visual.text('🚧', constructionTarget.pos);
    }
    baseVisuals() {
        if (!Memory.baseVisuals)
            return;
        if (!this.roomManager.room.memory.PC)
            return;
        for (const stampType in stamps) {
            const stamp = stamps[stampType];
            for (const packedStampAnchor of this.roomManager.room.memory.stampAnchors[stampType]) {
                const stampAnchor = unpackNumAsCoord(packedStampAnchor);
                for (const structureType in stamp.structures) {
                    if (structureType === 'empty')
                        continue;
                    for (const pos of stamp.structures[structureType]) {
                        const x = pos.x + stampAnchor.x - stamp.offset;
                        const y = pos.y + stampAnchor.y - stamp.offset;
                        this.roomManager.room.visual.structure(x, y, structureType, {
                            opacity: 0.3,
                        });
                    }
                }
            }
        }
        this.roomManager.room.visual.connectRoads({
            opacity: 0.3,
        });
    }
    dataVisuals() {
        this.internationalDataVisuals();
        if (!Memory.dataVisuals)
            return;
        if (!global.communes.has(this.roomManager.room.name))
            return;
        this.remoteDataVisuals(this.generalDataVisuals(1));
    }
    internationalDataVisuals() {
        if (!this.roomManager.room.flags.internationalDataVisuals)
            return;
        this.internationalAllyBuildRequestsDataVisuals(this.internationalAllyCombatRequestsDataVisuals(this.internationalAllyResourceRequestsDataVisuals(this.internationalRequestsDataVisuals(this.internationalGeneralDataVisuals(1)))));
    }
    internationalGeneralDataVisuals(y) {
        const headers = [
            'estimatedIncome',
            'commune harvest',
            'remote harvest',
            'upgrade',
            'build',
            'repair other',
            'barricade repair',
            'spawn',
        ];
        const data = [[]];
        let totalEstimatedIncome = 0;
        let totalEnergyHarvested = 0;
        let totalUpgrade = 0;
        let totalBuild = 0;
        let totalRepairOther = 0;
        let totalBarricadeRepair = 0;
        let totalSpawn = 0;
        for (const roomName in Memory.stats.rooms) {
            const room = Game.rooms[roomName];
            const roomStats = Memory.stats.rooms[roomName];
            totalEstimatedIncome += room.estimateIncome();
            totalEnergyHarvested += roomStats.eih;
            totalUpgrade += roomStats.eou;
            totalBuild += roomStats.eob;
            totalRepairOther = roomStats.eoro;
            totalBarricadeRepair = roomStats.eorwr;
            totalSpawn = roomStats.su;
        }
        totalSpawn = totalSpawn / Object.keys(Memory.stats.rooms).length;
        data[0].push(totalEstimatedIncome, totalEnergyHarvested.toFixed(2), totalEnergyHarvested.toFixed(2), totalUpgrade.toFixed(2), totalBuild.toFixed(2), totalRepairOther.toFixed(2), totalBarricadeRepair.toFixed(2), totalSpawn.toFixed(2));
        const height = 3 + data.length;
        Dashboard_1({
            config: {
                room: this.roomManager.room.name,
            },
            widgets: [
                {
                    pos: {
                        x: 1,
                        y,
                    },
                    width: 47,
                    height,
                    widget: Rectangle_1({
                        data: Table_1(() => ({
                            data,
                            config: {
                                label: 'International',
                                headers,
                            },
                        })),
                    }),
                },
            ],
        });
        return y + height;
    }
    internationalRequestsDataVisuals(y) {
        const headers = ['requestName', 'type', 'responderName', 'abandon'];
        const data = [];
        for (const requestName in Memory.claimRequests) {
            const request = Memory.claimRequests[requestName];
            if (!request.responder)
                continue;
            const row = [requestName, 'default', request.responder, request.data[ClaimRequestData.abandon]];
            data.push(row);
        }
        for (const requestName in Memory.combatRequests) {
            const request = Memory.combatRequests[requestName];
            if (request.T !== 'defend' && !request.responder)
                continue;
            const row = [
                requestName,
                request.T,
                request.responder || 'none',
                request.data[CombatRequestData.abandon],
            ];
            data.push(row);
        }
        for (const requestName in Memory.haulRequests) {
            const request = Memory.haulRequests[requestName];
            if (!request.responder)
                continue;
            const row = [
                requestName,
                request.data[HaulRequestData.transfer] ? 'transfer' : 'withdraw',
                request.responder,
                request.data[HaulRequestData.abandon],
            ];
            data.push(row);
        }
        const height = 3 + data.length;
        Dashboard_1({
            config: {
                room: this.roomManager.room.name,
            },
            widgets: [
                {
                    pos: {
                        x: 1,
                        y,
                    },
                    width: 47,
                    height,
                    widget: Rectangle_1({
                        data: Table_1(() => ({
                            data,
                            config: {
                                label: 'My Requests',
                                headers,
                            },
                        })),
                    }),
                },
            ],
        });
        return y + height;
    }
    internationalAllyResourceRequestsDataVisuals(y) {
        const headers = ['room', 'resource', 'amount', 'priority'];
        const data = [];
        for (const request of allyManager.allyRequests) {
            if (request.requestType !== AllyRequestTypes.resource)
                continue;
            const row = [request.roomName, request.resourceType, request.maxAmount, request.priority.toFixed(2)];
            data.push(row);
            continue;
        }
        const height = 3 + data.length;
        Dashboard_1({
            config: {
                room: this.roomManager.room.name,
            },
            widgets: [
                {
                    pos: {
                        x: 1,
                        y,
                    },
                    width: 47,
                    height,
                    widget: Rectangle_1({
                        data: Table_1(() => ({
                            data,
                            config: {
                                label: 'Ally Resource Requests',
                                headers,
                            },
                        })),
                    }),
                },
            ],
        });
        return y + height;
    }
    internationalAllyCombatRequestsDataVisuals(y) {
        const headers = ['room', 'type', 'minDamage', 'minMeleeHeal', 'minRangedHeal', 'priority'];
        const data = [];
        for (const request of allyManager.allyRequests) {
            if (request.requestType !== AllyRequestTypes.attack && request.requestType !== AllyRequestTypes.defense)
                continue;
            const row = [
                request.roomName,
                AllyRequestTypes[request.requestType],
                request.minDamage,
                request.minMeleeHeal,
                request.minRangedHeal,
                request.priority.toFixed(2),
            ];
            data.push(row);
            continue;
        }
        const height = 3 + data.length;
        Dashboard_1({
            config: {
                room: this.roomManager.room.name,
            },
            widgets: [
                {
                    pos: {
                        x: 1,
                        y,
                    },
                    width: 47,
                    height,
                    widget: Rectangle_1({
                        data: Table_1(() => ({
                            data,
                            config: {
                                label: 'Ally Combat Requests',
                                headers,
                            },
                        })),
                    }),
                },
            ],
        });
        return y + height;
    }
    internationalAllyBuildRequestsDataVisuals(y) {
        const headers = ['room', 'priority'];
        const data = [];
        for (const request of allyManager.allyRequests) {
            if (request.requestType !== AllyRequestTypes.build)
                continue;
            const row = [request.roomName, request.priority.toFixed(2)];
            data.push(row);
            continue;
        }
        const height = 3 + data.length;
        Dashboard_1({
            config: {
                room: this.roomManager.room.name,
            },
            widgets: [
                {
                    pos: {
                        x: 1,
                        y,
                    },
                    width: 47,
                    height,
                    widget: Rectangle_1({
                        data: Table_1(() => ({
                            data,
                            config: {
                                label: 'Ally Build Requests',
                                headers,
                            },
                        })),
                    }),
                },
            ],
        });
        return y + height;
    }
    generalDataVisuals(y) {
        const headers = [
            'energy',
            'minEnergy',
            'minRampartHits',
            'estimatedIncome',
            'CHarvest',
            'RHarvest',
            'upgrade',
            'build',
            'repairOther',
            'barricadeRepair',
            'towerInferiority',
            'spawn',
        ];
        const roomStats = Memory.stats.rooms[this.roomManager.room.name];
        const data = [
            [
                this.roomManager.room.resourcesInStoringStructures.energy,
                this.roomManager.room.communeManager.minStoredEnergy,
                this.roomManager.room.communeManager.minRampartHits,
                this.roomManager.room.estimateIncome(),
                roomStats.eih.toFixed(2),
                roomStats.reih.toFixed(2),
                roomStats.eou.toFixed(2),
                roomStats.eob.toFixed(2),
                roomStats.eoro.toFixed(2),
                roomStats.eorwr.toFixed(2),
                this.roomManager.room.towerInferiority || 'false',
                roomStats.su.toFixed(2) + '%',
            ],
        ];
        const height = 3 + data.length;
        Dashboard_1({
            config: {
                room: this.roomManager.room.name,
            },
            widgets: [
                {
                    pos: {
                        x: 1,
                        y,
                    },
                    width: 47,
                    height,
                    widget: Rectangle_1({
                        data: Table_1(() => ({
                            data,
                            config: {
                                label: 'General',
                                headers,
                            },
                        })),
                    }),
                },
            ],
        });
        return y + height;
    }
    requestDataVisuals(y) { }
    remoteDataVisuals(y) {
        const headers = ['remote', 'sourceIndex', 'efficacy', 'harvester', 'hauler', 'reserver', 'abandoned'];
        const data = [];
        for (const remoteInfo of this.roomManager.room.remoteSourceIndexesByEfficacy) {
            const splitRemoteInfo = remoteInfo.split(' ');
            const remoteName = splitRemoteInfo[0];
            const sourceIndex = parseInt(splitRemoteInfo[1]);
            const remoteMemory = Memory.rooms[remoteName];
            const remoteData = remoteMemory.data;
            const row = [];
            row.push(remoteName);
            row.push(sourceIndex);
            row.push(remoteMemory.SPs[sourceIndex].length);
            row.push(remoteData[RemoteData[`remoteSourceHarvester${sourceIndex}`]]);
            row.push(remoteData[RemoteData[`remoteHauler${sourceIndex}`]]);
            row.push(remoteData[RemoteData.remoteReserver]);
            row.push(remoteData[RemoteData.abandon]);
            data.push(row);
        }
        const height = 3 + data.length;
        Dashboard_1({
            config: {
                room: this.roomManager.room.name,
            },
            widgets: [
                {
                    pos: {
                        x: 1,
                        y,
                    },
                    width: 47,
                    height,
                    widget: Rectangle_1({
                        data: Table_1(() => ({
                            data,
                            config: {
                                label: 'Remotes',
                                headers,
                            },
                        })),
                    }),
                },
            ],
        });
        return y + height;
    }
}

class RoomManager {
    constructor() {
        this.containerManager = new ContainerManager(this);
        this.droppedResourceManager = new DroppedResourceManager(this);
        this.creepRoleManager = new CreepRoleManager(this);
        this.powerCreepRoleManager = new PowerCreepRoleManager(this);
        this.endTickCreepManager = new EndTickCreepManager(this);
        this.roomVisualsManager = new RoomVisualsManager(this);
    }
    update(room) {
        this.room = room;
    }
    preTickRun() {
        const { room } = this;
        const roomMemory = room.memory;
        if (Game.time - roomMemory.LST > Math.floor(Math.random() * 200)) {
            room.basicScout();
            cleanRoomMemory(room.name);
        }
        room.moveRequests = new Map();
        room.creepPositions = new Map();
        room.powerCreepPositions = new Map();
        room.myCreeps = {};
        for (const role of creepRoles)
            room.myCreeps[role] = [];
        room.myPowerCreeps = {};
        for (const className of powerCreepClassNames)
            room.myPowerCreeps[className] = [];
        room.myCreepsAmount = 0;
        room.myPowerCreepsAmount = 0;
        room.creepsOfSourceAmount = [];
        room.partsOfRoles = {};
        room.powerTasks = {};
        for (const index in room.sources)
            room.creepsOfSourceAmount.push(0);
        room.squadRequests = new Set();
        if (room.memory.T === 'remote') {
            room.roomLogisticsRequests = {
                transfer: {},
                withdraw: {},
                offer: {},
                pickup: {},
            };
            return;
        }
        if (!room.controller)
            return;
        if (!room.controller.my) {
            if (room.memory.T === 'commune') {
                room.basicScout();
                cleanRoomMemory(room.name);
            }
            return;
        }
        room.communeManager = global.communeManagers[room.name];
        if (!room.communeManager) {
            room.communeManager = new CommuneManager();
            global.communeManagers[room.name] = room.communeManager;
        }
        room.communeManager.update(room);
        room.communeManager.preTickRun();
    }
    run() {
        if (this.room.memory.T === 'remote') {
            this.containerManager.runRemote();
            this.droppedResourceManager.runRemote();
        }
        this.creepRoleManager.run();
        this.powerCreepRoleManager.run();
        this.endTickCreepManager.run();
        this.roomVisualsManager.run();
    }
}

class TickConfig {
    run() {
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        this.configGeneral();
        statsManager.internationalPreTick();
        this.configRooms();
        this.configClaimRequests();
        this.configAllyCreepRequests();
        this.configCombatRequests();
        this.configHaulRequests();
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('Tick Config', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'tccu';
            globalStatsUpdater('', statName, cpuUsed, true);
        }
    }
    configGeneral() {
        global.communes = new Set();
        if (Memory.doChant) {
            if (Memory.chantIndex === chant.length - 1)
                Memory.chantIndex = 0;
            else
                Memory.chantIndex += 1;
        }
        global.constructionSitesCount = Object.keys(Game.constructionSites).length;
        global.logs = ``;
    }
    configRooms() {
        for (const roomName in Game.rooms) {
            const room = Game.rooms[roomName];
            room.roomManager = global.roomManagers[room.name];
            if (!room.roomManager) {
                room.roomManager = new RoomManager();
                global.roomManagers[room.name] = room.roomManager;
            }
            room.roomManager.update(room);
            room.roomManager.preTickRun();
        }
    }
    configClaimRequests() {
        let reservedGCL = Game.gcl.level - global.communes.size;
        for (const roomName in Memory.claimRequests) {
            if (!Memory.claimRequests[roomName].responder)
                continue;
            reservedGCL -= 1;
        }
        const communesForResponding = [];
        for (const roomName of global.communes) {
            if (Memory.rooms[roomName].claimRequest)
                continue;
            if (Game.rooms[roomName].energyCapacityAvailable < 650)
                continue;
            const room = Game.rooms[roomName];
            if (!room.structures.spawn.length)
                continue;
            communesForResponding.push(roomName);
        }
        for (const roomName of internationalManager.claimRequestsByScore) {
            const request = Memory.claimRequests[roomName];
            if (!request)
                continue;
            if (request.data[ClaimRequestData.abandon] > 0) {
                request.data[ClaimRequestData.abandon] -= 1;
                continue;
            }
            delete request.data[ClaimRequestData.abandon];
            if (request.responder && global.communes.has(request.responder))
                continue;
            if (!Memory.autoClaim)
                continue;
            if (reservedGCL <= 0)
                continue;
            const type = Memory.rooms[roomName].T;
            if (type !== 'neutral' && type !== 'commune') {
                Memory.claimRequests[roomName].data[ClaimRequestData.abandon] = 20000;
                continue;
            }
            const communeName = findClosestRoomName(roomName, communesForResponding);
            if (!communeName)
                break;
            if (Game.map.getRoomLinearDistance(communeName, roomName) > maxClaimRequestDistance ||
                advancedFindDistance(communeName, roomName, {
                    typeWeights: {
                        keeper: Infinity,
                        enemy: Infinity,
                        ally: Infinity,
                    },
                }) > maxClaimRequestDistance) {
                Memory.claimRequests[roomName].data[ClaimRequestData.abandon] = 20000;
                continue;
            }
            Memory.rooms[communeName].claimRequest = roomName;
            Memory.claimRequests[roomName].responder = communeName;
            reservedGCL -= 1;
            communesForResponding.splice(lodash.exports.indexOf(communesForResponding, communeName), 1);
        }
    }
    configAllyCreepRequests() {
        for (const roomName in Memory.allyCreepRequests) {
            const request = Memory.allyCreepRequests[roomName];
            if (request.data[AllyCreepRequestData.abandon] > 0) {
                request.data[AllyCreepRequestData.abandon] -= 1;
                continue;
            }
            request.data[AllyCreepRequestData.abandon] = undefined;
            if (request.responder)
                continue;
            const communes = [];
            for (const roomName of global.communes) {
                if (Memory.rooms[roomName].allyCreepRequest)
                    continue;
                const room = Game.rooms[roomName];
                if (!room.structures.spawn.length)
                    continue;
                communes.push(roomName);
            }
            const communeName = findClosestRoomName(roomName, communes);
            if (!communeName)
                continue;
            const maxRange = 20;
            if (Game.map.getRoomLinearDistance(communeName, roomName) > maxRange ||
                advancedFindDistance(communeName, roomName, {
                    typeWeights: {
                        keeper: Infinity,
                        enemy: Infinity,
                        ally: Infinity,
                    },
                }) > maxRange) {
                request.data[AllyCreepRequestData.abandon] = 20000;
                continue;
            }
            Memory.rooms[communeName].allyCreepRequest = roomName;
            request.responder = communeName;
        }
    }
    configCombatRequests() {
        for (const requestName in Memory.combatRequests) {
            const request = Memory.combatRequests[requestName];
            if (request.data[CombatRequestData.abandon])
                request.data[CombatRequestData.abandon] -= 1;
            if (request.responder) {
                internationalManager.creepsByCombatRequest[requestName] = {};
                for (const role of antifaRoles)
                    internationalManager.creepsByCombatRequest[requestName][role] = [];
                request.data[CombatRequestData.quads] = 0;
                continue;
            }
            if (request.data[CombatRequestData.abandon])
                continue;
            const communes = [];
            for (const roomName of global.communes) {
                if (requestName === roomName)
                    continue;
                const room = Game.rooms[roomName];
                if (!room.structures.spawn.length)
                    continue;
                if (room.storage && room.controller.level >= 4) {
                    if (room.memory.combatRequests.length + 1 >= room.communeManager.maxCombatRequests)
                        continue;
                }
                else {
                    if (room.memory.combatRequests.length + 1 >= room.estimateIncome() / 10)
                        continue;
                }
                const minRangedAttackCost = room.communeManager.findMinRangedAttackCost(request.data[CombatRequestData.minDamage]);
                room.communeManager.findMinHealCost(request.data[CombatRequestData.minMeleeHeal] +
                    (request.data[CombatRequestData.maxTowerDamage] || 0));
                const minRangedHealCost = room.communeManager.findMinHealCost(request.data[CombatRequestData.minRangedHeal]);
                if (minRangedAttackCost + minRangedHealCost > room.energyCapacityAvailable)
                    continue;
                const minAttackCost = room.communeManager.findMinMeleeAttackCost(request.data[CombatRequestData.minDamage]);
                if (minAttackCost > room.energyCapacityAvailable)
                    continue;
                communes.push(roomName);
            }
            const communeName = findClosestRoomName(requestName, communes);
            if (!communeName)
                continue;
            if (Game.map.getRoomLinearDistance(communeName, requestName) > maxCombatDistance ||
                advancedFindDistance(communeName, requestName, {
                    typeWeights: {
                        keeper: Infinity,
                        enemy: Infinity,
                        ally: Infinity,
                    },
                }) > maxCombatDistance) {
                request.data[CombatRequestData.abandon] = 20000;
                continue;
            }
            Memory.rooms[communeName].combatRequests.push(requestName);
            request.responder = communeName;
            internationalManager.creepsByCombatRequest[requestName] = {};
            for (const role of antifaRoles)
                internationalManager.creepsByCombatRequest[requestName][role] = [];
        }
    }
    configHaulRequests() {
        for (const requestName in Memory.haulRequests) {
            const request = Memory.haulRequests[requestName];
            if (request.data[HaulRequestData.abandon])
                request.data[HaulRequestData.abandon] -= 1;
            if (request.responder) {
                internationalManager.creepsByHaulRequest[requestName] = [];
                continue;
            }
            const communes = [];
            for (const roomName of global.communes) {
                if (Memory.rooms[roomName].haulRequests.includes(requestName))
                    continue;
                const room = Game.rooms[roomName];
                if (!room.structures.spawn.length)
                    continue;
                if (room.controller.level < 4)
                    continue;
                if (!room.storage)
                    continue;
                if (room.resourcesInStoringStructures.energy / (20000 + room.controller.level * 1000) <
                    room.memory.haulRequests.length)
                    continue;
                communes.push(roomName);
            }
            const communeName = findClosestRoomName(requestName, communes);
            if (!communeName)
                continue;
            if (Game.map.getRoomLinearDistance(communeName, requestName) > maxHaulDistance ||
                advancedFindDistance(communeName, requestName, {
                    typeWeights: {
                        keeper: Infinity,
                        enemy: Infinity,
                        ally: Infinity,
                    },
                }) > maxHaulDistance) {
                request.data[HaulRequestData.abandon] = 20000;
                continue;
            }
            Memory.rooms[communeName].haulRequests.push(requestName);
            request.responder = communeName;
            internationalManager.creepsByHaulRequest[requestName] = [];
        }
    }
}
const tickConfig = new TickConfig();

const creepClasses = {
    source1Harvester: SourceHarvester,
    source2Harvester: SourceHarvester,
    hauler: Hauler,
    requestHauler: RequestHauler,
    controllerUpgrader: ControllerUpgrader,
    builder: Builder,
    maintainer: Maintainer,
    mineralHarvester: MineralHarvester,
    hubHauler: HubHauler,
    fastFiller: FastFiller,
    meleeDefender: MeleeDefender,
    rangedDefender: RangedDefender,
    remoteSourceHarvester0: RemoteHarvester,
    remoteSourceHarvester1: RemoteHarvester,
    remoteHauler: RemoteHauler,
    remoteReserver: RemoteReserver,
    remoteDefender: RemoteDefender,
    remoteCoreAttacker: RemoteCoreAttacker,
    remoteDismantler: RemoteDismantler,
    scout: Scout,
    claimer: Claimer,
    vanguard: Vanguard,
    allyVanguard: AllyVanguard,
    antifaRangedAttacker: Antifa,
    antifaAttacker: Antifa,
    antifaHealer: Antifa,
    antifaDismantler: Antifa,
    antifaDowngrader: Antifa,
};

class CreepOrganizer {
    constructor() { }
    run() {
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        for (const creepName in Memory.creeps) {
            this.processCreep(creepName);
        }
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('Creep Organizer', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'cocu';
            globalStatsUpdater('', statName, cpuUsed, true);
        }
    }
    processCreep(creepName) {
        let creep = Game.creeps[creepName];
        if (!creep) {
            delete Memory.creeps[creepName];
            return;
        }
        const { role } = creep;
        if (!role || role.startsWith('shard'))
            return;
        const creepClass = creepClasses[role];
        if (!creepClass)
            return;
        creep = Game.creeps[creepName] = new creepClass(creep.id);
        creep.room.myCreeps[role].push(creepName);
        creep.room.myCreepsAmount += 1;
        if (!creep.spawning)
            creep.room.creepPositions.set(packCoord(creep.pos), creep.name);
        if (roomLogisticsRoles.has(role))
            creep.roomLogisticsRequestManager();
        const commune = creep.commune;
        if (!commune)
            return;
        if (!commune.controller.my) {
            creep.suicide();
            return;
        }
        creep.preTickManager();
        creep.reservationManager();
        if (!creep.dying)
            commune.creepsFromRoom[role].push(creepName);
        commune.creepsFromRoomAmount += 1;
    }
}
const creepOrganizer = new CreepOrganizer();

let cSiteID;
let cSite;
let cSiteAge;
InternationalManager.prototype.constructionSiteManager = function () {
    for (cSiteID in Game.constructionSites) {
        if (Memory.constructionSites[cSiteID])
            continue;
        Memory.constructionSites[cSiteID] = 0;
    }
    for (cSiteID in Memory.constructionSites) {
        cSite = Game.constructionSites[cSiteID];
        if (!cSite) {
            delete Memory.constructionSites[cSiteID];
            continue;
        }
        cSiteAge = Memory.constructionSites[cSiteID];
        if (cSiteAge > 20000 + cSiteAge * cSite.progress) {
            Game.constructionSites[cSiteID].remove();
            delete Memory.constructionSites[cSiteID];
        }
        Memory.constructionSites[cSiteID] += 1;
    }
};

InternationalManager.prototype.mapVisualsManager = function () {
    if (!Memory.mapVisuals)
        return;
    if (Memory.CPULogging === true)
        var managerCPUStart = Game.cpu.getUsed();
    for (const roomName in Memory.rooms) {
        const roomMemory = Memory.rooms[roomName];
        Game.map.visual.text(roomMemory.T, new RoomPosition(2, 45, roomName), {
            align: 'left',
            fontSize: 5,
        });
        if (roomMemory.T === 'commune') {
            const room = Game.rooms[roomName];
            if (!room)
                continue;
            Game.map.visual.text(`⚡${room.resourcesInStoringStructures.energy}`, new RoomPosition(2, 8, roomName), {
                align: 'left',
                fontSize: 8,
            });
            if (roomMemory.claimRequest) {
                Game.map.visual.line(room.anchor || new RoomPosition(25, 25, roomName), new RoomPosition(25, 25, roomMemory.claimRequest), {
                    color: customColors.lightBlue,
                    width: 1.2,
                    opacity: 0.3,
                });
            }
            if (roomMemory.allyCreepRequest) {
                Game.map.visual.line(room.anchor || new RoomPosition(25, 25, roomName), new RoomPosition(25, 25, roomMemory.allyCreepRequest), {
                    color: customColors.green,
                    width: 1.2,
                    opacity: 0.3,
                });
            }
            if (roomMemory.combatRequests.length) {
                for (const requestName of roomMemory.combatRequests) {
                    Game.map.visual.line(room.anchor || new RoomPosition(25, 25, roomName), new RoomPosition(25, 25, requestName), {
                        color: customColors.red,
                        width: 1.2,
                        opacity: 0.3,
                    });
                }
            }
            continue;
        }
        if (roomMemory.T === 'remote') {
            const commune = Game.rooms[roomMemory.CN];
            if (commune) {
                const possibleReservation = commune.energyCapacityAvailable >= 650;
                for (const sourceIndex in roomMemory.SP) {
                    const positions = unpackPosList(roomMemory.SP[sourceIndex]);
                    Game.map.visual.line(positions[0], commune.anchor || new RoomPosition(25, 25, commune.name), {
                        color: customColors.yellow,
                        width: 1.2,
                        opacity: 0.3,
                    });
                    const income = (possibleReservation ? 10 : 5) -
                        Math.floor(roomMemory.data[RemoteData[remoteHarvesterRoles[sourceIndex]]] * minHarvestWorkRatio);
                    Game.map.visual.text(`⛏️${income},🚶‍♀️${roomMemory.SPs[sourceIndex].length}`, new RoomPosition(positions[0].x, positions[0].y, roomName), {
                        align: 'center',
                        fontSize: 5,
                    });
                }
            }
            if (roomMemory.data[RemoteData.abandon]) {
                Game.map.visual.text(`❌${roomMemory.data[RemoteData.abandon].toString()}`, new RoomPosition(2, 16, roomName), {
                    align: 'left',
                    fontSize: 8,
                });
            }
            continue;
        }
        if (roomMemory.NC) {
            Game.map.visual.circle(new RoomPosition(25, 25, roomName), {
                stroke: customColors.red,
                strokeWidth: 2,
                fill: 'transparent',
            });
            continue;
        }
    }
    for (const roomName in Memory.claimRequests) {
        Game.map.visual.text(`💵${(Memory.claimRequests[roomName].data[ClaimRequestData.score] || 0).toFixed(2)}`, new RoomPosition(2, 24, roomName), {
            align: 'left',
            fontSize: 8,
        });
        if (Memory.claimRequests[roomName].data[ClaimRequestData.abandon]) {
            Game.map.visual.text(`❌${Memory.claimRequests[roomName].data[ClaimRequestData.abandon].toString()}`, new RoomPosition(2, 16, roomName), {
                align: 'left',
                fontSize: 8,
            });
        }
    }
    if (Memory.CPULogging === true) {
        const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
        customLog('Map Visuals Manager', cpuUsed.toFixed(2), {
            textColor: customColors.white,
            bgColor: customColors.lightBlue,
        });
        const statName = 'mvmcu';
        globalStatsUpdater('', statName, cpuUsed, true);
    }
};

InternationalManager.prototype.endTickManager = function () {
    allyManager.endTickManager();
    statsManager.internationalEndTick();
    if (!Memory.logging)
        return;
    for (let i = 0; i < 99; i += 1)
        console.log();
    const CPUColor = findCPUColor();
    customLog('Total CPU', `${Game.cpu.getUsed().toFixed(2)} / ${Game.cpu.limit} CPU Bucket: ${Game.cpu.bucket}`, {
        textColor: customColors.white,
        bgColor: CPUColor,
    });
    console.log(global.logs);
};

Room.prototype.actionVisual = function (pos1, pos2, type) {
    const room = this;
    if (!Memory.roomVisuals)
        return;
    const colorsForTypes = {
        success: customColors.lightBlue,
        fail: customColors.red,
    };
    if (!type)
        type = 'success';
    const color = colorsForTypes[type];
    room.visual.circle(pos2.x, pos2.y, { stroke: color });
    room.visual.line(pos1, pos2, { color });
};
Room.prototype.targetVisual = function (coord1, coord2, visualize = Memory.roomVisuals) {
    if (!visualize)
        return;
    this.visual.line(coord1.x, coord1.y, coord2.x, coord2.y, { color: customColors.green, opacity: 0.3 });
};
Room.prototype.advancedFindPath = function (opts) {
    const room = this;
    opts.plainCost = opts.plainCost || defaultPlainCost;
    opts.swampCost = opts.swampCost || defaultSwampCost;
    const allowedRoomNames = new Set([opts.origin.roomName]);
    function generateRoute() {
        for (const goal of opts.goals) {
            if (opts.origin.roomName === goal.pos.roomName)
                continue;
            function weightRoom(roomName) {
                const roomMemory = Memory.rooms[roomName];
                if (!roomMemory) {
                    if (roomName === goal.pos.roomName)
                        return 1;
                    return Infinity;
                }
                if (opts.avoidAbandonedRemotes && roomMemory.T === 'remote' && roomMemory.data[RemoteData.abandon])
                    return Infinity;
                if (roomName === goal.pos.roomName)
                    return 1;
                if (opts.typeWeights && opts.typeWeights[roomMemory.T])
                    return opts.typeWeights[roomMemory.T];
                return 1;
            }
            const route = Game.map.findRoute(opts.origin.roomName, goal.pos.roomName, {
                routeCallback: weightRoom,
            });
            if (route === ERR_NO_PATH)
                continue;
            for (const roomRoute of route) {
                allowedRoomNames.add(roomRoute.room);
                const exits = Game.map.describeExits(roomRoute.room);
                for (const exit in exits) {
                    const roomName = exits[exit];
                    if (weightRoom(roomName) > 1)
                        continue;
                    allowedRoomNames.add(roomName);
                }
            }
        }
    }
    generateRoute();
    if (opts.weightStructurePlans) {
        if (!opts.weightCoords)
            opts.weightCoords = {};
        for (const roomName of allowedRoomNames) {
            if (!opts.weightCoords[roomName])
                opts.weightCoords[roomName] = {};
        }
        for (const roomName of allowedRoomNames) {
            const roomMemory = Memory.rooms[roomName];
            if (roomMemory.T === 'commune') {
                for (const stampType in stamps) {
                    const stamp = stamps[stampType];
                    for (const packedStampAnchor of roomMemory.stampAnchors[stampType]) {
                        const stampAnchor = unpackNumAsCoord(packedStampAnchor);
                        for (const key in stamp.structures) {
                            const structureType = key;
                            if (structureType === 'empty')
                                continue;
                            let weight = 0;
                            if (impassibleStructureTypesSet.has(structureType))
                                weight = 255;
                            else if (structureType === STRUCTURE_ROAD)
                                weight = 1;
                            for (const pos of stamp.structures[structureType]) {
                                const x = pos.x + stampAnchor.x - stamp.offset;
                                const y = pos.y + stampAnchor.y - stamp.offset;
                                const currentWeight = opts.weightCoords[roomName][packXYAsCoord(x, y)] || 0;
                                opts.weightCoords[roomName][packXYAsCoord(x, y)] = Math.max(weight, currentWeight);
                            }
                        }
                    }
                }
                const room = Game.rooms[roomName];
                if (room.centerUpgradePos)
                    opts.weightCoords[roomName][packCoord(room.centerUpgradePos)] = 255;
                if (roomMemory.SPs.length) {
                    for (const path of Game.rooms[roomName].sourcePaths) {
                        for (const pos of path)
                            opts.weightCoords[pos.roomName][packCoord(pos)] = 1;
                    }
                }
            }
            else if (roomMemory.T === 'remote') {
                for (const packedPath of roomMemory.SPs) {
                    const path = unpackPosList(packedPath);
                    for (const pos of path) {
                        if (!opts.weightCoords[pos.roomName])
                            opts.weightCoords[pos.roomName] = {};
                        opts.weightCoords[pos.roomName][packCoord(pos)] = 1;
                    }
                }
            }
        }
    }
    function generatePath() {
        const pathFinderResult = PathFinder.search(opts.origin, opts.goals, {
            plainCost: opts.plainCost,
            swampCost: opts.swampCost,
            maxRooms: opts.maxRooms ? Math.min(allowedRoomNames.size, opts.maxRooms) : allowedRoomNames.size,
            maxOps: 100000,
            heuristicWeight: 1,
            flee: opts.flee,
            roomCallback(roomName) {
                const room = Game.rooms[roomName];
                if (!allowedRoomNames.has(roomName))
                    return false;
                const cm = new PathFinder.CostMatrix();
                if (allowedRoomNames.size <= 1) {
                    let x;
                    let y = 0;
                    for (x = 0; x < roomDimensions; x += 1)
                        cm.set(x, y, 255);
                    x = 0;
                    for (y = 0; y < roomDimensions; y += 1)
                        cm.set(x, y, 255);
                    y = roomDimensions - 1;
                    for (x = 0; x < roomDimensions; x += 1)
                        cm.set(x, y, 255);
                    x = roomDimensions - 1;
                    for (y = 0; y < roomDimensions; y += 1)
                        cm.set(x, y, 255);
                }
                if (opts.weightCoords && opts.weightCoords[roomName]) {
                    for (const packedCoord in opts.weightCoords[roomName]) {
                        const coord = unpackCoord(packedCoord);
                        cm.set(coord.x, coord.y, opts.weightCoords[roomName][packedCoord]);
                    }
                }
                if (opts.weightCoordMaps) {
                    for (const coordMap of opts.weightCoordMaps) {
                        for (const index in coordMap) {
                            const packedCoord = parseInt(index);
                            if (coordMap[packedCoord] === 0)
                                continue;
                            const coord = unpackNumAsCoord(packedCoord);
                            cm.set(coord.x, coord.y, coordMap[packedCoord]);
                        }
                    }
                }
                if (!room)
                    return cm;
                if (opts.avoidStationaryPositions) {
                    for (const index in room.sources) {
                        for (const pos of room.sourcePositions[index])
                            cm.set(pos.x, pos.y, 10);
                    }
                    if (room.anchor) {
                        const upgradePositions = room.upgradePositions;
                        const deliverUpgradePos = room.anchor.findClosestByPath(upgradePositions, {
                            ignoreCreeps: true,
                            ignoreDestructibleStructures: true,
                            ignoreRoads: true,
                        });
                        for (const pos of upgradePositions) {
                            if (areCoordsEqual(pos, deliverUpgradePos))
                                continue;
                            cm.set(pos.x, pos.y, 10);
                        }
                    }
                    const hubAnchor = room.memory.stampAnchors && room.memory.stampAnchors.hub[0]
                        ? unpackNumAsPos(room.memory.stampAnchors.hub[0], roomName)
                        : undefined;
                    if (hubAnchor)
                        cm.set(hubAnchor.x, hubAnchor.y, 10);
                    for (const pos of room.fastFillerPositions)
                        cm.set(pos.x, pos.y, 10);
                }
                if (opts.creep &&
                    (!opts.creep.memory.SMNs || opts.creep.memory.SMNs.length < 3) &&
                    (!opts.weightStructures || !opts.weightStructures.road)) {
                    let roadCost = 1;
                    if (!opts.creep.memory.R)
                        roadCost = opts.plainCost;
                    for (const road of room.structures.road)
                        cm.set(road.pos.x, road.pos.y, roadCost);
                }
                for (const key in opts.weightStructures) {
                    const structureType = key;
                    for (const structure of room.structures[structureType])
                        cm.set(structure.pos.x, structure.pos.y, opts.weightStructures[structureType]);
                }
                for (const portal of room.structures.portal)
                    cm.set(portal.pos.x, portal.pos.y, 255);
                for (const cSite of room.allyCSites)
                    cm.set(cSite.pos.x, cSite.pos.y, 255);
                avoidEnemyRanges();
                function avoidEnemyRanges() {
                    if (!opts.avoidEnemyRanges)
                        return;
                    if (room.controller && room.controller.safeMode && room.controller.my)
                        return;
                    for (const packedCoord of room.enemyThreatCoords) {
                        const coord = unpackCoord(packedCoord);
                        cm.set(coord.x, coord.y, 255);
                    }
                }
                if (opts.avoidNotMyCreeps && (!room.controller || !room.controller.safeMode)) {
                    for (const creep of room.enemyCreeps)
                        cm.set(creep.pos.x, creep.pos.y, 255);
                    for (const creep of room.allyCreeps)
                        cm.set(creep.pos.x, creep.pos.y, 255);
                    for (const creep of room.find(FIND_HOSTILE_POWER_CREEPS))
                        cm.set(creep.pos.x, creep.pos.y, 255);
                }
                if (opts.avoidImpassibleStructures) {
                    for (const rampart of room.structures.rampart) {
                        if (rampart.my) {
                            if (!opts.myRampartWeight)
                                continue;
                            cm.set(rampart.pos.x, rampart.pos.y, opts.myRampartWeight);
                            continue;
                        }
                        if (rampart.isPublic && Memory.allyPlayers.includes(rampart.owner.username))
                            continue;
                        cm.set(rampart.pos.x, rampart.pos.y, 255);
                    }
                    for (const structureType of impassibleStructureTypes) {
                        for (const structure of room.structures[structureType]) {
                            cm.set(structure.pos.x, structure.pos.y, 255);
                        }
                        for (const cSite of room.cSites[structureType]) {
                            cm.set(cSite.pos.x, cSite.pos.y, 255);
                        }
                    }
                }
                if (opts.weightCostMatrixes) {
                    for (let x = 0; x < roomDimensions; x += 1) {
                        for (let y = 0; y < roomDimensions; y += 1) {
                            for (const weightCMName of opts.weightCostMatrixes) {
                                const weightCM = room[weightCMName];
                                if (!weightCM)
                                    continue;
                                cm.set(x, y, weightCM.get(x, y));
                            }
                        }
                    }
                }
                return cm;
            },
        });
        if (pathFinderResult.incomplete) {
            customLog('Incomplete Path', `${pathFinderResult.path}, ${JSON.stringify(opts.goals)}`, {
                textColor: customColors.white,
                bgColor: customColors.red,
            });
            room.pathVisual(pathFinderResult.path, 'red');
            room.errorVisual(opts.origin);
            let lastPos = opts.origin;
            for (const goal of opts.goals) {
                if (lastPos.roomName !== goal.pos.roomName)
                    continue;
                room.visual.line(lastPos, goal.pos, {
                    color: customColors.red,
                    width: 0.15,
                    opacity: 0.3,
                    lineStyle: 'solid',
                });
                lastPos = goal.pos;
            }
            return [];
        }
        return pathFinderResult.path;
    }
    return generatePath();
};
Room.prototype.scoutByRoomName = function () {
    const [EWstring, NSstring] = this.name.match(/\d+/g);
    const EW = parseInt(EWstring);
    const NS = parseInt(NSstring);
    if (EW % 10 === 0 && NS % 10 === 0)
        return (this.memory.T = 'intersection');
    if (EW % 10 === 0 || NS % 10 === 0)
        return (this.memory.T = 'highway');
    if (EW % 5 === 0 && NS % 5 === 0)
        return (this.memory.T = 'keeperCenter');
    if (Math.abs(5 - (EW % 10)) <= 1 && Math.abs(5 - (NS % 10)) <= 1)
        return (this.memory.T = 'keeper');
    return false;
};
Room.prototype.scoutReservedRemote = function () {
    const { controller } = this;
    if (!controller.reservation)
        return false;
    if (controller.reservation.username === Memory.me)
        return false;
    if (controller.reservation.username === 'Invader')
        return false;
    const harvestedSources = this.find(FIND_SOURCES, {
        filter: source => source.ticksToRegeneration > 0,
    });
    if (!this.structures.road && !this.structures.container && !harvestedSources)
        return false;
    if (!Memory.allyPlayers.includes(controller.reservation.username)) {
        this.memory.owner = controller.reservation.username;
        return (this.memory.T = 'enemyRemote');
    }
    this.memory.owner = controller.reservation.username;
    return (this.memory.T = 'allyRemote');
};
Room.prototype.scoutUnreservedRemote = function () {
    const { controller } = this;
    if (controller.reservation) {
        if (controller.reservation.username === Memory.me)
            return false;
        if (controller.reservation.username === 'Invader')
            return false;
    }
    const harvestedSources = this.find(FIND_SOURCES, {
        filter: source => source.ticksToRegeneration > 0,
    });
    if (!harvestedSources.length)
        return false;
    const creepsNotMine = this.enemyCreeps.concat(this.allyCreeps);
    for (const creep of creepsNotMine) {
        if (creep.owner.username === 'Invader')
            continue;
        if (creep.parts.work > 0) {
            if (Memory.allyPlayers.includes(creep.owner.username)) {
                this.memory.owner = creep.owner.username;
                return (this.memory.T = 'allyRemote');
            }
            this.memory.owner = creep.owner.username;
            this.createHarassCombatRequest();
            return (this.memory.T = 'enemyRemote');
        }
    }
    return false;
};
Room.prototype.scoutEnemyRoom = function () {
    const { controller } = this;
    const playerName = controller.owner.username;
    const roomMemory = this.memory;
    roomMemory.T = 'enemy';
    let player = Memory.players[playerName];
    if (!player) {
        player = Memory.players[playerName] = {
            data: [0],
        };
        for (const key in PlayerData)
            this.memory.data[parseInt(key)] = 0;
    }
    const level = controller.level;
    roomMemory.level = level;
    roomMemory.powerEnabled = controller.isPowerEnabled;
    let threat = 0;
    threat += Math.pow(level, 2);
    threat += this.structures.spawn.length * 50;
    threat += this.structures.nuker.length * 300;
    threat += Math.pow(this.structures.lab.length * 10000, 0.4);
    threat = Math.floor(threat);
    roomMemory.OS = threat;
    Memory.players[playerName].data[PlayerData.offensiveStrength] = Math.max(threat, player.data[PlayerData.offensiveStrength]);
    threat = 0;
    const energy = this.resourcesInStoringStructures.energy;
    roomMemory.energy = energy;
    threat += Math.pow(energy, 0.5);
    const ramparts = this.structures.rampart;
    const avgRampartHits = ramparts.reduce((total, rampart) => total + rampart.hits, 0) / ramparts.length;
    threat += Math.pow(avgRampartHits, 0.5);
    threat += this.structures.spawn.length * 100;
    threat += this.structures.tower.length * 300;
    threat += Math.pow(this.structures.extension.length * 400, 0.8);
    const hasTerminal = this.terminal !== undefined;
    if (hasTerminal) {
        threat += 800;
        roomMemory.terminal = true;
    }
    threat = Math.floor(threat);
    roomMemory.DS = threat;
    Memory.players[playerName].data[PlayerData.defensiveStrength] = Math.max(threat, player.data[PlayerData.defensiveStrength]);
    this.createAttackCombatRequest({
        maxTowerDamage: Math.ceil(this.structures.tower.length * TOWER_POWER_ATTACK * 1.1),
        minDamage: 50,
    });
    return roomMemory.T;
};
Room.prototype.scoutMyRemote = function (scoutingRoom) {
    if (this.memory.T === 'remote' && !global.communes.has(this.memory.CN))
        this.memory.T = 'neutral';
    let distance = Game.map.getRoomLinearDistance(scoutingRoom.name, this.name);
    if (distance > maxRemoteRoomDistance)
        return this.memory.T;
    if (distance <= maxRemoteRoomDistance)
        distance = advancedFindDistance(scoutingRoom.name, this.name, {
            typeWeights: {
                keeper: Infinity,
                enemy: Infinity,
                enemyRemote: Infinity,
                ally: Infinity,
                allyRemote: Infinity,
            },
        });
    if (distance > maxRemoteRoomDistance)
        return this.memory.T;
    if (this.memory.T === 'remote' && scoutingRoom.name === this.memory.CN)
        return this.memory.T;
    if (!scoutingRoom.anchor)
        return this.memory.T;
    const newSourceEfficacies = [];
    let newSourceEfficaciesTotal = 0;
    for (const index in this.sources) {
        const path = this.advancedFindPath({
            origin: this.sourcePositions[index][0],
            goals: [{ pos: scoutingRoom.anchor, range: 4 }],
            typeWeights: {
                enemy: Infinity,
                ally: Infinity,
                keeper: Infinity,
                enemyRemote: Infinity,
                allyRemote: Infinity,
            },
            plainCost: defaultPlainCost,
            weightStructurePlans: true,
        });
        if (path.length > 250)
            return this.memory.T;
        let newSourceEfficacy = 0;
        for (const pos of path) {
            newSourceEfficacy +=
                internationalManager.getTerrainCoords(pos.roomName)[packAsNum(pos)] === TERRAIN_MASK_SWAMP
                    ? defaultSwampCost
                    : 1;
        }
        newSourceEfficacies.push(newSourceEfficacy);
        newSourceEfficaciesTotal += newSourceEfficacy;
    }
    const newReservationEfficacy = this.advancedFindPath({
        origin: this.controller.pos,
        goals: [{ pos: scoutingRoom.anchor, range: 4 }],
        typeWeights: {
            enemy: Infinity,
            ally: Infinity,
            keeper: Infinity,
            enemyRemote: Infinity,
            allyRemote: Infinity,
        },
    }).length;
    if (this.memory.T !== 'remote') {
        this.memory.T = 'remote';
        this.memory.CN = scoutingRoom.name;
        delete this.memory.SP;
        delete this._sourcePositions;
        this.sourcePositions;
        delete this.memory.SPs;
        delete this._sourcePaths;
        this.sourcePaths;
        delete this.memory.CP;
        delete this._controllerPositions;
        this.controllerPositions;
        scoutingRoom.memory.remotes.push(this.name);
        this.memory.RE = newReservationEfficacy;
        this.memory.data = [];
        for (const key in RemoteData)
            this.memory.data[parseInt(key)] = 0;
        return this.memory.T;
    }
    const currentRemoteEfficacy = this.memory.SPs.reduce((sum, el) => sum + el.length, 0) / this.memory.SPs.length + this.memory.RE;
    const newRemoteEfficacy = newSourceEfficaciesTotal / newSourceEfficacies.length + newReservationEfficacy;
    if (newRemoteEfficacy >= currentRemoteEfficacy)
        return this.memory.T;
    this.memory.CN = scoutingRoom.name;
    delete this.memory.SP;
    delete this._sourcePositions;
    this.sourcePositions;
    delete this.memory.SPs;
    delete this._sourcePaths;
    this.sourcePaths;
    delete this.memory.CP;
    delete this._controllerPositions;
    this.controllerPositions;
    scoutingRoom.memory.remotes.push(this.name);
    this.memory.RE = newReservationEfficacy;
    this.memory.data = [];
    for (const key in RemoteData)
        this.memory.data[parseInt(key)] = 0;
    return this.memory.T;
};
Room.prototype.basicScout = function () {
    const { controller } = this;
    this.memory.LST = Game.time;
    if (stagnantRoomTypes.has(this.memory.T))
        return this.memory.T;
    if (controller) {
        if (controller.owner) {
            if (controller.my)
                return this.memory.T;
            const owner = controller.owner.username;
            this.memory.owner = owner;
            if (Memory.allyPlayers.includes(owner))
                return (this.memory.T = 'ally');
            if (this.scoutEnemyRoom())
                return this.memory.T;
            return this.memory.T;
        }
        if (this.scoutReservedRemote())
            return this.memory.T;
        if (this.scoutUnreservedRemote())
            return this.memory.T;
        if (this.memory.T === 'remote')
            return this.memory.T;
        this.createClaimRequest();
        return (this.memory.T = 'neutral');
    }
    return this.memory.T;
};
Room.prototype.advancedScout = function (scoutingRoom) {
    const { controller } = this;
    this.memory.LST = Game.time;
    if (stagnantRoomTypes.has(this.memory.T))
        return this.memory.T;
    if (this.scoutByRoomName())
        return this.memory.T;
    if (controller) {
        if (controller.owner) {
            if (controller.my)
                return this.memory.T;
            const owner = controller.owner.username;
            this.memory.owner = owner;
            if (Memory.allyPlayers.includes(owner))
                return (this.memory.T = 'ally');
            if (this.scoutEnemyRoom())
                return this.memory.T;
            return this.memory.T;
        }
        if (this.scoutReservedRemote())
            return this.memory.T;
        if (this.scoutUnreservedRemote())
            return this.memory.T;
        if (this.scoutMyRemote(scoutingRoom))
            return this.memory.T;
        this.createClaimRequest();
        return (this.memory.T = 'neutral');
    }
    return this.memory.T;
};
Room.prototype.createAttackCombatRequest = function (opts) {
    if (!Memory.autoAttack)
        return;
    if (this.controller && this.controller.safeMode)
        return;
    let request = Memory.combatRequests[this.name];
    if (request) {
        if (request.T !== 'attack')
            return;
        if (!opts)
            return;
        for (const key in opts) {
            request.data[CombatRequestData[key]] =
                opts[key];
        }
        return;
    }
    if (!this.enemyCreeps.length &&
        !this.find(FIND_HOSTILE_STRUCTURES).find(structure => structure.structureType !== STRUCTURE_CONTROLLER))
        return;
    if (Memory.nonAggressionPlayers.includes(this.memory.owner))
        return;
    request = Memory.combatRequests[this.name] = {
        T: 'attack',
        data: [0],
    };
    for (const key in CombatRequestData)
        request.data[key] = 0;
    request.data[CombatRequestData.minDamage] = 10;
    request.data[CombatRequestData.minMeleeHeal] = 10;
    request.data[CombatRequestData.minRangedHeal] = 10;
    request.data[CombatRequestData.quadQuota] = 1;
    if (opts) {
        for (const key in opts) {
            request.data[CombatRequestData[key]] =
                opts[key];
        }
        return;
    }
};
Room.prototype.createHarassCombatRequest = function (opts) {
    if (!Memory.autoAttack)
        return;
    let request = Memory.combatRequests[this.name];
    if (request) {
        if (request.T !== 'harass')
            return;
        if (!opts)
            return;
        for (const key in opts) {
            request.data[CombatRequestData[key]] =
                opts[key];
        }
        return;
    }
    if (!this.enemyCreeps.length)
        return;
    if (Memory.nonAggressionPlayers.includes(this.memory.owner))
        return;
    if (this.enemyAttackers.length > 0)
        return;
    request = Memory.combatRequests[this.name] = {
        T: 'harass',
        data: [0],
    };
    for (const key in CombatRequestData)
        request.data[key] = 0;
    request.data[CombatRequestData.minDamage] = 10;
    request.data[CombatRequestData.minMeleeHeal] = 10;
    request.data[CombatRequestData.minRangedHeal] = 10;
    if (opts) {
        for (const key in opts) {
            request.data[CombatRequestData[key]] =
                opts[key];
        }
        return;
    }
};
Room.prototype.createDefendCombatRequest = function (opts) {
    let request = Memory.combatRequests[this.name];
    if (request) {
        if (request.T !== 'defend')
            return;
        if (!opts)
            return;
        for (const key in opts) {
            request.data[CombatRequestData[key]] =
                opts[key];
        }
        return;
    }
    request = Memory.combatRequests[this.name] = {
        T: 'defend',
        data: [0],
    };
    for (const key in CombatRequestData)
        request.data[key] = 0;
    request.data[CombatRequestData.inactionTimer] = 0;
    request.data[CombatRequestData.inactionTimerMax] = randomRange(5000, 5000 + Math.floor(Math.random() * 5000));
    if (opts) {
        for (const key in opts) {
            request.data[CombatRequestData[key]] =
                opts[key];
        }
        return;
    }
    request.data[CombatRequestData.minDamage] = 40;
    request.data[CombatRequestData.minMeleeHeal] = 10;
    request.data[CombatRequestData.minRangedHeal] = 10;
};
Room.prototype.distanceTransform = function (initialCoords, visuals, minAvoid = 1, x1 = 0, y1 = 0, x2 = roomDimensions - 1, y2 = roomDimensions - 1) {
    const distanceCoords = new Uint8Array(2500);
    if (!initialCoords)
        initialCoords = new Uint8Array(internationalManager.getTerrainCoords(this.name));
    let x;
    let y;
    let minX = Math.max(x1 - 1, 0);
    let minY = Math.max(y1 - 1, 0);
    let maxX = Math.min(x2 + 1, roomDimensions - 1);
    let maxY = Math.min(y2 + 1, roomDimensions - 1);
    let packedCoord;
    for (x = minX; x <= maxX; x += 1) {
        for (y = minY; y <= maxY; y += 1) {
            packedCoord = packXYAsNum(x, y);
            distanceCoords[packedCoord] = initialCoords[packedCoord] >= minAvoid ? 0 : 255;
        }
    }
    let top;
    let left;
    let topLeft;
    let topRight;
    let bottomLeft;
    for (x = x1; x <= x2; x += 1) {
        for (y = y1; y <= y2; y += 1) {
            top = distanceCoords[packXYAsNum(x, y - 1)] || 0;
            left = distanceCoords[packXYAsNum(x - 1, y)] || 0;
            topLeft = distanceCoords[packXYAsNum(x - 1, y - 1)] || 0;
            topRight = distanceCoords[packXYAsNum(x + 1, y - 1)] || 0;
            bottomLeft = distanceCoords[packXYAsNum(x - 1, y + 1)] || 0;
            packedCoord = packXYAsNum(x, y);
            distanceCoords[packedCoord] = Math.min(Math.min(top, left, topLeft, topRight, bottomLeft) + 1, distanceCoords[packedCoord]);
        }
    }
    let bottom;
    let right;
    let bottomRight;
    for (x = x2; x >= x1; x -= 1) {
        for (y = y2; y >= y1; y -= 1) {
            bottom = distanceCoords[packXYAsNum(x, y + 1)] || 0;
            right = distanceCoords[packXYAsNum(x + 1, y)] || 0;
            bottomRight = distanceCoords[packXYAsNum(x + 1, y + 1)] || 0;
            topRight = distanceCoords[packXYAsNum(x + 1, y - 1)] || 0;
            bottomLeft = distanceCoords[packXYAsNum(x - 1, y + 1)] || 0;
            packedCoord = packXYAsNum(x, y);
            distanceCoords[packedCoord] = Math.min(Math.min(bottom, right, bottomRight, topRight, bottomLeft) + 1, distanceCoords[packedCoord]);
        }
    }
    if (visuals) {
        for (x = x1; x <= x2; x += 1) {
            for (y = y1; y <= y2; y += 1) {
                this.visual.rect(x - 0.5, y - 0.5, 1, 1, {
                    fill: `hsl(${200}${distanceCoords[packXYAsNum(x, y)] * 10}, 100%, 60%)`,
                    opacity: 0.4,
                });
                this.visual.text(distanceCoords[packXYAsNum(x, y)].toString(), x, y);
            }
        }
    }
    return distanceCoords;
};
Room.prototype.diagonalDistanceTransform = function (initialCoords, visuals, minAvoid = 1, x1 = 0, y1 = 0, x2 = roomDimensions - 1, y2 = roomDimensions - 1) {
    const distanceCoords = new Uint8Array(2500);
    if (!initialCoords)
        initialCoords = new Uint8Array(internationalManager.getTerrainCoords(this.name));
    let x;
    let y;
    let packedCoord;
    for (x = x1; x <= x2; x += 1) {
        for (y = y1; y <= y2; y += 1) {
            packedCoord = packXYAsNum(x, y);
            distanceCoords[packedCoord] = initialCoords[packedCoord] >= minAvoid ? 0 : 255;
        }
    }
    let top;
    let left;
    for (x = x1; x <= x2; x += 1) {
        for (y = y1; y <= y2; y += 1) {
            top = distanceCoords[packXYAsNum(x, y - 1)] || 0;
            left = distanceCoords[packXYAsNum(x - 1, y)] || 0;
            packedCoord = packXYAsNum(x, y);
            distanceCoords[packedCoord] = Math.min(Math.min(top, left) + 1, distanceCoords[packedCoord]);
        }
    }
    let bottom;
    let right;
    for (x = x2; x >= x1; x -= 1) {
        for (y = y2; y >= y1; y -= 1) {
            bottom = distanceCoords[packXYAsNum(x, y + 1)] || 0;
            right = distanceCoords[packXYAsNum(x + 1, y)] || 0;
            packedCoord = packXYAsNum(x, y);
            distanceCoords[packedCoord] = Math.min(Math.min(bottom, right) + 1, distanceCoords[packedCoord]);
        }
    }
    if (visuals) {
        for (x = x1; x <= x2; x += 1) {
            for (y = y1; y <= y2; y += 1) {
                this.visual.rect(x - 0.5, y - 0.5, 1, 1, {
                    fill: `hsl(${200}${distanceCoords[packXYAsNum(x, y)] * 10}, 100%, 60%)`,
                    opacity: 0.4,
                });
                this.visual.text(distanceCoords[packXYAsNum(x, y)].toString(), x, y);
            }
        }
    }
    return distanceCoords;
};
Room.prototype.floodFill = function (seeds, coordMap, visuals) {
    const floodCoords = new Uint8Array(2500);
    const terrainCoords = new Uint8Array(internationalManager.getTerrainCoords(this.name));
    const visitedCoords = new Uint8Array(2500);
    let depth = 0;
    let thisGeneration = seeds;
    let nextGeneration = [];
    for (const coord of seeds)
        visitedCoords[packAsNum(coord)] = 1;
    while (thisGeneration.length) {
        nextGeneration = [];
        for (const coord1 of thisGeneration) {
            if (depth > 0) {
                const packedCoord1 = packAsNum(coord1);
                if (terrainCoords[packedCoord1] === 255)
                    continue;
                if (coordMap && coordMap[packAsNum(coord1)] > 0)
                    continue;
                floodCoords[packedCoord1] = depth;
            }
            for (const coord2 of findCoordsInsideRect(coord1.x - 1, coord1.y - 1, coord1.x + 1, coord1.y + 1)) {
                const packedCoord2 = packAsNum(coord2);
                if (visitedCoords[packedCoord2] === 1)
                    continue;
                visitedCoords[packedCoord2] = 1;
                nextGeneration.push(coord2);
            }
        }
        thisGeneration = nextGeneration;
        depth += 1;
    }
    return floodCoords;
};
Room.prototype.findClosestPosOfValue = function (opts) {
    const room = this;
    if (opts.visuals) {
        for (const coord of opts.startCoords)
            this.visual.circle(coord.x, coord.y, {
                stroke: customColors.yellow,
            });
    }
    function isViableAnchor(coord1, iterations) {
        const posValue = opts.coordMap[packAsNum(coord1)];
        if (posValue === 255)
            return false;
        if (posValue === 0)
            return false;
        if (opts.protectionOffset) {
            if (isNearRoomEdge(coord1, opts.protectionOffset)) {
                const nearbyCoords = findCoordsInsideRect(coord1.x - opts.protectionOffset, coord1.y - opts.protectionOffset, coord1.x + opts.protectionOffset, coord1.y + opts.protectionOffset);
                for (const coord of nearbyCoords) {
                    if (room.exitCoords.has(packCoord(coord))) {
                        room.visual.circle(coord1.x, coord1.y, { fill: customColors.red });
                        return false;
                    }
                }
            }
        }
        if (posValue < opts.requiredValue)
            return false;
        if (!opts.adjacentToRoads)
            return true;
        if (opts.roadCoords[packAsNum(coord1)] > 0)
            return false;
        for (const coord2 of findCoordsInsideRect(coord1.x - 1, coord1.y - 1, coord1.x + 1, coord1.y + 1)) {
            if (opts.roadCoords[packAsNum(coord2)] !== 1)
                continue;
            return true;
        }
        return false;
    }
    while (opts.reduceIterations >= 0) {
        let visitedCoords = new Uint8Array(2500);
        for (const coord of opts.startCoords)
            visitedCoords[packAsNum(coord)] = 1;
        let thisGeneration = opts.startCoords;
        let nextGeneration = [];
        while (thisGeneration.length) {
            nextGeneration = [];
            let localVisitedCoords = new Uint8Array(visitedCoords);
            if (opts.cardinalFlood) {
                for (const coord1 of thisGeneration) {
                    if (isViableAnchor(coord1))
                        return new RoomPosition(coord1.x, coord1.y, room.name);
                    const adjacentCoords = [
                        {
                            x: coord1.x - 1,
                            y: coord1.y,
                        },
                        {
                            x: coord1.x + 1,
                            y: coord1.y,
                        },
                        {
                            x: coord1.x,
                            y: coord1.y - 1,
                        },
                        {
                            x: coord1.x,
                            y: coord1.y + 1,
                        },
                    ];
                    for (const coord2 of adjacentCoords) {
                        if (coord2.x < 0 || coord2.x >= roomDimensions || coord2.y < 0 || coord2.y >= roomDimensions)
                            continue;
                        if (localVisitedCoords[packAsNum(coord2)] === 1)
                            continue;
                        localVisitedCoords[packAsNum(coord2)] = 1;
                        if (opts.coordMap[packAsNum(coord2)] === 0)
                            continue;
                        nextGeneration.push(coord2);
                    }
                }
            }
            if (!nextGeneration.length) {
                localVisitedCoords = new Uint8Array(visitedCoords);
                for (const coord1 of thisGeneration) {
                    if (isViableAnchor(coord1))
                        return new RoomPosition(coord1.x, coord1.y, room.name);
                    const adjacentCoords = findCoordsInsideRect(coord1.x - 1, coord1.y - 1, coord1.x + 1, coord1.y + 1);
                    for (const coord2 of adjacentCoords) {
                        if (coord2.x < 0 || coord2.x >= roomDimensions || coord2.y < 0 || coord2.y >= roomDimensions)
                            continue;
                        if (localVisitedCoords[packAsNum(coord2)] === 1)
                            continue;
                        localVisitedCoords[packAsNum(coord2)] = 1;
                        if (opts.coordMap[packAsNum(coord2)] === 0)
                            continue;
                        nextGeneration.push(coord2);
                    }
                }
            }
            if (!nextGeneration.length) {
                localVisitedCoords = new Uint8Array(visitedCoords);
                for (const coord1 of thisGeneration) {
                    if (isViableAnchor(coord1))
                        return new RoomPosition(coord1.x, coord1.y, room.name);
                    const adjacentCoords = findCoordsInsideRect(coord1.x - 1, coord1.y - 1, coord1.x + 1, coord1.y + 1);
                    for (const coord2 of adjacentCoords) {
                        if (coord2.x < 0 || coord2.x >= roomDimensions || coord2.y < 0 || coord2.y >= roomDimensions)
                            continue;
                        if (localVisitedCoords[packAsNum(coord2)] === 1)
                            continue;
                        localVisitedCoords[packAsNum(coord2)] = 1;
                        nextGeneration.push(coord2);
                    }
                }
            }
            if (opts.visuals) {
                for (const coord of nextGeneration)
                    this.visual.text(opts.coordMap[packAsNum(coord)].toString(), coord.x, coord.y, {
                        font: 0.5,
                        color: customColors.yellow,
                    });
            }
            visitedCoords = new Uint8Array(localVisitedCoords);
            thisGeneration = nextGeneration;
        }
        opts.reduceIterations -= 1;
        opts.requiredValue -= 1;
    }
    return false;
};
Room.prototype.findClosestPosOfValueAsym = function (opts) {
    const room = this;
    if (opts.visuals) {
        for (const coord of opts.startCoords)
            this.visual.circle(coord.x, coord.y, {
                stroke: customColors.yellow,
            });
    }
    function isViableAnchor(coord1) {
        const posValue = opts.coordMap[packAsNum(coord1)];
        if (posValue === 255)
            return false;
        if (posValue === 0)
            return false;
        if (posValue < opts.requiredValue)
            return false;
        for (const coord2 of findCoordsInsideRect(coord1.x - opts.offset, coord1.y - opts.offset, coord1.x + opts.offset + opts.asymOffset, coord1.y + opts.offset + opts.asymOffset)) {
            if (opts.coordMap[packAsNum(coord2)] === 0)
                return false;
        }
        if (!opts.adjacentToRoads)
            return true;
        if (opts.roadCoords[packAsNum(coord1)] > 0)
            return false;
        for (const coord2 of findCoordsInsideRect(coord1.x - 1, coord1.y - 1, coord1.x + 1, coord1.y + 1)) {
            if (opts.roadCoords[packAsNum(coord2)] !== 1)
                continue;
            return true;
        }
        return false;
    }
    while (opts.reduceIterations >= 0) {
        let visitedCoords = new Uint8Array(2500);
        for (const coord of opts.startCoords)
            visitedCoords[packAsNum(coord)] = 1;
        let thisGeneration = opts.startCoords;
        let nextGeneration = [];
        while (thisGeneration.length) {
            nextGeneration = [];
            let localVisitedCoords = new Uint8Array(visitedCoords);
            if (opts.cardinalFlood) {
                for (const coord1 of thisGeneration) {
                    if (isViableAnchor(coord1))
                        return new RoomPosition(coord1.x, coord1.y, room.name);
                    const adjacentCoords = [
                        {
                            x: coord1.x - 1,
                            y: coord1.y,
                        },
                        {
                            x: coord1.x + 1,
                            y: coord1.y,
                        },
                        {
                            x: coord1.x,
                            y: coord1.y - 1,
                        },
                        {
                            x: coord1.x,
                            y: coord1.y + 1,
                        },
                    ];
                    for (const coord2 of adjacentCoords) {
                        if (coord2.x < 0 || coord2.x >= roomDimensions || coord2.y < 0 || coord2.y >= roomDimensions)
                            continue;
                        if (localVisitedCoords[packAsNum(coord2)] === 1)
                            continue;
                        localVisitedCoords[packAsNum(coord2)] = 1;
                        if (opts.coordMap[packAsNum(coord2)] === 0)
                            continue;
                        nextGeneration.push(coord2);
                    }
                }
            }
            if (!nextGeneration.length) {
                localVisitedCoords = new Uint8Array(visitedCoords);
                for (const coord1 of thisGeneration) {
                    if (isViableAnchor(coord1))
                        return new RoomPosition(coord1.x, coord1.y, room.name);
                    const adjacentCoords = findCoordsInsideRect(coord1.x - 1, coord1.y - 1, coord1.x + 1, coord1.y + 1);
                    for (const coord2 of adjacentCoords) {
                        if (coord2.x < 0 || coord2.x >= roomDimensions || coord2.y < 0 || coord2.y >= roomDimensions)
                            continue;
                        if (localVisitedCoords[packAsNum(coord2)] === 1)
                            continue;
                        localVisitedCoords[packAsNum(coord2)] = 1;
                        if (opts.coordMap[packAsNum(coord2)] === 0)
                            continue;
                        nextGeneration.push(coord2);
                    }
                }
            }
            if (!nextGeneration.length) {
                localVisitedCoords = new Uint8Array(visitedCoords);
                for (const coord1 of thisGeneration) {
                    if (isViableAnchor(coord1))
                        return new RoomPosition(coord1.x, coord1.y, room.name);
                    const adjacentCoords = findCoordsInsideRect(coord1.x - 1, coord1.y - 1, coord1.x + 1, coord1.y + 1);
                    for (const coord2 of adjacentCoords) {
                        if (coord2.x < 0 || coord2.x >= roomDimensions || coord2.y < 0 || coord2.y >= roomDimensions)
                            continue;
                        if (localVisitedCoords[packAsNum(coord2)] === 1)
                            continue;
                        localVisitedCoords[packAsNum(coord2)] = 1;
                        nextGeneration.push(coord2);
                    }
                }
            }
            if (opts.visuals) {
                for (const coord of nextGeneration)
                    this.visual.text(opts.coordMap[packAsNum(coord)].toString(), coord.x, coord.y, {
                        font: 0.5,
                        color: customColors.yellow,
                    });
            }
            visitedCoords = new Uint8Array(localVisitedCoords);
            thisGeneration = nextGeneration;
        }
        opts.reduceIterations -= 1;
        opts.requiredValue -= 1;
    }
    return false;
};
Room.prototype.pathVisual = function (path, color, visualize = Memory.roomVisuals) {
    if (!visualize)
        return;
    if (!path.length)
        return;
    const currentRoomName = path[0].roomName;
    for (let index = 0; index < path.length; index += 1) {
        const pos = path[index];
        if (pos.roomName === currentRoomName)
            continue;
        path.splice(index, path.length - 1);
        break;
    }
    this.visual.poly(path, {
        stroke: customColors[color],
        strokeWidth: 0.15,
        opacity: 0.3,
    });
};
Room.prototype.errorVisual = function (coord, visualize = Memory.roomVisuals) {
    if (!visualize)
        return;
    this.visual.circle(coord.x, coord.y, {
        fill: '',
        stroke: customColors.red,
        radius: 0.5,
        strokeWidth: 0.15,
        opacity: 0.3,
    });
};
Room.prototype.findAllyCSiteTargetID = function (creep) {
    if (!this.allyCSites.length)
        return false;
    for (const structureType of structureTypesByBuildPriority) {
        const cSitesOfType = this.allyCSitesByType[structureType];
        if (!cSitesOfType.length)
            continue;
        const anchor = this.anchor || (creep === null || creep === void 0 ? void 0 : creep.pos) || new RoomPosition(25, 25, this.name);
        this.memory.CSTID = anchor.findClosestByPath(cSitesOfType, {
            ignoreCreeps: true,
            ignoreDestructibleStructures: true,
            ignoreRoads: true,
            range: 3,
        }).id;
        return true;
    }
    return false;
};
Room.prototype.findUnprotectedCoords = function (visuals) {
    this.unprotectedCoords = new Uint8Array(2500);
    const visitedCoords = new Uint8Array(2500);
    let depth = 0;
    let thisGeneration = this.find(FIND_EXIT);
    let nextGeneration = [];
    for (const coord of thisGeneration)
        visitedCoords[packAsNum(coord)] = 1;
    while (thisGeneration.length) {
        nextGeneration = [];
        for (const coord1 of thisGeneration) {
            if (depth > 0) {
                const packedCoord1 = packAsNum(coord1);
                if (this.rampartCoords[packedCoord1] > 0)
                    continue;
                this.unprotectedCoords[packedCoord1] = depth * 10 + 10;
            }
            for (const coord2 of findCoordsInsideRect(coord1.x - 1, coord1.y - 1, coord1.x + 1, coord1.y + 1)) {
                const packedCoord2 = packAsNum(coord2);
                if (visitedCoords[packedCoord2] === 1)
                    continue;
                visitedCoords[packedCoord2] = 1;
                nextGeneration.push(coord2);
            }
        }
        thisGeneration = nextGeneration;
        depth += 1;
    }
};
Room.prototype.groupRampartPositions = function (rampartPositions) {
    const room = this;
    const visitedCoords = new Uint8Array(2500);
    const groupedPositions = [];
    let groupIndex = 0;
    for (const packedPos of rampartPositions) {
        const pos = unpackNumAsCoord(packedPos);
        if (visitedCoords[packAsNum(pos)] === 1)
            continue;
        visitedCoords[packAsNum(pos)] = 1;
        groupedPositions[groupIndex] = [new RoomPosition(pos.x, pos.y, room.name)];
        let thisGeneration = [pos];
        let nextGeneration = [];
        let groupSize = 0;
        while (thisGeneration.length) {
            nextGeneration = [];
            for (const pos of thisGeneration) {
                const adjacentPositions = findCoordsInsideRect(pos.x - 1, pos.y - 1, pos.x + 1, pos.y + 1);
                for (const adjacentPos of adjacentPositions) {
                    if (adjacentPos.x <= 0 ||
                        adjacentPos.x >= roomDimensions ||
                        adjacentPos.y <= 0 ||
                        adjacentPos.y >= roomDimensions)
                        continue;
                    const packedAdjacentCoord = packAsNum(adjacentPos);
                    if (visitedCoords[packedAdjacentCoord] === 1)
                        continue;
                    visitedCoords[packedAdjacentCoord] = 1;
                    if (this.rampartCoords[packAsNum(adjacentPos)] !== 1)
                        continue;
                    groupedPositions[groupIndex].push(new RoomPosition(adjacentPos.x, adjacentPos.y, room.name));
                    groupSize += 1;
                    nextGeneration.push(adjacentPos);
                }
            }
            if (groupSize >= maxRampartGroupSize)
                break;
            thisGeneration = nextGeneration;
        }
        groupIndex += 1;
    }
    return groupedPositions;
};
Room.prototype.estimateIncome = function () {
    const harvesterNames = this.creepsFromRoom.source1Harvester
        .concat(this.creepsFromRoom.source2Harvester)
        .concat(this.creepsFromRoom.remoteSourceHarvester0)
        .concat(this.creepsFromRoom.remoteSourceHarvester1);
    let income = 0;
    for (const creepName of harvesterNames) {
        const creep = Game.creeps[creepName];
        income += Math.min(6, creep.parts.work) * minHarvestWorkRatio;
    }
    return Math.floor(income);
};
Room.prototype.findPositionsInsideRect = function (x1, y1, x2, y2) {
    const positions = [];
    for (let x = x1; x <= x2; x += 1) {
        for (let y = y1; y <= y2; y += 1) {
            if (x < 0 || x >= roomDimensions || y < 0 || y >= roomDimensions)
                continue;
            positions.push(new RoomPosition(x, y, this.name));
        }
    }
    return positions;
};
Room.prototype.findAdjacentPositions = function (rx, ry) {
    const positions = [];
    for (let x = rx - 1; x <= rx + 1; x += 1) {
        for (let y = ry - 1; y <= ry + 1; y += 1) {
            if (x === rx && y === ry)
                continue;
            if (x < 0 || x >= roomDimensions || y < 0 || y >= roomDimensions)
                continue;
            positions.push(new RoomPosition(x, y, this.name));
        }
    }
    return positions;
};
Room.prototype.getPartsOfRole = function (role) {
    if (this.partsOfRoles[role])
        return this.partsOfRoles[role];
    this.partsOfRoles[role] = {};
    for (const creepName of this.creepsFromRoom[role]) {
        const creep = Game.creeps[creepName];
        for (const key in creep.parts) {
            const partType = key;
            if (!this.partsOfRoles[role][partType]) {
                this.partsOfRoles[role][partType] = 1;
                continue;
            }
            this.partsOfRoles[role][partType] += 1;
        }
    }
    return this.partsOfRoles[role];
};
Room.prototype.createClaimRequest = function () {
    if (this.sources.length !== 2)
        return false;
    if (this.memory.NC)
        return false;
    if (Memory.claimRequests[this.name])
        return false;
    if (basePlanner(this) === 'failed')
        return false;
    const request = (Memory.claimRequests[this.name] = {
        data: [0],
    });
    let score = 0;
    const closestClaimTypeName = findClosestClaimType(this.name);
    const closestCommuneRange = Game.map.getRoomLinearDistance(closestClaimTypeName, this.name);
    score += Math.abs(prefferedCommuneRange - closestCommuneRange);
    score += this.sourcePaths[0].length / 10;
    score += this.sourcePaths[1].length / 10;
    score += this.upgradePathLength / 10;
    score += this.memory.stampAnchors.rampart.length / 10;
    score += this.findSwampPlainsRatio() * 10;
    request.data[ClaimRequestData.score] = score;
    return true;
};
Room.prototype.findSwampPlainsRatio = function () {
    const terrainAmounts = [0, 0, 0];
    const terrain = this.getTerrain();
    for (let x = 0; x < roomDimensions; x += 1) {
        for (let y = 0; y < roomDimensions; y += 1) {
            terrainAmounts[terrain.get(x, y)] += 1;
        }
    }
    return terrainAmounts[TERRAIN_MASK_SWAMP] / terrainAmounts[0];
};
Room.prototype.visualizeCoordMap = function (coordMap, color) {
    if (color) {
        for (let x = 0; x < roomDimensions; x += 1) {
            for (let y = 0; y < roomDimensions; y += 1) {
                this.visual.rect(x - 0.5, y - 0.5, 1, 1, {
                    fill: `hsl(${200}${coordMap[packXYAsNum(x, y)] * 2}, 100%, 60%)`,
                    opacity: 0.4,
                });
            }
        }
        return;
    }
    for (let x = 0; x < roomDimensions; x += 1) {
        for (let y = 0; y < roomDimensions; y += 1) {
            this.visual.text(coordMap[packXYAsNum(x, y)].toString(), x, y, {
                font: 0.5,
            });
        }
    }
};
Room.prototype.visualizeCostMatrix = function (cm, color) {
    if (color) {
        for (let x = 0; x < roomDimensions; x += 1) {
            for (let y = 0; y < roomDimensions; y += 1) {
                this.visual.rect(x - 0.5, y - 0.5, 1, 1, {
                    fill: `hsl(${200}${cm.get(x, y) * 2}, 100%, 60%)`,
                    opacity: 0.4,
                });
            }
        }
        return;
    }
    for (let x = 0; x < roomDimensions; x += 1) {
        for (let y = 0; y < roomDimensions; y += 1) {
            this.visual.text(cm.get(x, y).toString(), x, y, {
                font: 0.5,
            });
        }
    }
};
Room.prototype.coordHasStructureTypes = function (coord, types) {
    for (const structure of this.lookForAt(LOOK_STRUCTURES, coord.x, coord.y)) {
        if (!types.has(structure.structureType))
            continue;
        return true;
    }
    return false;
};
Room.prototype.createPowerTask = function (target, powerType, priority) {
    customLog('MADE POWER TASK FOR', target);
    if (target.reservePowers.has(powerType))
        return false;
    const effect = target.effectsData.get(powerType);
    const cooldown = effect ? effect.ticksRemaining : 0;
    const ID = internationalManager.newTickID();
    return (this.powerTasks[ID] = {
        taskID: ID,
        targetID: target.id,
        powerType,
        packedCoord: packCoord(target.pos),
        cooldown,
        priority,
    });
};
Room.prototype.highestWeightedStoringStructures = function (resourceType) {
    if (!this.storage && this.terminal)
        return false;
    if (!this.storage)
        return this.terminal;
    if (!this.terminal)
        return this.storage;
    if (this.storage.store.getUsedCapacity(resourceType) * 3 > this.terminal.store.getUsedCapacity(resourceType))
        return this.storage;
    return this.terminal;
};
Room.prototype.createRoomLogisticsRequest = function (args) {
    if (!this.myCreepsAmount)
        return RESULT_NO_ACTION;
    if (!args.resourceType)
        args.resourceType = RESOURCE_ENERGY;
    else if (args.resourceType !== RESOURCE_ENERGY && !this.advancedLogistics)
        return RESULT_FAIL;
    let amount;
    if (args.target instanceof Resource) {
        if (!args.threshold)
            args.threshold = 1;
        amount = args.target.reserveAmount;
        if (amount < args.threshold)
            return RESULT_FAIL;
    }
    else if (args.type === 'transfer') {
        if (!args.threshold)
            args.threshold = args.target.store.getCapacity(args.resourceType);
        if (args.target.reserveStore[args.resourceType] >= args.threshold)
            return RESULT_FAIL;
        amount = args.target.freeReserveStoreOf(args.resourceType);
    }
    else {
        if (!args.threshold)
            args.threshold = 1;
        amount = args.target.reserveStore[args.resourceType];
        if (amount < args.threshold)
            return RESULT_FAIL;
        if (args.maxAmount)
            amount = Math.min(amount, Math.round(args.maxAmount));
    }
    if (args.priority === undefined)
        args.priority = 1;
    else
        args.priority = Math.round(args.priority * 100) / 100;
    const ID = internationalManager.newTickID();
    return (this.roomLogisticsRequests[args.type][ID] = {
        ID,
        type: args.type,
        targetID: args.target.id,
        resourceType: args.resourceType,
        amount: amount,
        priority: args.priority,
        onlyFull: args.onlyFull,
        noReserve: !this.advancedLogistics,
    });
};

function roomsManager() {
    if (Memory.CPULogging === true)
        var managerCPUStart = Game.cpu.getUsed();
    const statName = 'rocu';
    for (const roomName in Game.rooms) {
        if (Memory.CPULogging === true)
            var roomCPUStart = Game.cpu.getUsed();
        const room = Game.rooms[roomName];
        const roomType = room.memory.T;
        const statsActive = Memory.roomStats > 0 && roomTypesUsedForStats.includes(roomType);
        if (statsActive)
            statsManager.roomPreTick(room.name, roomType);
        if (room.memory.T === 'commune')
            room.communeManager.run();
        else
            room.roomManager.run();
        let logMessage = `Creeps: ${room.myCreepsAmount}`;
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - roomCPUStart;
            logMessage += `, CPU: ${cpuUsed.toFixed(2)}`;
            globalStatsUpdater(roomName, statName, cpuUsed);
        }
        customLog(room.name + ' ' + roomType, logMessage, {
            textColor: customColors.white,
            bgColor: customColors.lightBlue,
            superPosition: 2,
        });
        if (statsActive)
            statsManager.roomEndTick(room.name, roomType);
    }
    if (Memory.CPULogging === true) {
        const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
        customLog('Room Manager', cpuUsed.toFixed(2), {
            textColor: customColors.white,
            bgColor: customColors.lightBlue,
            superPosition: 1,
        });
        const statName = 'roomcu';
        globalStatsUpdater('', statName, cpuUsed, true);
    }
}

Object.defineProperties(Room.prototype, {
    global: {
        get() {
            if (global[this.name])
                return global[this.name];
            return (global[this.name] = {});
        },
    },
    anchor: {
        get() {
            if (this._anchor)
                return this._anchor;
            return (this._anchor =
                this.memory.stampAnchors && this.memory.stampAnchors.fastFiller.length
                    ? unpackNumAsPos(this.memory.stampAnchors.fastFiller[0], this.name)
                    : undefined);
        },
    },
    sources: {
        get() {
            if (this._sources)
                return this._sources;
            this._sources = [];
            if (this.memory.SIDs) {
                for (const index in this.memory.SIDs) {
                    const source = findObjectWithID(this.memory.SIDs[index]);
                    source.index = parseInt(index);
                    this._sources.push(source);
                }
                return this._sources;
            }
            this.memory.SIDs = [];
            const sources = this.find(FIND_SOURCES);
            for (const index in sources) {
                const source = sources[index];
                source.index = parseInt(index);
                this.memory.SIDs.push(source.id);
                this._sources.push(source);
            }
            return this._sources;
        },
    },
    sourcesByEfficacy: {
        get() {
            if (this._sourcesByEfficacy)
                return this._sourcesByEfficacy;
            this._sourcesByEfficacy = [].concat(this.sources);
            console.log(this.name);
            return this._sourcesByEfficacy.sort((a, b) => {
                return this.sourcePaths[a.index].length - this.sourcePaths[b.index].length;
            });
        },
    },
    mineral: {
        get() {
            if (this._mineral)
                return this._mineral;
            if (this.memory.MID)
                return findObjectWithID(this.memory.MID);
            const mineral = this.find(FIND_MINERALS)[0];
            this.memory.MID = mineral.id;
            return (this._mineral = mineral);
        },
    },
    enemyCreeps: {
        get() {
            if (this._enemyCreeps)
                return this._enemyCreeps;
            if (this.memory.T === 'commune') {
                return (this._enemyCreeps = this.find(FIND_HOSTILE_CREEPS, {
                    filter: creep => !Memory.allyPlayers.includes(creep.owner.username),
                }));
            }
            return (this._enemyCreeps = this.find(FIND_HOSTILE_CREEPS, {
                filter: creep => !Memory.allyPlayers.includes(creep.owner.username) &&
                    !Memory.nonAggressionPlayers.includes(creep.owner.username),
            }));
        },
    },
    enemyAttackers: {
        get() {
            if (this._enemyAttackers)
                return this._enemyAttackers;
            if (this.memory.T === 'commune') {
                return (this._enemyAttackers = this.enemyCreeps.filter(function (creep) {
                    return creep.parts.attack + creep.parts.ranged_attack + creep.parts.work + creep.parts.heal > 0;
                }));
            }
            return (this._enemyAttackers = this.enemyCreeps.filter(function (creep) {
                return creep.parts.attack + creep.parts.ranged_attack + creep.parts.heal > 0;
            }));
        },
    },
    allyCreeps: {
        get() {
            if (this._allyCreeps)
                return this._allyCreeps;
            return (this._allyCreeps = this.find(FIND_HOSTILE_CREEPS, {
                filter: creep => Memory.allyPlayers.includes(creep.owner.username),
            }));
        },
    },
    myDamagedCreeps: {
        get() {
            if (this._myDamagedCreeps)
                return this._myDamagedCreeps;
            return (this._myDamagedCreeps = this._myDamagedCreeps =
                this.find(FIND_MY_CREEPS, {
                    filter: creep => creep.hits < creep.hitsMax,
                }));
        },
    },
    myDamagedPowerCreeps: {
        get() {
            if (this._myDamagedPowerCreeps)
                return this._myDamagedPowerCreeps;
            return (this._myDamagedPowerCreeps = this._myDamagedPowerCreeps =
                this.find(FIND_MY_POWER_CREEPS, {
                    filter: creep => creep.hits < creep.hitsMax,
                }));
        },
    },
    allyDamagedCreeps: {
        get() {
            if (this._allyDamagedCreeps)
                return this._allyDamagedCreeps;
            return (this._allyDamagedCreeps = this.allyCreeps.filter(creep => {
                return creep.hits < creep.hitsMax;
            }));
        },
    },
    structureUpdate: {
        get() {
            if (this._structureUpdate !== undefined)
                return this._structureUpdate;
            let newAllStructures;
            if (this.global.allStructureIDs) {
                newAllStructures = this.find(FIND_STRUCTURES);
                if (newAllStructures.length === this.global.allStructureIDs.length) {
                    const allStructures = [];
                    for (const ID of this.global.allStructureIDs) {
                        const structure = findObjectWithID(ID);
                        if (!structure)
                            break;
                        allStructures.push(structure);
                    }
                    if (allStructures.length === this.global.allStructureIDs.length) {
                        return (this._structureUpdate = true);
                    }
                }
            }
            if (!newAllStructures)
                newAllStructures = this.find(FIND_STRUCTURES);
            const newAllStructureIDs = [];
            for (const structure of newAllStructures) {
                newAllStructureIDs.push(structure.id);
            }
            this.global.allStructureIDs = newAllStructureIDs;
            return (this._structureUpdate = true);
        },
    },
    structureCoords: {
        get() {
            if (this.global.structureCoords && !this.structureUpdate)
                return this.global.structureCoords;
            this.global.structureCoords = new Map();
            for (const structure of this.find(FIND_STRUCTURES)) {
                const packedCoord = packCoord(structure.pos);
                const coordStructureIDs = this.global.structureCoords.get(packedCoord);
                if (!coordStructureIDs) {
                    this.global.structureCoords.set(packedCoord, [structure.id]);
                    continue;
                }
                coordStructureIDs.push(structure.id);
            }
            return this.global.structureCoords;
        },
    },
    structures: {
        get() {
            if (this._structures)
                return this._structures;
            this._structures = {};
            for (const structureType of allStructureTypes)
                this._structures[structureType] = [];
            for (const structure of this.find(FIND_STRUCTURES))
                this._structures[structure.structureType].push(structure);
            return this._structures;
        },
    },
    allCSites: {
        get() {
            if (this._cSiteUpdate !== undefined)
                return this._cSiteUpdate;
            let newAllCSites;
            if (this.global.allCSiteIDs) {
                newAllCSites = this.find(FIND_CONSTRUCTION_SITES);
                if (newAllCSites.length === this.global.allCSiteIDs.length) {
                    const allCSites = [];
                    for (const ID of this.global.allCSiteIDs) {
                        const cSite = findObjectWithID(ID);
                        if (!cSite)
                            break;
                        allCSites.push(cSite);
                    }
                    if (allCSites.length === this.global.allCSiteIDs.length) {
                        return (this._cSiteUpdate = true);
                    }
                }
            }
            if (!newAllCSites)
                newAllCSites = this.find(FIND_CONSTRUCTION_SITES);
            const newAllStructureIDs = [];
            for (const cSite of newAllCSites) {
                newAllStructureIDs.push(cSite.id);
            }
            this.global.allCSiteIDs = newAllStructureIDs;
            return (this._cSiteUpdate = true);
        },
    },
    cSiteCoords: {
        get() {
            if (this.global.cSiteCoords && !this.cSiteUpdate)
                return this.global.cSiteCoords;
            this.global.cSiteCoords = new Map();
            for (const cSite of this.find(FIND_CONSTRUCTION_SITES)) {
                const packedCoord = packCoord(cSite.pos);
                const coordStructureIDs = this.global.cSiteCoords.get(packedCoord);
                if (!coordStructureIDs) {
                    this.global.cSiteCoords.set(packedCoord, [cSite.id]);
                    continue;
                }
                coordStructureIDs.push(cSite.id);
            }
            return this.global.cSiteCoords;
        },
    },
    cSites: {
        get() {
            if (this._cSites)
                return this._cSites;
            this._cSites = {};
            for (const structureType of allStructureTypes)
                this._cSites[structureType] = [];
            for (const cSite of this.find(FIND_CONSTRUCTION_SITES))
                this._cSites[cSite.structureType].push(cSite);
            return this._cSites;
        },
    },
    cSiteTarget: {
        get() {
            if (this.memory.CSTID) {
                const cSiteTarget = findObjectWithID(this.memory.CSTID);
                if (cSiteTarget)
                    return cSiteTarget;
            }
            if (!this.find(FIND_MY_CONSTRUCTION_SITES).length)
                return false;
            let totalX = 0;
            let totalY = 0;
            let count = 1;
            if (this.anchor) {
                totalX += this.anchor.x;
                totalY += this.anchor.y;
            }
            else {
                totalX += 25;
                totalX += 25;
            }
            for (const creepName of this.myCreeps.builder) {
                const pos = Game.creeps[creepName].pos;
                totalX += pos.x;
                totalY += pos.y;
                count += 1;
            }
            const searchAnchor = new RoomPosition(Math.floor(totalX / count), Math.floor(totalY / count), this.name);
            for (const structureType of structureTypesByBuildPriority) {
                const cSitesOfType = this.cSites[structureType];
                if (!cSitesOfType.length)
                    continue;
                let target = searchAnchor.findClosestByPath(cSitesOfType, {
                    ignoreCreeps: true,
                    ignoreDestructibleStructures: true,
                    range: 3,
                });
                if (!target)
                    target = findClosestObject(searchAnchor, cSitesOfType);
                this.memory.CSTID = target.id;
                return target;
            }
            return false;
        },
    },
    enemyCSites: {
        get() {
            if (this._enemyCSites)
                return this._enemyCSites;
            return (this._enemyCSites = this.find(FIND_HOSTILE_CONSTRUCTION_SITES, {
                filter: cSite => !Memory.allyPlayers.includes(cSite.owner.username),
            }));
        },
    },
    allyCSites: {
        get() {
            if (this._allyCSites)
                return this._allyCSites;
            return (this._allyCSites = this.find(FIND_HOSTILE_CONSTRUCTION_SITES, {
                filter: cSite => Memory.allyPlayers.includes(cSite.owner.username),
            }));
        },
    },
    allyCSitesByType: {
        get() {
            if (this._allyCSitesByType)
                return this._allyCSitesByType;
            this._allyCSitesByType = {};
            for (const structureType of allStructureTypes)
                this._allyCSitesByType[structureType] = [];
            for (const cSite of this.allyCSites)
                this._allyCSitesByType[cSite.structureType].push(cSite);
            return this._allyCSitesByType;
        },
    },
    spawningStructures: {
        get() {
            if (this._spawningStructures)
                return this._spawningStructures;
            if (!this.anchor)
                return [];
            return (this._spawningStructures = [...this.structures.spawn, ...this.structures.extension]);
        },
    },
    spawningStructuresByPriority: {
        get() {
            if (this._spawningStructuresByPriority)
                return this._spawningStructuresByPriority;
            return (this._spawningStructuresByPriority = this.spawningStructures.sort((a, b) => getRange(a.pos.x, this.anchor.x, a.pos.y, this.anchor.y) -
                getRange(b.pos.x, this.anchor.x, b.pos.y, this.anchor.y)));
        },
    },
    spawningStructuresByNeed: {
        get() {
            if (this._spawningStructuresByNeed)
                return this._spawningStructuresByNeed;
            this._spawningStructuresByNeed = this.spawningStructures;
            for (const index in this.sources) {
                const closestSourcePos = this.sourcePositions[index][0];
                this._spawningStructuresByNeed = this._spawningStructuresByNeed.filter(structure => getRange(structure.pos.x, closestSourcePos.x, structure.pos.y, closestSourcePos.y) > 1);
            }
            if (this.anchor &&
                this.myCreeps.fastFiller.length &&
                ((this.fastFillerLink && this.hubLink && this.storage) ||
                    (this.fastFillerContainerLeft && this.fastFillerContainerRight))) {
                this._spawningStructuresByNeed = this._spawningStructuresByNeed.filter(structure => getRange(structure.pos.x, this.anchor.x, structure.pos.y, this.anchor.y) > 2);
            }
            return this._spawningStructuresByNeed;
        },
    },
    dismantleTargets: {
        get() {
            if (this._dismantleTargets)
                return this._dismantleTargets;
            if (this.controller && this.controller.my) {
                return (this._dismantleTargets = this.find(FIND_STRUCTURES, {
                    filter: structure => structure.owner &&
                        !structure.my &&
                        structure.structureType !== STRUCTURE_INVADER_CORE,
                }));
            }
            return (this._dismantleTargets = this.find(FIND_STRUCTURES, {
                filter: structure => structure.structureType !== STRUCTURE_ROAD &&
                    structure.structureType !== STRUCTURE_CONTAINER &&
                    structure.structureType !== STRUCTURE_CONTROLLER &&
                    structure.structureType !== STRUCTURE_INVADER_CORE &&
                    structure.structureType !== STRUCTURE_KEEPER_LAIR &&
                    structure.hits,
            }));
        },
    },
    destructableStructures: {
        get() {
            if (this._destructableStructures)
                return this._destructableStructures;
            return (this._dismantleTargets = this.find(FIND_STRUCTURES, {
                filter: structure => structure.structureType !== STRUCTURE_CONTROLLER &&
                    structure.structureType !== STRUCTURE_INVADER_CORE,
            }));
        },
    },
    combatStructureTargets: {
        get() {
            if (this._combatStructureTargets)
                return this._combatStructureTargets;
            this._combatStructureTargets = [];
            if (this.controller && (this.controller.my || this.controller.reservation))
                return this._combatStructureTargets;
            if (this.controller.owner && Memory.allyPlayers.includes(this.controller.owner.username))
                return this._combatStructureTargets;
            if (this.controller.reservation && Memory.allyPlayers.includes(this.controller.reservation.username))
                return this._combatStructureTargets;
            this._combatStructureTargets = this._combatStructureTargets.concat(this.structures.spawn);
            this._combatStructureTargets = this._combatStructureTargets.concat(this.structures.tower);
            this._combatStructureTargets = this._combatStructureTargets.concat(this.structures.extension);
            this._combatStructureTargets = this._combatStructureTargets.concat(this.structures.storage);
            this._combatStructureTargets = this._combatStructureTargets.concat(this.structures.terminal);
            this._combatStructureTargets = this._combatStructureTargets.concat(this.structures.powerSpawn);
            this._combatStructureTargets = this._combatStructureTargets.concat(this.structures.factory);
            this._combatStructureTargets = this._combatStructureTargets.concat(this.structures.nuker);
            this._combatStructureTargets = this._combatStructureTargets.concat(this.structures.observer);
            return this._combatStructureTargets;
        },
    },
    sourcePositions: {
        get() {
            if (this._sourcePositions && this._sourcePositions.length)
                return this._sourcePositions;
            if (this.memory.SP && this.memory.SP.length) {
                this._sourcePositions = [];
                for (const positions of this.memory.SP)
                    this._sourcePositions.push(unpackPosList(positions));
                return this._sourcePositions;
            }
            this.memory.SP = [];
            this._sourcePositions = [];
            if (this.memory.T === 'remote') {
                const commune = Game.rooms[this.memory.CN];
                if (!commune)
                    return [];
                const anchor = commune.anchor || new RoomPosition(25, 25, commune.name);
                const terrainCoords = internationalManager.getTerrainCoords(this.name);
                for (const source of this.sources) {
                    const positions = [];
                    for (const pos of this.findAdjacentPositions(source.pos.x, source.pos.y)) {
                        if (terrainCoords[packAsNum(pos)] === 255)
                            continue;
                        positions.push(pos);
                    }
                    positions.sort((a, b) => {
                        return (this.advancedFindPath({
                            origin: a,
                            goals: [{ pos: anchor, range: 3 }],
                        }).length -
                            this.advancedFindPath({
                                origin: b,
                                goals: [{ pos: anchor, range: 3 }],
                            }).length);
                    });
                    this.memory.SP.push(packPosList(positions));
                    this._sourcePositions.push(positions);
                }
                return this._sourcePositions;
            }
            const anchor = this.anchor || new RoomPosition(25, 25, this.name);
            const terrainCoords = internationalManager.getTerrainCoords(this.name);
            for (const source of this.sources) {
                const positions = [];
                for (const pos of this.findAdjacentPositions(source.pos.x, source.pos.y)) {
                    if (terrainCoords[packAsNum(pos)] === 255)
                        continue;
                    positions.push(pos);
                }
                positions.sort((a, b) => {
                    return (this.advancedFindPath({
                        origin: a,
                        goals: [{ pos: anchor, range: 3 }],
                    }).length -
                        this.advancedFindPath({
                            origin: b,
                            goals: [{ pos: anchor, range: 3 }],
                        }).length);
                });
                this.memory.SP.push(packPosList(positions));
                this._sourcePositions.push(positions);
            }
            return this._sourcePositions;
        },
    },
    usedSourceCoords: {
        get() {
            if (this._usedSourceCoords)
                return this._usedSourceCoords;
            this._usedSourceCoords = [];
            for (const i in this.sources)
                this._usedSourceCoords.push(new Set());
            let harvesterNames;
            if (this.memory.T === 'commune') {
                harvesterNames = this.myCreeps.source1Harvester;
                if (this.sources.length >= 2)
                    harvesterNames = harvesterNames.concat(this.myCreeps.source2Harvester);
                harvesterNames = harvesterNames.concat(this.myCreeps.vanguard);
            }
            else {
                harvesterNames = this.myCreeps.remoteSourceHarvester0;
                if (this.sources.length >= 2)
                    harvesterNames = harvesterNames.concat(this.myCreeps.remoteSourceHarvester1);
            }
            for (const creepName of harvesterNames) {
                const creep = Game.creeps[creepName];
                if (creep.dying)
                    continue;
                if (creep.memory.SI === undefined)
                    continue;
                if (!creep.memory.PC)
                    continue;
                this._usedSourceCoords[creep.memory.SI].add(creep.memory.PC);
            }
            return this._usedSourceCoords;
        },
    },
    sourcePaths: {
        get() {
            if (this._sourcePaths && this._sourcePaths.length)
                return this._sourcePaths;
            this._sourcePaths = [];
            if (this.memory.SPs && this.memory.SPs.length) {
                for (const path of this.memory.SPs)
                    this._sourcePaths.push(unpackPosList(path));
                return this._sourcePaths;
            }
            this.memory.SPs = [];
            if (this.memory.T === 'remote') {
                const commune = Game.rooms[this.memory.CN];
                if (!commune)
                    return [];
                const sources = []
                    .concat(this.sourcePositions)
                    .sort((a, b) => {
                    return (this.advancedFindPath({
                        origin: a[0],
                        goals: [{ pos: commune.anchor, range: 3 }],
                        typeWeights: remoteTypeWeights,
                        plainCost: defaultRoadPlanningPlainCost,
                        weightStructurePlans: true,
                        avoidStationaryPositions: true,
                    }).length -
                        this.advancedFindPath({
                            origin: b[0],
                            goals: [{ pos: commune.anchor, range: 3 }],
                            typeWeights: remoteTypeWeights,
                            plainCost: defaultRoadPlanningPlainCost,
                            weightStructurePlans: true,
                            avoidStationaryPositions: true,
                        }).length);
                })
                    .reverse();
                for (let index in sources) {
                    const path = this.advancedFindPath({
                        origin: this.sourcePositions[index][0],
                        goals: [{ pos: commune.anchor, range: 3 }],
                        typeWeights: remoteTypeWeights,
                        plainCost: defaultRoadPlanningPlainCost,
                        weightStructurePlans: true,
                        avoidStationaryPositions: true,
                    });
                    this._sourcePaths[index] = path;
                    this.memory.SPs[index] = packPosList(path);
                }
                return this._sourcePaths;
            }
            if (!this.anchor)
                return this._sourcePaths;
            const sources = []
                .concat(this.sourcePositions)
                .sort((a, b) => {
                return (this.advancedFindPath({
                    origin: a[0],
                    goals: [{ pos: this.anchor, range: 3 }],
                    typeWeights: remoteTypeWeights,
                    plainCost: defaultRoadPlanningPlainCost,
                    weightStructurePlans: true,
                    avoidStationaryPositions: true,
                }).length -
                    this.advancedFindPath({
                        origin: b[0],
                        goals: [{ pos: this.anchor, range: 3 }],
                        typeWeights: remoteTypeWeights,
                        plainCost: defaultRoadPlanningPlainCost,
                        weightStructurePlans: true,
                        avoidStationaryPositions: true,
                    }).length);
            })
                .reverse();
            for (let index in sources) {
                let path = [this.sourcePositions[index][0]];
                path = path.concat(this.advancedFindPath({
                    origin: this.sourcePositions[index][0],
                    goals: [{ pos: this.anchor, range: 3 }],
                    typeWeights: remoteTypeWeights,
                    plainCost: defaultRoadPlanningPlainCost,
                    weightStructurePlans: true,
                    avoidStationaryPositions: true,
                }));
                this._sourcePaths[index] = path;
                this.memory.SPs[index] = packPosList(path);
            }
            return this._sourcePaths;
        },
    },
    controllerPositions: {
        get() {
            if (this._controllerPositions)
                return this._controllerPositions;
            if (this.memory.CP) {
                return (this._controllerPositions = unpackPosList(this.memory.CP));
            }
            this._controllerPositions = [];
            const { controller } = this;
            if (this.memory.T === 'remote') {
                const commune = Game.rooms[this.memory.CN];
                if (!commune)
                    return undefined;
                const terrainCoords = internationalManager.getTerrainCoords(this.name);
                const anchor = commune.anchor || new RoomPosition(25, 25, commune.name);
                const adjacentPositions = this.findPositionsInsideRect(controller.pos.x - 1, controller.pos.y - 1, controller.pos.x + 1, controller.pos.y + 1);
                for (const pos of adjacentPositions) {
                    if (terrainCoords[packAsNum(pos)] === 255)
                        continue;
                    this._controllerPositions.push(pos);
                }
                this._controllerPositions.sort((a, b) => {
                    return (this.advancedFindPath({
                        origin: a,
                        goals: [{ pos: anchor, range: 3 }],
                    }).length -
                        this.advancedFindPath({
                            origin: b,
                            goals: [{ pos: anchor, range: 3 }],
                        }).length);
                });
                this.memory.CP = packPosList(this._controllerPositions);
                return this._controllerPositions;
            }
            const anchor = this.anchor || new RoomPosition(25, 25, this.name);
            const terrainCoords = internationalManager.getTerrainCoords(this.name);
            const adjacentPositions = this.findPositionsInsideRect(controller.pos.x - 1, controller.pos.y - 1, controller.pos.x + 1, controller.pos.y + 1);
            for (const pos of adjacentPositions) {
                if (terrainCoords[packAsNum(pos)] === 255)
                    continue;
                this._controllerPositions.push(pos);
            }
            this._controllerPositions.sort((a, b) => {
                return (this.advancedFindPath({
                    origin: a,
                    goals: [{ pos: anchor, range: 3 }],
                }).length -
                    this.advancedFindPath({
                        origin: b,
                        goals: [{ pos: anchor, range: 3 }],
                    }).length);
            });
            this.memory.CP = packPosList(this._controllerPositions);
            return this._controllerPositions;
        },
    },
    centerUpgradePos: {
        get() {
            if (this.global.centerUpgradePos !== undefined)
                return this.global.centerUpgradePos;
            if (!this.anchor)
                return false;
            const distanceCoords = this.distanceTransform(undefined, false, 255, this.controller.pos.x - 2, this.controller.pos.y - 2, this.controller.pos.x + 2, this.controller.pos.y + 2);
            return (this.global.centerUpgradePos = this.findClosestPosOfValue({
                coordMap: distanceCoords,
                startCoords: [this.anchor],
                requiredValue: 2,
                reduceIterations: 1,
                visuals: false,
                cardinalFlood: true,
            }));
        },
    },
    upgradePositions: {
        get() {
            if (this.global.upgradePositions)
                return this.global.upgradePositions;
            const centerUpgradePos = this.centerUpgradePos;
            if (!centerUpgradePos)
                return [];
            const anchor = this.anchor;
            if (!anchor)
                return [];
            this.global.upgradePositions = [];
            const terrainCoords = internationalManager.getTerrainCoords(this.name);
            const adjacentPositions = this.findAdjacentPositions(centerUpgradePos.x, centerUpgradePos.y);
            for (const pos of adjacentPositions) {
                if (terrainCoords[packAsNum(pos)] === 255)
                    continue;
                this.global.upgradePositions.push(pos);
            }
            this.global.upgradePositions.sort((a, b) => {
                return (this.advancedFindPath({
                    origin: a,
                    goals: [{ pos: anchor, range: 3 }],
                }).length -
                    this.advancedFindPath({
                        origin: b,
                        goals: [{ pos: anchor, range: 3 }],
                    }).length);
            });
            this.global.upgradePositions.push(this.global.upgradePositions.shift());
            this.global.upgradePositions.splice(0, 0, centerUpgradePos);
            return this.global.upgradePositions;
        },
    },
    usedUpgradePositions: {
        get() {
            if (this._usedUpgradePositions)
                return this._usedUpgradePositions;
            this._usedUpgradePositions = new Set();
            for (const creepName of this.myCreeps.controllerUpgrader) {
                const creep = Game.creeps[creepName];
                if (creep.dying)
                    continue;
                if (!creep.memory.PC)
                    continue;
                this._usedUpgradePositions.add(creep.memory.PC);
            }
            if (this.controllerLink)
                this._usedUpgradePositions.add(packPos(this.controllerLink.pos));
            return this._usedUpgradePositions;
        },
    },
    upgradePathLength: {
        get() {
            if (this.global.upgradePathLength)
                return this.global.upgradePathLength;
            if (!this.anchor)
                return 0;
            const centerUpgradePos = this.centerUpgradePos;
            if (!centerUpgradePos)
                return 0;
            return (this.global.upgradePathLength = this.advancedFindPath({
                origin: centerUpgradePos,
                goals: [{ pos: this.anchor, range: 3 }],
            }).length);
        },
    },
    mineralPositions: {
        get() {
            if (this._mineralPositions)
                return this._mineralPositions;
            if (this.memory.MP) {
                return (this._mineralPositions = unpackPosList(this.memory.MP));
            }
            const anchor = this.anchor || new RoomPosition(25, 25, this.name);
            if (!anchor)
                return [];
            this._mineralPositions = [];
            const mineralPos = this.mineral.pos;
            const adjacentPositions = this.findPositionsInsideRect(mineralPos.x - 1, mineralPos.y - 1, mineralPos.x + 1, mineralPos.y + 1);
            const terrainCoords = internationalManager.getTerrainCoords(this.name);
            for (const pos of adjacentPositions) {
                if (terrainCoords[packAsNum(pos)] === 255)
                    continue;
                this._mineralPositions.push(pos);
            }
            this._mineralPositions.sort((a, b) => {
                return (this.advancedFindPath({
                    origin: a,
                    goals: [{ pos: anchor, range: 3 }],
                }).length -
                    this.advancedFindPath({
                        origin: b,
                        goals: [{ pos: anchor, range: 3 }],
                    }).length);
            });
            this.memory.MP = packPosList(this._mineralPositions);
            return this._mineralPositions;
        },
    },
    usedMineralCoords: {
        get() {
            if (this._usedMineralCoords)
                return this._usedMineralCoords;
            this._usedMineralCoords = new Set();
            for (const creepName of this.myCreeps.mineralHarvester) {
                const creep = Game.creeps[creepName];
                if (creep.dying)
                    continue;
                if (!creep.memory.PC)
                    continue;
                this._usedMineralCoords.add(creep.memory.PC);
            }
            return this._usedMineralCoords;
        },
    },
    mineralPath: {
        get() {
            if (this._mineralPath && this._mineralPath.length)
                return this._mineralPath;
            this._mineralPath = [];
            const packedMineralPath = this.memory.MPa;
            if (packedMineralPath && packedMineralPath.length) {
                return (this._mineralPath = unpackPosList(packedMineralPath));
            }
            delete this.memory.MPa;
            if (!this.anchor)
                return this._sourcePaths;
            let path = [this.mineralPositions[0]];
            path = path.concat(this.advancedFindPath({
                origin: this.mineralPositions[0],
                goals: [{ pos: this.anchor, range: 3 }],
                typeWeights: remoteTypeWeights,
                plainCost: defaultRoadPlanningPlainCost,
                weightStructurePlans: true,
                avoidStationaryPositions: true,
            }));
            this._mineralPath = path;
            this.memory.MPa = packPosList(path);
            return this._mineralPath;
        },
    },
    fastFillerPositions: {
        get() {
            if (this._fastFillerPositions)
                return this._fastFillerPositions;
            const anchor = this.anchor;
            if (!anchor)
                return [];
            this._fastFillerPositions = [];
            const rawFastFillerPositions = [
                new RoomPosition(anchor.x - 1, anchor.y - 1, this.name),
                new RoomPosition(anchor.x - 1, anchor.y + 1, this.name),
                new RoomPosition(anchor.x + 1, anchor.y - 1, this.name),
                new RoomPosition(anchor.x + 1, anchor.y + 1, this.name),
            ];
            for (let index = rawFastFillerPositions.length - 1; index >= 0; index -= 1) {
                const pos = rawFastFillerPositions[index];
                const adjacentStructures = this.lookForAtArea(LOOK_STRUCTURES, pos.y - 1, pos.x - 1, pos.y + 1, pos.x + 1, true);
                const adjacentStructuresByType = {
                    spawn: 0,
                    extension: 0,
                    container: 0,
                    link: 0,
                };
                for (const adjacentPosData of adjacentStructures) {
                    const { structureType } = adjacentPosData.structure;
                    if (adjacentStructuresByType[structureType] === undefined)
                        continue;
                    adjacentStructuresByType[structureType] += 1;
                }
                if (adjacentStructuresByType[STRUCTURE_CONTAINER] + adjacentStructuresByType[STRUCTURE_LINK] === 0)
                    continue;
                if (adjacentStructuresByType[STRUCTURE_SPAWN] + adjacentStructuresByType[STRUCTURE_EXTENSION] === 0)
                    continue;
                this._fastFillerPositions.push(pos);
            }
            return this._fastFillerPositions;
        },
    },
    usedFastFillerCoords: {
        get() {
            if (this._usedFastFillerCoords)
                return this._usedFastFillerCoords;
            this._usedFastFillerCoords = new Set();
            for (const creepName of this.myCreeps.fastFiller) {
                const creep = Game.creeps[creepName];
                if (creep.dying)
                    continue;
                if (!creep.memory.PC)
                    continue;
                this._usedFastFillerCoords.add(creep.memory.PC);
            }
            return this._usedFastFillerCoords;
        },
    },
    remoteNamesBySourceEfficacy: {
        get() {
            if (this._remoteNamesBySourceEfficacy)
                return this._remoteNamesBySourceEfficacy;
            this._remoteNamesBySourceEfficacy = this.memory.remotes.filter(function (roomName) {
                return Memory.rooms[roomName].SPs.length;
            });
            return this._remoteNamesBySourceEfficacy.sort(function (a1, b1) {
                return (Memory.rooms[a1].SPs.reduce((a2, b2) => a2 + b2.length, 0) / Memory.rooms[a1].SPs.length -
                    Memory.rooms[b1].SPs.reduce((a2, b2) => a2 + b2.length, 0) / Memory.rooms[b1].SPs.length);
            });
        },
    },
    remoteSourceIndexesByEfficacy: {
        get() {
            if (this._remoteSourceIndexesByEfficacy)
                return this._remoteSourceIndexesByEfficacy;
            this._remoteSourceIndexesByEfficacy = [];
            for (const remoteName of this.memory.remotes) {
                const remoteMemory = Memory.rooms[remoteName];
                for (let sourceIndex = 0; sourceIndex < remoteMemory.SIDs.length; sourceIndex++) {
                    this._remoteSourceIndexesByEfficacy.push(remoteName + ' ' + sourceIndex);
                }
            }
            return this._remoteSourceIndexesByEfficacy.sort(function (a, b) {
                const aSplit = a.split(' ');
                const bSplit = b.split(' ');
                return (Memory.rooms[aSplit[0]].SPs[parseInt(aSplit[1])].length -
                    Memory.rooms[bSplit[0]].SPs[parseInt(bSplit[1])].length);
            });
        },
    },
    sourceContainers: {
        get() {
            if (this._sourceContainers)
                return this._sourceContainers;
            if (this.global.sourceContainers) {
                const containers = [];
                for (const ID of this.global.sourceContainers) {
                    const container = findObjectWithID(ID);
                    if (!container)
                        break;
                    containers.push(container);
                }
                if (containers.length === this.sources.length)
                    return (this._sourceContainers = containers);
            }
            this.global.sourceContainers = [];
            const containers = [];
            for (const positions of this.sourcePositions) {
                for (let structure of positions[0].lookFor(LOOK_STRUCTURES)) {
                    if (structure.structureType !== STRUCTURE_CONTAINER)
                        continue;
                    this.global.sourceContainers.push(structure.id);
                    containers.push(structure);
                    break;
                }
            }
            return (this._sourceContainers = containers);
        },
    },
    sourceLinks: {
        get() {
            if (this._sourceLinks)
                return this._sourceLinks;
            if (this.global.sourceLinks) {
                const links = [];
                for (const ID of this.global.sourceLinks) {
                    const link = findObjectWithID(ID);
                    if (!link)
                        break;
                    links.push(link);
                }
                if (links.length === this.sources.length)
                    return (this._sourceLinks = links);
            }
            this.global.sourceLinks = [];
            const links = [];
            for (const positions of this.sourcePositions) {
                const anchor = positions[0];
                const adjacentStructures = this.lookForAtArea(LOOK_STRUCTURES, anchor.y - 1, anchor.x - 1, anchor.y + 1, anchor.x + 1, true);
                for (const posData of adjacentStructures) {
                    const structure = posData.structure;
                    if (structure.structureType !== STRUCTURE_LINK)
                        continue;
                    this.global.sourceLinks.push(structure.id);
                    links.push(structure);
                    break;
                }
            }
            return (this._sourceLinks = links);
        },
    },
    fastFillerContainerLeft: {
        get() {
            if (this.global.fastFillerContainerLeft) {
                const container = findObjectWithID(this.global.fastFillerContainerLeft);
                if (container)
                    return container;
            }
            if (!this.anchor)
                return false;
            for (const structure of this.lookForAt(LOOK_STRUCTURES, this.anchor.x - 2, this.anchor.y)) {
                if (structure.structureType !== STRUCTURE_CONTAINER)
                    continue;
                this.global.fastFillerContainerLeft = structure.id;
                return structure;
            }
            return false;
        },
    },
    fastFillerContainerRight: {
        get() {
            if (this.global.fastFillerContainerRight) {
                const container = findObjectWithID(this.global.fastFillerContainerRight);
                if (container)
                    return container;
            }
            if (!this.anchor)
                return false;
            for (const structure of this.lookForAt(LOOK_STRUCTURES, this.anchor.x + 2, this.anchor.y)) {
                if (structure.structureType !== STRUCTURE_CONTAINER)
                    continue;
                this.global.fastFillerContainerRight = structure.id;
                return structure;
            }
            return false;
        },
    },
    controllerContainer: {
        get() {
            if (this.global.controllerContainer) {
                const container = findObjectWithID(this.global.controllerContainer);
                if (container)
                    return container;
            }
            const centerUpgradePos = this.centerUpgradePos;
            if (!centerUpgradePos)
                return false;
            for (const structure of centerUpgradePos.lookFor(LOOK_STRUCTURES)) {
                if (structure.structureType !== STRUCTURE_CONTAINER)
                    continue;
                this.global.controllerContainer = structure.id;
                return structure;
            }
            return false;
        },
    },
    mineralContainer: {
        get() {
            if (this.global.mineralContainer) {
                const container = findObjectWithID(this.global.mineralContainer);
                if (container)
                    return container;
            }
            const mineralHarvestPos = this.mineralPositions[0];
            if (!mineralHarvestPos)
                return false;
            for (const structure of mineralHarvestPos.lookFor(LOOK_STRUCTURES)) {
                if (structure.structureType !== STRUCTURE_CONTAINER)
                    continue;
                this.global.mineralContainer = structure.id;
                return structure;
            }
            return false;
        },
    },
    controllerLink: {
        get() {
            if (this.global.controllerLink) {
                const container = findObjectWithID(this.global.controllerLink);
                if (container)
                    return container;
            }
            const centerUpgradePos = this.centerUpgradePos;
            if (!centerUpgradePos)
                return false;
            for (const structure of centerUpgradePos.lookFor(LOOK_STRUCTURES)) {
                if (structure.structureType !== STRUCTURE_LINK)
                    continue;
                this.global.controllerLink = structure.id;
                return structure;
            }
            return false;
        },
    },
    fastFillerLink: {
        get() {
            if (this.global.fastFillerLink) {
                const container = findObjectWithID(this.global.fastFillerLink);
                if (container)
                    return container;
            }
            if (!this.anchor)
                return false;
            for (const structure of this.anchor.lookFor(LOOK_STRUCTURES)) {
                if (structure.structureType !== STRUCTURE_LINK)
                    continue;
                this.global.fastFillerLink = structure.id;
                return structure;
            }
            return false;
        },
    },
    hubLink: {
        get() {
            if (this.global.hubLink) {
                const structure = findObjectWithID(this.global.hubLink);
                if (structure)
                    return structure;
            }
            if (!this.memory.stampAnchors.hub)
                return false;
            const hubAnchor = unpackNumAsCoord(this.memory.stampAnchors.hub[0]);
            if (!hubAnchor)
                return false;
            for (const structure of new RoomPosition(hubAnchor.x, hubAnchor.y + 1, this.name).lookFor(LOOK_STRUCTURES)) {
                if (structure.structureType !== STRUCTURE_LINK)
                    continue;
                this.global.hubLink = structure.id;
                return structure;
            }
            for (const structure of this.lookForAtArea(LOOK_STRUCTURES, hubAnchor.y - 1, hubAnchor.x - 1, hubAnchor.y + 1, hubAnchor.x + 1, true)) {
                if (structure.structure.structureType !== STRUCTURE_LINK)
                    continue;
                this.global.hubLink = structure.structure.id;
                return structure.structure;
            }
            return false;
        },
    },
    droppedEnergy: {
        get() {
            if (this._droppedEnergy)
                return this._droppedEnergy;
            return (this._droppedEnergy = this.find(FIND_DROPPED_RESOURCES, {
                filter: resource => resource.resourceType === RESOURCE_ENERGY &&
                    !resource.room.enemyThreatCoords.has(packCoord(resource.pos)),
            }));
        },
    },
    droppedResources: {
        get() {
            if (this._droppedResources)
                return this._droppedResources;
            return (this._droppedResources = this.find(FIND_DROPPED_RESOURCES, {
                filter: resource => !resource.room.enemyThreatCoords.has(packCoord(resource.pos)),
            }));
        },
    },
    actionableWalls: {
        get() {
            if (this._actionableWalls)
                return this._actionableWalls;
            return (this._actionableWalls = this.structures.constructedWall.filter(function (structure) {
                return structure.hits;
            }));
        },
    },
    quadCostMatrix: {
        get() {
            if (this._quadCostMatrix)
                return this._quadCostMatrix;
            const terrainCoords = new Uint8Array(internationalManager.getTerrainCoords(this.name));
            this._quadCostMatrix = new PathFinder.CostMatrix();
            const roadCoods = new Set();
            for (const road of this.structures.road)
                roadCoods.add(packCoord(road.pos));
            for (const creep of this.enemyCreeps)
                terrainCoords[packAsNum(creep.pos)] = 255;
            for (const creep of this.allyCreeps)
                terrainCoords[packAsNum(creep.pos)] = 255;
            for (const creep of this.find(FIND_HOSTILE_POWER_CREEPS))
                terrainCoords[packAsNum(creep.pos)] = 255;
            for (const rampart of this.structures.rampart) {
                if (rampart.my)
                    continue;
                if (rampart.isPublic)
                    continue;
                terrainCoords[packAsNum(rampart.pos)] = 255;
            }
            for (const structureType of impassibleStructureTypes) {
                for (const structure of this.structures[structureType]) {
                    terrainCoords[packAsNum(structure.pos)] = 255;
                }
                for (const cSite of this.cSites[structureType]) {
                    terrainCoords[packAsNum(cSite.pos)] = 255;
                }
            }
            for (const portal of this.structures.portal)
                terrainCoords[packAsNum(portal.pos)] = 255;
            for (const cSite of this.allyCSites)
                terrainCoords[packAsNum(cSite.pos)] = 255;
            let x;
            let y = 0;
            for (x = 0; x < roomDimensions; x += 1)
                terrainCoords[packXYAsNum(x, y)] = Math.max(terrainCoords[packXYAsNum(x, y)], 254);
            x = 0;
            for (y = 0; y < roomDimensions; y += 1)
                terrainCoords[packXYAsNum(x, y)] = Math.max(terrainCoords[packXYAsNum(x, y)], 254);
            y = roomDimensions - 1;
            for (x = 0; x < roomDimensions; x += 1)
                terrainCoords[packXYAsNum(x, y)] = Math.max(terrainCoords[packXYAsNum(x, y)], 254);
            x = roomDimensions - 1;
            for (y = 0; y < roomDimensions; y += 1)
                terrainCoords[packXYAsNum(x, y)] = Math.max(terrainCoords[packXYAsNum(x, y)], 254);
            const terrainCM = this.getTerrain();
            for (let x = 0; x < roomDimensions; x += 1) {
                for (let y = 0; y < roomDimensions; y += 1) {
                    const offsetCoords = [
                        {
                            x,
                            y,
                        },
                        {
                            x: x + 1,
                            y,
                        },
                        {
                            x,
                            y: y + 1,
                        },
                        {
                            x: x + 1,
                            y: y + 1,
                        },
                    ];
                    let largestValue = terrainCoords[packXYAsNum(x, y)];
                    for (const coord of offsetCoords) {
                        let coordValue = terrainCoords[packAsNum(coord)];
                        if (!coordValue || coordValue < 254)
                            continue;
                        if (roadCoods.has(packCoord(coord)))
                            coordValue = 0;
                        largestValue = Math.max(largestValue, coordValue);
                    }
                    if (largestValue >= 254) {
                        this._quadCostMatrix.set(x, y, 254);
                        this._quadCostMatrix.set(x, y, Math.max(terrainCoords[packXYAsNum(x, y)], Math.min(largestValue, 254)));
                        continue;
                    }
                    largestValue = 0;
                    for (const coord of offsetCoords) {
                        const value = terrainCM.get(coord.x, coord.y);
                        if (roadCoods.has(packCoord(coord)))
                            continue;
                        if (value !== TERRAIN_MASK_SWAMP)
                            continue;
                        largestValue = defaultSwampCost * 2;
                    }
                    if (!largestValue)
                        continue;
                    for (const coord of offsetCoords) {
                        this._quadCostMatrix.set(coord.x, coord.y, largestValue);
                    }
                }
            }
            return this._quadCostMatrix;
        },
    },
    quadBulldozeCostMatrix: {
        get() {
            if (this._quadBulldozeCostMatrix)
                return this._quadBulldozeCostMatrix;
            const terrainCoords = new Uint8Array(internationalManager.getTerrainCoords(this.name));
            this._quadBulldozeCostMatrix = new PathFinder.CostMatrix();
            const roadCoods = new Set();
            for (const road of this.structures.road)
                roadCoods.add(packCoord(road.pos));
            for (const rampart of this.structures.rampart) {
                if (rampart.my)
                    continue;
                terrainCoords[packAsNum(rampart.pos)] = 254;
            }
            for (const structureType of impassibleStructureTypes) {
                for (const structure of this.structures[structureType]) {
                    terrainCoords[packAsNum(structure.pos)] = 10;
                }
                for (const cSite of this.cSites[structureType]) {
                    terrainCoords[packAsNum(cSite.pos)] = 255;
                }
            }
            for (const portal of this.structures.portal)
                terrainCoords[packAsNum(portal.pos)] = 255;
            for (const cSite of this.allyCSites)
                terrainCoords[packAsNum(cSite.pos)] = 255;
            let x;
            let y = 0;
            for (x = 0; x < roomDimensions; x += 1)
                terrainCoords[packXYAsNum(x, y)] = Math.max(terrainCoords[packXYAsNum(x, y)], 254);
            x = 0;
            for (y = 0; y < roomDimensions; y += 1)
                terrainCoords[packXYAsNum(x, y)] = Math.max(terrainCoords[packXYAsNum(x, y)], 254);
            y = roomDimensions - 1;
            for (x = 0; x < roomDimensions; x += 1)
                terrainCoords[packXYAsNum(x, y)] = Math.max(terrainCoords[packXYAsNum(x, y)], 254);
            x = roomDimensions - 1;
            for (y = 0; y < roomDimensions; y += 1)
                terrainCoords[packXYAsNum(x, y)] = Math.max(terrainCoords[packXYAsNum(x, y)], 254);
            const terrainCM = this.getTerrain();
            for (let x = 0; x < roomDimensions; x += 1) {
                for (let y = 0; y < roomDimensions; y += 1) {
                    const offsetCoords = [
                        {
                            x,
                            y,
                        },
                        {
                            x: x + 1,
                            y,
                        },
                        {
                            x,
                            y: y + 1,
                        },
                        {
                            x: x + 1,
                            y: y + 1,
                        },
                    ];
                    let largestValue = terrainCoords[packXYAsNum(x, y)];
                    for (const coord of offsetCoords) {
                        let coordValue = terrainCoords[packAsNum(coord)];
                        if (!coordValue || coordValue < 254)
                            continue;
                        if (roadCoods.has(packCoord(coord)))
                            coordValue = 0;
                        largestValue = Math.max(largestValue, coordValue);
                    }
                    if (largestValue >= 254) {
                        this._quadBulldozeCostMatrix.set(x, y, 254);
                        this._quadBulldozeCostMatrix.set(x, y, Math.max(terrainCoords[packXYAsNum(x, y)], Math.min(largestValue, 254)));
                        continue;
                    }
                    largestValue = 0;
                    for (const coord of offsetCoords) {
                        const value = terrainCM.get(coord.x, coord.y);
                        if (roadCoods.has(packCoord(coord)))
                            continue;
                        if (value !== TERRAIN_MASK_SWAMP)
                            continue;
                        largestValue = defaultSwampCost * 2;
                    }
                    if (!largestValue)
                        continue;
                    for (const coord of offsetCoords) {
                        this._quadBulldozeCostMatrix.set(coord.x, coord.y, largestValue);
                    }
                }
            }
            return this._quadBulldozeCostMatrix;
        },
    },
    enemyDamageThreat: {
        get() {
            if (this._enemyDamageThreat !== undefined)
                return this._enemyDamageThreat;
            if (this.controller && !this.controller.my && this.structures.tower.length)
                return (this._enemyDamageThreat = true);
            for (const enemyAttacker of this.enemyAttackers) {
                if (!enemyAttacker.combatStrength.melee && !enemyAttacker.combatStrength.ranged)
                    continue;
                return (this._enemyDamageThreat = true);
            }
            return (this._enemyDamageThreat = false);
        },
    },
    enemyThreatCoords: {
        get() {
            if (this._enemyThreatCoords)
                return this._enemyThreatCoords;
            this._enemyThreatCoords = new Set();
            if (this.controller && this.controller.my && this.controller.safeMode)
                return this._enemyThreatCoords;
            if (!this.enemyAttackers.length)
                return this._enemyThreatCoords;
            const enemyAttackers = [];
            const enemyRangedAttackers = [];
            for (const enemyCreep of this.enemyAttackers) {
                if (enemyCreep.parts.ranged_attack) {
                    enemyRangedAttackers.push(enemyCreep);
                    continue;
                }
                if (enemyCreep.parts.attack > 0)
                    enemyAttackers.push(enemyCreep);
            }
            for (const enemyAttacker of enemyAttackers) {
                const coords = findCoordsInsideRect(enemyAttacker.pos.x - 2, enemyAttacker.pos.y - 2, enemyAttacker.pos.x + 2, enemyAttacker.pos.y + 2);
                for (const coord of coords)
                    this._enemyThreatCoords.add(packCoord(coord));
            }
            for (const enemyAttacker of enemyRangedAttackers) {
                const coords = findCoordsInsideRect(enemyAttacker.pos.x - 3, enemyAttacker.pos.y - 3, enemyAttacker.pos.x + 3, enemyAttacker.pos.y + 3);
                for (const coord of coords)
                    this._enemyThreatCoords.add(packCoord(coord));
            }
            for (const rampart of this.structures.rampart) {
                if (!rampart.my)
                    continue;
                if (rampart.hits < 3000)
                    continue;
                this._enemyThreatCoords.delete(packCoord(rampart.pos));
            }
            return this._enemyThreatCoords;
        },
    },
    enemyThreatGoals: {
        get() {
            if (this._enemyThreatGoals)
                return this._enemyThreatGoals;
            this._enemyThreatGoals = [];
            for (const enemyCreep of this.enemyAttackers) {
                if (enemyCreep.parts.ranged_attack) {
                    this._enemyThreatGoals.push({
                        pos: enemyCreep.pos,
                        range: 4,
                    });
                    continue;
                }
                if (!enemyCreep.parts.attack)
                    continue;
                this._enemyThreatGoals.push({
                    pos: enemyCreep.pos,
                    range: 2,
                });
            }
            return this._enemyThreatGoals;
        },
    },
    flags: {
        get() {
            if (this._flags)
                return this._flags;
            this._flags = {};
            for (const flag of this.find(FIND_FLAGS)) {
                this._flags[flag.name] = flag;
            }
            return this._flags;
        },
    },
    defensiveRamparts: {
        get() {
            if (this._defensiveRamparts)
                return this._defensiveRamparts;
            this._defensiveRamparts = [];
            if (!this.anchor)
                return this._defensiveRamparts;
            const ramparts = this.structures.rampart;
            if (!ramparts.length)
                return this._defensiveRamparts;
            const coordMap = new Uint8Array(internationalManager.getTerrainCoords(this.name));
            for (const road of this.structures.road) {
                coordMap[packAsNum(road.pos)] = 0;
            }
            const rampartsByCoord = new Map();
            for (const rampart of ramparts) {
                const packedCoord = packAsNum(rampart.pos);
                coordMap[packedCoord] = 254;
                rampartsByCoord.set(packedCoord, rampart.id);
            }
            const visitedCoords = new Uint8Array(2500);
            let depth = 0;
            let thisGeneration = [this.anchor];
            let nextGeneration = [];
            for (const coord of thisGeneration)
                visitedCoords[packAsNum(coord)] = 1;
            while (thisGeneration.length) {
                nextGeneration = [];
                for (const coord1 of thisGeneration) {
                    let isRampart;
                    if (depth > 0) {
                        const packedCoord1 = packAsNum(coord1);
                        if (coordMap[packedCoord1] === 255)
                            continue;
                        if (coordMap[packedCoord1] === 254) {
                            this._defensiveRamparts.push(findObjectWithID(rampartsByCoord.get(packedCoord1)));
                            isRampart = true;
                        }
                    }
                    const generationAdditions = [];
                    let foundRampart;
                    for (const coord2 of findCoordsInsideRect(coord1.x - 1, coord1.y - 1, coord1.x + 1, coord1.y + 1)) {
                        const packedCoord2 = packAsNum(coord2);
                        if (visitedCoords[packedCoord2] === 1)
                            continue;
                        if (isRampart) {
                            if (coordMap[packedCoord2] !== 254)
                                continue;
                            foundRampart = true;
                        }
                        visitedCoords[packedCoord2] = 1;
                        generationAdditions.push(coord2);
                    }
                    if (isRampart && !foundRampart)
                        continue;
                    nextGeneration = nextGeneration.concat(generationAdditions);
                }
                thisGeneration = nextGeneration;
                depth += 1;
            }
            return this._defensiveRamparts;
        },
    },
    factory: {
        get() {
            if (this._factory !== undefined)
                return this._factory;
            return (this._factory = this.structures.factory[0]);
        },
    },
    powerSpawn: {
        get() {
            if (this._powerSpawn !== undefined)
                return this._powerSpawn;
            return (this._powerSpawn = this.structures.powerSpawn[0]);
        },
    },
    nuker: {
        get() {
            if (this._nuker !== undefined)
                return this._nuker;
            return (this._nuker = this.structures.nuker[0]);
        },
    },
    observer: {
        get() {
            if (this._observer !== undefined)
                return this._observer;
            return (this._observer = this.structures.observer[0]);
        },
    },
    resourcesInStoringStructures: {
        get() {
            if (this._resourcesInStoringStructures)
                return this._resourcesInStoringStructures;
            this._resourcesInStoringStructures = {};
            const storingStructures = [this.storage, this.factory];
            if (this.terminal && !this.terminal.effectsData.get(PWR_DISRUPT_TERMINAL))
                storingStructures.push(this.terminal);
            for (const structure of storingStructures) {
                if (!structure)
                    continue;
                for (const key in structure.store) {
                    const resourceType = key;
                    if (!this._resourcesInStoringStructures[resourceType]) {
                        this._resourcesInStoringStructures[resourceType] = structure.store[resourceType];
                        continue;
                    }
                    this._resourcesInStoringStructures[resourceType] += structure.store[resourceType];
                }
            }
            return this._resourcesInStoringStructures;
        },
    },
    unprotectedEnemyCreeps: {
        get() {
            if (this._unprotectedEnemyCreeps)
                return this._unprotectedEnemyCreeps;
            const avoidStructureTypes = new Set([STRUCTURE_RAMPART]);
            return (this._unprotectedEnemyCreeps = this.enemyCreeps.filter(enemyCreep => {
                return !this.coordHasStructureTypes(enemyCreep.pos, avoidStructureTypes);
            }));
        },
    },
    exitCoords: {
        get() {
            if (this._exitCoords)
                return this._exitCoords;
            this._exitCoords = new Set();
            for (const exit of this.find(FIND_EXIT)) {
                this._exitCoords.add(packCoord(exit));
            }
            return this._exitCoords;
        },
    },
    MEWT: {
        get() {
            if (this._MEWT)
                return this._MEWT;
            this._MEWT = [
                ...this.droppedEnergy,
                ...this.find(FIND_TOMBSTONES, {
                    filter: tombstone => tombstone.store.getUsedCapacity(RESOURCE_ENERGY) > 0,
                }),
                ...this.find(FIND_RUINS).filter(ru => ru.ticksToDecay < 10000 && ru.store.getUsedCapacity(RESOURCE_ENERGY) > 0),
                ...this.sourceContainers,
                ...this.find(FIND_RUINS).filter(ru => ru.ticksToDecay >= 10000 && ru.store.getUsedCapacity(RESOURCE_ENERGY) > 0),
                ...this.find(FIND_HOSTILE_STRUCTURES).filter(structure => {
                    return (structure.store &&
                        structure.store.getUsedCapacity(RESOURCE_ENERGY) > 0 &&
                        !structure.pos
                            .lookFor(LOOK_STRUCTURES)
                            .filter(structure2 => structure2.structureType === STRUCTURE_RAMPART &&
                            !structure2.my));
                }),
            ];
            return this._MEWT;
        },
    },
    OEWT: {
        get() {
            if (this._OEWT)
                return this._OEWT;
            this._OEWT = [];
            if (this.storage && this.controller.level >= 4) {
                if (this.controller.my)
                    this._OEWT.push(this.storage);
                else if (!this.storage.pos
                    .lookFor(LOOK_STRUCTURES)
                    .find(structure => structure.structureType === STRUCTURE_RAMPART && !structure.my))
                    this._OEWT.push(this.storage);
            }
            if (this.terminal && this.controller.level >= 6) {
                if (this.controller.my)
                    this._OEWT.push(this.terminal);
                else if (!this.terminal.pos
                    .lookFor(LOOK_STRUCTURES)
                    .find(structure => structure.structureType === STRUCTURE_RAMPART && !structure.my))
                    this._OEWT.push(this.terminal);
            }
            return this._OEWT;
        },
    },
    MAWT: {
        get() {
            if (this._MAWT)
                return this._MAWT;
            this._MAWT = [
                ...this.droppedResources,
                ...this.find(FIND_TOMBSTONES).filter(cr => cr.store.getUsedCapacity() > 0),
                ...this.find(FIND_RUINS).filter(ru => ru.ticksToDecay < 10000 && ru.store.getUsedCapacity() > 0),
                ...this.sourceContainers.filter(cr => cr.store.getUsedCapacity() > 0),
                ...this.find(FIND_HOSTILE_STRUCTURES).filter(structure => {
                    return (structure.store &&
                        structure.store.getUsedCapacity(RESOURCE_ENERGY) > 0 &&
                        !structure.pos
                            .lookFor(LOOK_STRUCTURES)
                            .filter(structure2 => structure2.structureType === STRUCTURE_RAMPART &&
                            !structure2.my));
                }),
            ];
            return this._MAWT;
        },
    },
    OAWT: {
        get() {
            if (this._OAWT)
                return this._OAWT;
            this._OAWT = this.OEWT;
            return this._OAWT;
        },
    },
    METT: {
        get() {
            if (this._METT)
                return this._METT;
            this._METT = [...this.spawningStructuresByNeed];
            if (!this.fastFillerContainerLeft && !this.fastFillerContainerRight) {
                for (const creepName of this.myCreeps.builder) {
                    const creep = Game.creeps[creepName];
                    if (creep.spawning)
                        continue;
                    if (creep.store.getCapacity() * 0.5 >= creep.store.getUsedCapacity())
                        this._METT.push(creep);
                }
            }
            this._METT = this._METT.concat(this.structures.tower.filter(tower => {
                return tower.store.energy <= tower.store.getCapacity(RESOURCE_ENERGY) * 0.5;
            }));
            return this._METT;
        },
    },
    OETT: {
        get() {
            if (this._OETT)
                return this._OETT;
            this._OETT = [];
            if (this.storage && this.controller.level >= 4)
                this._OETT.push(this.storage);
            if (this.terminal && this.controller.level >= 6)
                this._OETT.push(this.terminal);
            return this._OETT;
        },
    },
    MATT: {
        get() {
            if (this._MATT)
                return this._MATT;
            this._MATT = this.METT;
            return this._MATT;
        },
    },
    OATT: {
        get() {
            if (this._OATT)
                return this._OATT;
            this._OATT = this.OETT;
            return this._OATT;
        },
    },
    MEFTT: {
        get() {
            if (this._MEFTT)
                return this._MEFTT;
            this._MEFTT = [];
            if (this.controllerContainer)
                this._MEFTT.push(this.controllerContainer);
            if (this.controllerLink && !this.hubLink)
                this._MEFTT.push(this.controllerLink);
            if (this.fastFillerContainerLeft)
                this._MEFTT.push(this.fastFillerContainerLeft);
            if (this.fastFillerContainerRight)
                this._MEFTT.push(this.fastFillerContainerRight);
            return this._MEFTT;
        },
    },
    MOFTT: {
        get() {
            if (this._MOFTT)
                return this._MOFTT;
            this._MOFTT = [];
            return this._MOFTT;
        },
    },
    advancedLogistics: {
        get() {
            if (this._advancedLogistics !== undefined)
                return this._advancedLogistics;
            if (this.memory.T === 'remote')
                return (this._advancedLogistics = true);
            return (this._advancedLogistics = this.storage !== undefined || this.terminal !== undefined);
        },
    },
});

Object.defineProperties(Resource.prototype, {
    nextAmount: {
        get() {
            if (this._nextAmount !== undefined)
                return this._nextAmount;
            return this._nextAmount = this.amount;
        },
        set(newAmount) {
            this._nextAmount = newAmount;
        },
    },
    reserveAmount: {
        get() {
            if (this._reserveAmount !== undefined)
                return this._reserveAmount;
            return this._reserveAmount = this.amount;
        },
        set(newAmount) {
            this._reserveAmount = newAmount;
        },
    },
});

RoomObject.prototype.usedStore = function (resourceType) {
    if (!this.store)
        return 0;
    let amount = 0;
    if (resourceType)
        return this.store[resourceType];
    for (const type in this.store)
        amount += this.store[type];
    return amount;
};
RoomObject.prototype.freeStore = function () {
    return this.store.getCapacity() - this.usedStore();
};
RoomObject.prototype.freeSpecificStore = function (resourceType = RESOURCE_ENERGY) {
    return this.store.getCapacity(resourceType) - this.store[resourceType];
};
RoomObject.prototype.freeNextStoreOf = function (resourceType) {
    return this.store.getCapacity(resourceType) - this.nextStore[resourceType];
};
RoomObject.prototype.freeReserveStoreOf = function (resourceType) {
    return this.store.getCapacity(resourceType) - this.reserveStore[resourceType];
};

Object.defineProperties(RoomObject.prototype, {
    effectsData: {
        get() {
            if (this._effectsData)
                return this._effectsData;
            this._effectsData = new Map();
            if (!this.effects)
                return this._effectsData;
            for (const effectData of this.effects) {
                this._effectsData.set(effectData.effect, effectData);
            }
            return this._effectsData;
        },
    },
    nextHits: {
        get() {
            if (this._nextHits)
                return this._nextHits;
            return (this._nextHits = this.hits);
        },
        set(newEstimatedHits) {
            this._nextHits = newEstimatedHits;
        },
    },
    nextStore: {
        get() {
            if (this._nextStore)
                return this._nextStore;
            const parent = this;
            const referenceStore = Object.assign({}, this.store);
            this._nextStore = new Proxy(referenceStore, {
                get(target, resourceType) {
                    var _a;
                    if (parent instanceof Creep)
                        customLog('GET', parent.name + ', ' + resourceType + ', ' + target[resourceType], {
                            superPosition: 1,
                        });
                    return (_a = target[resourceType]) !== null && _a !== void 0 ? _a : 0;
                },
                set(target, resourceType, newAmount) {
                    var _a, _b;
                    if (parent instanceof Creep)
                        customLog('PRE CHECK', parent.name +
                            ', ' +
                            resourceType +
                            ', ' +
                            parent.usedNextStore +
                            ', ' +
                            parent.store.getCapacity(), { superPosition: 1 });
                    if (parent._usedNextStore !== undefined) {
                        parent._usedNextStore += newAmount - ((_a = target[resourceType]) !== null && _a !== void 0 ? _a : 0);
                        if (parent instanceof Creep)
                            customLog('USED', parent._usedNextStore + ', ' + (newAmount - ((_b = target[resourceType]) !== null && _b !== void 0 ? _b : 0)), {
                                superPosition: 1,
                            });
                    }
                    if (parent instanceof Creep)
                        customLog('CHECK', newAmount + ', ' + target[resourceType], { superPosition: 1 });
                    target[resourceType] = newAmount;
                    if (parent instanceof Creep)
                        customLog('SECOND CHECK', newAmount + ', ' + target[resourceType] + ', ' + parent.nextStore[resourceType] + ', ' +
                            parent.name, { superPosition: 1 });
                    return true;
                },
            });
            return this._nextStore;
        },
    },
    usedNextStore: {
        get() {
            if (this instanceof Creep)
                customLog('PRESENT USED', this.name + ', ' + this.nextStore.energy + ', ' + this._usedNextStore, {
                    superPosition: 1,
                });
            if (this._usedNextStore !== undefined)
                return this._usedNextStore;
            this._usedNextStore = 0;
            const keys = Object.keys(this.nextStore);
            for (let i = 0; i < keys.length; i++) {
                this._usedNextStore += this.nextStore[keys[i]];
            }
            if (this instanceof Creep)
                customLog('NEW USED', this._usedNextStore, { superPosition: 1 });
            return this._usedNextStore;
        },
    },
    freeNextStore: {
        get() {
            return this.store.getCapacity() - this.usedNextStore;
        },
    },
    reserveStore: {
        get() {
            if (this._reserveStore)
                return this._reserveStore;
            const parent = this;
            const referenceStore = Object.assign({}, this.store);
            this._reserveStore = new Proxy(referenceStore, {
                get(target, resourceType) {
                    var _a;
                    return (_a = target[resourceType]) !== null && _a !== void 0 ? _a : 0;
                },
                set(target, resourceType, newAmount) {
                    var _a;
                    if (parent._usedReserveStore !== undefined) {
                        parent._usedReserveStore += newAmount - ((_a = target[resourceType]) !== null && _a !== void 0 ? _a : 0);
                    }
                    target[resourceType] = newAmount;
                    return true;
                },
            });
            return this._reserveStore;
        },
    },
    usedReserveStore: {
        get() {
            if (this._usedReserveStore !== undefined)
                return this._usedReserveStore;
            this._usedReserveStore = 0;
            const keys = Object.keys(this.reserveStore);
            for (let i = 0; i < keys.length; i++) {
                this._usedReserveStore += this.reserveStore[keys[i]];
            }
            return this._usedReserveStore;
        },
    },
    freeReserveStore: {
        get() {
            return this.store.getCapacity() - this.usedReserveStore;
        },
    },
    reservePowers: {
        get() {
            if (this._reservePowers)
                return this._reservePowers;
            return (this._reservePowers = new Set());
        },
    },
});

Object.defineProperties(Structure.prototype, {
    RCLActionable: {
        get() {
            if (this._RCLActionable !== undefined)
                return this._RCLActionable;
            if (!this.room.controller)
                return this._RCLActionable = true;
            if (this.room.memory.GRCL === this.room.controller.level)
                return this._RCLActionable = true;
            return this._RCLActionable = this.isActive();
        }
    },
});

Object.defineProperties(Creep.prototype, {
    dying: {
        get() {
            if (this.spawning)
                return false;
            if (this.ticksToLive > this.body.length * CREEP_SPAWN_TIME)
                return false;
            return true;
        },
    },
    role: {
        get() {
            if (this._role)
                return this._role;
            return (this._role = creepRoles[parseInt(this.name.split('_')[0])]);
        },
    },
    cost: {
        get() {
            if (this._cost)
                return this._cost;
            return (this._cost = parseInt(this.name.split('_')[1]));
        },
    },
    commune: {
        get() {
            if (this._commune)
                return this._commune;
            return (this._commune = Game.rooms[this.name.split('_')[2]]);
        },
    },
    defaultParts: {
        get() {
            if (this._defaultParts)
                return this._defaultParts;
            return (this._defaultParts = parseInt(this.name.split('_')[3]));
        },
    },
    strength: {
        get() {
            if (this._strength)
                return this._strength;
            this._strength = 1;
            for (const part of this.body) {
                switch (part.type) {
                    case RANGED_ATTACK:
                        this._strength +=
                            RANGED_ATTACK_POWER * (part.boost ? BOOSTS[part.type][part.boost].rangedAttack : 1);
                        break;
                    case ATTACK:
                        this._strength += ATTACK_POWER * (part.boost ? BOOSTS[part.type][part.boost].attack : 1);
                        break;
                    case HEAL:
                        this._strength += HEAL_POWER * (part.boost ? BOOSTS[part.type][part.boost].heal : 1);
                        break;
                    case TOUGH:
                        this._strength += 1 + 5 / (part.boost ? BOOSTS[part.type][part.boost].damage : 1);
                        break;
                    default:
                        this._strength += 1;
                }
            }
            return this._strength;
        },
    },
    reservation: {
        get() {
            if (!this.memory.Rs[0])
                return false;
            return (this._reservation = this.memory.Rs[0]);
        },
    },
    macroHealStrength: {
        get() {
            if (this._macroHealStrength !== undefined)
                return this._macroHealStrength;
            this._macroHealStrength = this.combatStrength.heal;
            let top = Math.max(Math.min(this.pos.y - 3, roomDimensions - 1), 0);
            let left = Math.max(Math.min(this.pos.x - 3, roomDimensions - 1), 0);
            let bottom = Math.max(Math.min(this.pos.y + 3, roomDimensions - 1), 0);
            let right = Math.max(Math.min(this.pos.x + 3, roomDimensions - 1), 0);
            const adjacentCreeps = this.room.lookForAtArea(LOOK_CREEPS, top, left, bottom, right, true);
            for (const posData of adjacentCreeps) {
                const { creep } = posData;
                if (this.owner.username === Memory.me) {
                    if (creep.owner.username !== Memory.me)
                        continue;
                }
                else if (this.owner.username !== creep.owner.username)
                    continue;
                const range = getRangeOfCoords(this.pos, creep.pos);
                if (range > 3)
                    continue;
                let healStrength = creep.combatStrength.heal;
                if (range > 1)
                    healStrength /= (HEAL_POWER / RANGED_HEAL_POWER);
                this._macroHealStrength += Math.floor(healStrength);
            }
            return this._macroHealStrength;
        },
    },
    netTowerDamage: {
        get() {
            if (this._netTowerDamage !== undefined)
                return this._netTowerDamage;
            this._netTowerDamage = this.grossTowerDamage;
            this._netTowerDamage *= this.defenceStrength;
            if (this.room.controller.safeMode)
                return this._netTowerDamage;
            this._netTowerDamage -= this.macroHealStrength;
            return this._netTowerDamage;
        },
    },
    upgradeStrength: {
        get() {
            if (this._upgradeStrength !== undefined)
                return this._upgradeStrength;
            this._upgradeStrength = this.parts.work;
            if (this.boosts.XGH2O > 0)
                return (this._upgradeStrength *= BOOSTS.work.XGH2O.upgradeController);
            else if (this.boosts.GH2O > 0)
                return (this._defenceStrength *= BOOSTS.upgrade.GH2O.upgradeController);
            else if (this.boosts.GH > 0)
                return (this._defenceStrength *= BOOSTS.upgrade.GH.upgradeController);
            return this._upgradeStrength;
        },
    },
    combatStrength: {
        get() {
            if (this._combatStrength)
                return this._combatStrength;
            this._combatStrength = {
                dismantle: 0,
                melee: 0,
                ranged: 0,
                heal: 0,
            };
            for (const part of this.body) {
                if (part.type === WORK) {
                    const boost = part.boost;
                    this._combatStrength.dismantle +=
                        DISMANTLE_POWER *
                            (part.boost && dismantleBoosts.includes(boost) ? BOOSTS[part.type][boost].dismantle : 1);
                    continue;
                }
                if (part.type === ATTACK) {
                    this._combatStrength.melee += ATTACK_POWER * (part.boost ? BOOSTS[part.type][part.boost].attack : 1);
                    continue;
                }
                if (part.type === RANGED_ATTACK) {
                    this._combatStrength.ranged +=
                        RANGED_ATTACK_POWER * (part.boost ? BOOSTS[part.type][part.boost].rangedAttack : 1);
                    continue;
                }
                if (part.type === HEAL) {
                    this._combatStrength.heal += HEAL_POWER * (part.boost ? BOOSTS[part.type][part.boost].heal : 1);
                }
            }
            return this._combatStrength;
        },
    },
    defenceStrength: {
        get() {
            if (this._defenceStrength)
                return this._defenceStrength;
            if (this.boosts.XGHO2 > 0)
                return (this._defenceStrength = BOOSTS.tough.XGHO2.damage);
            else if (this.boosts.GHO2 > 0)
                return (this._defenceStrength = BOOSTS.tough.GHO2.damage);
            else if (this.boosts.GO > 0)
                return (this._defenceStrength = BOOSTS.tough.GO.damage);
            return 1;
        },
    },
    parts: {
        get() {
            if (this._parts)
                return this._parts;
            this._parts = {};
            for (const partType of BODYPARTS_ALL)
                this._parts[partType] = 0;
            for (const part of this.body)
                this._parts[part.type] += 1;
            return this._parts;
        },
    },
    boosts: {
        get() {
            if (this._boosts)
                return this._boosts;
            this._boosts = {};
            let boost;
            for (const part of this.body) {
                boost = part.boost;
                if (!boost)
                    continue;
                this._boosts[boost] ? (this._boosts[boost] += 1) : (this._boosts[boost] = 1);
            }
            return this._boosts;
        },
    },
    canMove: {
        get() {
            if (this._canMove !== undefined)
                return this._canMove;
            return (this._canMove = !this.fatigue && !this.spawning && this.parts.move > 0);
        },
    },
});
Object.defineProperties(PowerCreep.prototype, {
    dying: {
        get() {
            return this.ticksToLive < POWER_CREEP_LIFE_TIME / 5;
        },
    },
    macroHealStrength: {
        get() {
            if (this._macroHealStrength !== undefined)
                return this._macroHealStrength;
            this._macroHealStrength = 0;
            let top = Math.max(Math.min(this.pos.y - 3, roomDimensions - 1), 0);
            let left = Math.max(Math.min(this.pos.x - 3, roomDimensions - 1), 0);
            let bottom = Math.max(Math.min(this.pos.y + 3, roomDimensions - 1), 0);
            let right = Math.max(Math.min(this.pos.x + 3, roomDimensions - 1), 0);
            const adjacentCreeps = this.room.lookForAtArea(LOOK_CREEPS, top, left, bottom, right, true);
            for (const posData of adjacentCreeps) {
                const { creep } = posData;
                if (this.owner.username === Memory.me) {
                    if (creep.owner.username !== Memory.me)
                        continue;
                }
                else if (this.owner.username !== creep.owner.username)
                    continue;
                const range = getRangeOfCoords(this.pos, creep.pos);
                if (range > 3)
                    continue;
                let healStrength = creep.combatStrength.heal;
                if (range > 1)
                    healStrength /= (HEAL_POWER / RANGED_HEAL_POWER);
                this._macroHealStrength += Math.floor(healStrength);
            }
            return this._macroHealStrength;
        },
    },
    netTowerDamage: {
        get() {
            if (this._netTowerDamage !== undefined)
                return this._netTowerDamage;
            this._netTowerDamage = this.grossTowerDamage;
            if (this.room.controller.safeMode)
                return this._netTowerDamage;
            return (this._netTowerDamage -= this.macroHealStrength);
        },
    },
    powerCooldowns: {
        get() {
            if (this._powerCooldowns)
                return this._powerCooldowns;
            this._powerCooldowns = new Map();
            for (const powerType in this.powers) {
                const cooldown = this.powers[powerType].cooldown;
                if (!cooldown)
                    continue;
                this._powerCooldowns.set(parseInt(powerType), cooldown);
            }
            return this._powerCooldowns;
        }
    }
});
const additions = {
    grossTowerDamage: {
        get() {
            if (this._grossTowerDamage !== undefined)
                return this._grossTowerDamage;
            this._grossTowerDamage = 0;
            for (const tower of this.room.structures.tower) {
                if (!tower.RCLActionable)
                    continue;
                if (tower.store.getUsedCapacity(RESOURCE_ENERGY) < TOWER_ENERGY_COST)
                    continue;
                let damage = TOWER_POWER_ATTACK;
                let range = getRangeOfCoords(this.pos, tower.pos);
                if (range > TOWER_OPTIMAL_RANGE) {
                    if (range > TOWER_FALLOFF_RANGE)
                        range = TOWER_FALLOFF_RANGE;
                    damage -=
                        (damage * TOWER_FALLOFF * (range - TOWER_OPTIMAL_RANGE)) /
                            (TOWER_FALLOFF_RANGE - TOWER_OPTIMAL_RANGE);
                }
                for (const powerType of towerPowers) {
                    const effect = tower.effectsData.get(powerType);
                    if (!effect)
                        continue;
                    damage *= Math.floor(POWER_INFO[powerType].effect[effect.level - 1]);
                }
                this._grossTowerDamage += Math.floor(damage);
            }
            return this._grossTowerDamage;
        },
    },
    message: {
        get() {
            if (this._message)
                return this._message;
            return (this._message = '');
        },
        set(newMessage) {
            this._message = newMessage;
        },
    },
    freeCapacityNextTick: {
        get() {
            if (this._freeCapacityNextTick !== undefined)
                return this._freeCapacityNextTick;
            return (this._freeCapacityNextTick = this.store.getFreeCapacity());
        },
        set(newFreeCapacityNextNext) {
            this._freeCapacityNextTick = newFreeCapacityNextNext;
        },
    },
    isOnExit: {
        get() {
            if (this._isOnExit !== undefined)
                return this._isOnExit;
            const { x } = this.pos;
            const { y } = this.pos;
            return x <= 0 || x >= 49 || y <= 0 || y >= 49;
        },
    },
};
Object.defineProperties(Creep.prototype, additions);
Object.defineProperties(PowerCreep.prototype, additions);

class MemHack {
    constructor() {
        this.memory = Memory;
        this.memory = RawMemory._parsed;
    }
    run() {
        delete global.Memory;
        global.Memory = this.memory;
        RawMemory._parsed = this.memory;
    }
}
const memHack = new MemHack();

function initProfiler() {
    const defaults = {
        data: {},
        total: 0,
    };
    if (!Memory.profiler) {
        Memory.profiler = defaults;
    }
    const cli = {
        clear() {
            const running = isEnabled();
            Memory.profiler = defaults;
            if (running) {
                Memory.profiler.start = Game.time;
            }
            return 'Profiler Memory cleared';
        },
        output() {
            outputProfilerData();
            return 'Done';
        },
        start() {
            Memory.profiler.start = Game.time;
            return 'Profiler started';
        },
        status() {
            if (isEnabled()) {
                return 'Profiler is running';
            }
            return 'Profiler is stopped';
        },
        stop() {
            if (!isEnabled()) {
                return undefined;
            }
            const timeRunning = Game.time - Memory.profiler.start;
            Memory.profiler.total += timeRunning;
            delete Memory.profiler.start;
            return 'Profiler stopped';
        },
        toString() {
            return ('Profiler.start() - Starts the profiler\n' +
                'Profiler.stop() - Stops/Pauses the profiler\n' +
                'Profiler.status() - Returns whether is profiler is currently running or not\n' +
                'Profiler.output() - Pretty-prints the collected profiler data to the console\n' +
                this.status());
        },
    };
    return cli;
}
function isEnabled() {
    return Memory.profiler.start !== undefined;
}
function outputProfilerData() {
    let totalTicks = Memory.profiler.total;
    if (Memory.profiler.start)
        totalTicks += Game.time - Memory.profiler.start;
    let totalCpu = 0;
    let calls;
    let time;
    let result;
    const data = Reflect.ownKeys(Memory.profiler.data).map(rawKey => {
        const key = rawKey;
        calls = Memory.profiler.data[key].calls;
        time = Memory.profiler.data[key].time;
        result = {};
        result.name = `${key}`;
        result.calls = calls;
        result.cpuPerCall = time / calls;
        result.callsPerTick = calls / totalTicks;
        result.cpuPerTick = time / totalTicks;
        totalCpu += result.cpuPerTick;
        return result;
    });
    data.sort((lhs, rhs) => rhs.cpuPerTick - lhs.cpuPerTick);
    let output = '';
    const longestName = _.max(data, d => d.name.length).name.length + 2;
    output += _.padRight('Function', longestName);
    output += _.padLeft('Tot Calls', 12);
    output += _.padLeft('CPU/Call', 12);
    output += _.padLeft('Calls/Tick', 12);
    output += _.padLeft('CPU/Tick', 12);
    output += _.padLeft('% of Tot\n', 12);
    data.forEach(d => {
        output += _.padRight(`${d.name}`, longestName);
        output += _.padLeft(`${d.calls}`, 12);
        output += _.padLeft(`${d.cpuPerCall.toFixed(2)}ms`, 12);
        output += _.padLeft(`${d.callsPerTick.toFixed(2)}`, 12);
        output += _.padLeft(`${d.cpuPerTick.toFixed(2)}ms`, 12);
        output += _.padLeft(`${((d.cpuPerTick / totalCpu) * 100).toFixed(0)} %\n`, 12);
    });
    output += `${totalTicks} total ticks measured`;
    output += `\t\t\t${totalCpu.toFixed(2)} average CPU profiled per tick`;
}

class MigrationManager {
    run() {
        if (Memory.breakingVersion === settings.breakingVersion)
            return;
        if (Memory.breakingVersion === 81) {
            global.killCreeps();
            for (const roomName in Memory.rooms) {
                const type = Memory.rooms[roomName].T;
                if (type === 'commune' || type === 'remote') {
                    if (Memory.claimRequests[roomName])
                        delete Memory.claimRequests[roomName];
                    delete Memory.rooms[roomName];
                    continue;
                }
            }
            Memory.breakingVersion = 82;
        }
        if (Memory.breakingVersion === 82) {
            global.killCreeps();
            for (const roomName in Memory.rooms) {
                const type = Memory.rooms[roomName].T;
                if (type === 'commune' || type === 'remote') {
                    if (Memory.claimRequests[roomName])
                        delete Memory.claimRequests[roomName];
                    delete Memory.rooms[roomName];
                    continue;
                }
            }
            Memory.breakingVersion = 83;
        }
        if (Memory.breakingVersion === 83) {
            global.killCreeps();
            for (const roomName in Memory.rooms) {
                const type = Memory.rooms[roomName].T;
                if (type === 'commune' || type === 'remote') {
                    if (Memory.claimRequests[roomName])
                        delete Memory.claimRequests[roomName];
                    delete Memory.rooms[roomName];
                    continue;
                }
            }
            Memory.breakingVersion = 84;
        }
        if (Memory.breakingVersion === 84) {
            delete Memory.attackRequests;
            Memory.combatRequests = {};
            delete Memory.allyList;
            Memory.allyPlayers = settings.allyPlayers;
            Memory.nonAggressionPlayers = settings.nonAggressionPlayers;
            Memory.breakingVersion = 85;
        }
        if (Memory.breakingVersion === 85) {
            Memory.simpleAlliesSegment = settings.simpleAlliesSegment;
            for (const roomName in Game.rooms) {
                const room = Game.rooms[roomName];
                if (!room.controller)
                    continue;
                if (!room.controller.my)
                    continue;
                for (const remoteName of room.memory.remotes) {
                    Memory.rooms[remoteName].CN = room.name;
                }
            }
            Memory.breakingVersion = 86;
        }
        if (Memory.breakingVersion === 86) {
            Memory.players = {};
            Memory.breakingVersion += 1;
        }
        if (Memory.breakingVersion === 87) {
            for (const roomName in Game.rooms) {
                const room = Game.rooms[roomName];
                if (!room.controller)
                    continue;
                if (!room.controller.my)
                    continue;
                for (const remoteName of room.memory.remotes) {
                    const remoteMemory = Memory.rooms[remoteName];
                    delete remoteMemory.CN;
                    remoteMemory.T = 'neutral';
                }
                room.memory.remotes = [];
            }
            Memory.breakingVersion += 1;
        }
        if (Memory.breakingVersion === 88) {
            for (const creepName in Memory.powerCreeps) {
                Memory.powerCreeps[creepName] = {};
            }
            Memory.breakingVersion += 1;
        }
        if (Memory.breakingVersion === 89) {
            global.killCreeps();
            Memory.breakingVersion += 1;
        }
        if (Memory.breakingVersion < settings.breakingVersion) {
            global.killCreeps();
            global.clearMemory();
            global.removeCSites();
        }
    }
}
const migrationManager = new MigrationManager();

class RespawnManager {
    run() {
        if (!this.hasRespawned())
            return;
        global.clearMemory();
    }
    hasRespawned() {
        if (Game.time === 0)
            return true;
        if (Object.keys(Game.creeps).length > 0)
            return false;
        const roomNames = Object.keys(Game.rooms);
        if (roomNames.length !== 1)
            return false;
        const room = Game.rooms[roomNames[0]];
        if (!room.controller ||
            !room.controller.my ||
            room.controller.level !== 1 ||
            !room.controller.progress ||
            !room.controller.safeMode ||
            room.controller.safeMode !== SAFE_MODE_DURATION - 1) {
            return false;
        }
        if (Object.keys(Game.spawns).length !== 1)
            return false;
        return true;
    }
}
const respawnManager = new RespawnManager();

class Market {
    constructor(mainShard = 'shard0') {
        this._minCpuUnlockSellPrice = 50 * 1000 * 1000;
        this._maxPixelBuyPrice = 40 * 1000;
        this._mainShard = mainShard;
    }
    SellCpuUnlock() {
        const orders = Game.market.getAllOrders(order => order.resourceType === CPU_UNLOCK &&
            order.type === ORDER_BUY &&
            order.price > this._minCpuUnlockSellPrice);
        orders.forEach(order => {
            const result = Game.market.deal(order.id, order.amount);
            if (result === OK) {
                const message = `Dealed CPU UNLOCK ${order.amount} for ${order.price}`;
                Game.notify(message, 0);
                console.log(message);
            }
        });
    }
    BuyPixels() {
        const orders = Game.market.getAllOrders(order => order.resourceType === PIXEL && order.type === ORDER_SELL && order.price < this._maxPixelBuyPrice);
        for (let i = 0; i < orders.length; i += 1) {
            const order = orders[i];
            const result = Game.market.deal(order.id, order.amount);
            if (result === OK) {
                const message = `Dealed PIXEL ${order.amount} for ${order.price}`;
                Game.notify(message, 60 * 24 * 7);
                console.log(message);
            }
        }
    }
    BuyMorePixels() {
        const orders = Game.market.getAllOrders(order => order.resourceType === PIXEL && order.type === ORDER_BUY && order.price < this._maxPixelBuyPrice);
        const myOrder = orders.find(order => order.id === '62d1d72a3a08f134005f736a');
        orders.sort((a, b) => b.price - a.price);
        if (orders[0].id !== myOrder.id) {
            const newPrice = orders[0].price + 1;
            Game.market.changeOrderPrice(myOrder.id, newPrice);
        }
        if (myOrder.remainingAmount < 1000) {
            Game.market.extendOrder(myOrder.id, 1000);
        }
    }
    HandleOrderEveryTick() {
        if (Game.shard.name === this._mainShard) ;
    }
}

class GetShardVision {
    constructor() {
        var _a;
        this._mainShard = 'shard0';
        this._shardNames = ['shard0', 'shard1', 'shard2', 'shard3'];
        this._lastShardIndex = this._shardNames.indexOf((_a = global.lastShardTarget) !== null && _a !== void 0 ? _a : this._shardNames[this._shardNames.length - 1]);
    }
    SpawnCreeps() {
        const spawnShardFlag = Game.flags[this._shardNames[0]];
        if (!spawnShardFlag)
            return;
        const roomNames = ['E72N14', 'E74N12', 'E68N11'];
        const spawns = Object.values(Game.spawns).filter(s => roomNames.includes(s.room.name));
        const spawn = spawns.filter(s => s.spawning === null)[0];
        if (!spawn)
            return;
        const shardTarget = this._lastShardIndex === this._shardNames.length - 1
            ? this._shardNames[0]
            : this._shardNames[this._lastShardIndex + 1];
        const spawnResult = spawn.spawnCreep([MOVE], `${shardTarget}-${Game.time}`);
        if (spawnResult === OK || spawnResult === ERR_NAME_EXISTS) {
            global.lastShardTarget = shardTarget;
        }
    }
    MoveCreepsToTarget(creep, targetPos) {
        if (!creep.pos.inRangeTo(targetPos, 0)) {
            creep.moveTo(targetPos);
        }
    }
    Handle() {
        if (!this._shardNames.includes(Game.shard.name))
            return;
        this._shardNames.forEach((shardName, index) => {
            if (Game.time % 100 === 0 && index === 0) {
                this.SpawnCreeps();
            }
            let loggedOrders = false;
            const creeps = Object.values(Game.creeps).filter(c => c.name.includes(shardName));
            creeps.forEach(creep => {
                if (Game.shard.name === this._mainShard && shardName === this._mainShard) {
                    this.MoveCreepsToTarget(creep, Game.flags[this._mainShard].pos);
                }
                else if (Game.shard.name === this._mainShard && shardName === 'shard1') {
                    this.MoveCreepsToTarget(creep, Game.flags.shard1.pos);
                }
                else if (shardName === 'shard2') {
                    if (Game.shard.name === this._mainShard) {
                        this.MoveCreepsToTarget(creep, Game.flags.shard1.pos);
                    }
                    else if (Game.shard.name === 'shard1') {
                        this.MoveCreepsToTarget(creep, Game.flags.shard2.pos);
                    }
                }
                else if (shardName === 'shard3') {
                    if (Game.shard.name === this._mainShard) {
                        this.MoveCreepsToTarget(creep, Game.flags.shard1.pos);
                    }
                    else if (Game.shard.name === 'shard1') {
                        this.MoveCreepsToTarget(creep, Game.flags.shard2.pos);
                    }
                    else if (Game.shard.name === 'shard2') {
                        this.MoveCreepsToTarget(creep, Game.flags.shard3.pos);
                    }
                }
                if (Game.shard.name === shardName) {
                    if (!loggedOrders && Game.time % 100 === 0) {
                        console.log(JSON.stringify(Game.market.getAllOrders()));
                        if (Game.time % 1000 === 0) {
                            console.log(JSON.stringify(Game.market.getHistory()));
                        }
                        loggedOrders = true;
                    }
                    creep.say(shardName);
                }
            });
        });
    }
}

function ExecutePandaMasterCode () {
    new GetShardVision().Handle();
    new Market().HandleOrderEveryTick();
}

const powerCreepClasses = {
    operator: Operator
};

class PowerCreepOrganizer {
    constructor() { }
    run() {
        if (Memory.CPULogging === true)
            var managerCPUStart = Game.cpu.getUsed();
        for (const creepName in Memory.powerCreeps) {
            if (!Game.powerCreeps[creepName])
                delete Memory.powerCreeps[creepName];
        }
        for (const creepName in Game.powerCreeps) {
            this.processCreep(creepName);
        }
        if (Memory.CPULogging === true) {
            const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
            customLog('Power Creep Organizer', cpuUsed.toFixed(2), {
                textColor: customColors.white,
                bgColor: customColors.lightBlue,
            });
            const statName = 'pccu';
            globalStatsUpdater('', statName, cpuUsed, true);
        }
    }
    processCreep(creepName) {
        let creep = Game.powerCreeps[creepName];
        if (!creep.ticksToLive) {
            internationalManager.unspawnedPowerCreepNames.push(creep.name);
            return;
        }
        const { className } = creep;
        const creepClass = powerCreepClasses[className];
        creep = Game.powerCreeps[creepName] = new creepClass(creep.id);
        const { room } = creep;
        room.powerCreepPositions.set(packCoord(creep.pos), creep.name);
        room.myPowerCreeps[className].push(creepName);
        room.myPowerCreepsAmount += 1;
        creep.preTickManager();
    }
}
const powerCreepOrganizer = new PowerCreepOrganizer();

var sourceMapGenerator = {};

var base64Vlq = {};

var base64$1 = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
base64$1.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
base64$1.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = base64$1;

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
base64Vlq.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
base64Vlq.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};

var util$5 = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

(function (exports) {
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port;
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;
}(util$5));

var arraySet = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util$4 = util$5;
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet$2() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet$2.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet$2();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet$2.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet$2.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util$4.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet$2.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util$4.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet$2.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util$4.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet$2.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet$2.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

arraySet.ArraySet = ArraySet$2;

var mappingList = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util$3 = util$5;

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util$3.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList$1() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList$1.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList$1.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList$1.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util$3.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

mappingList.MappingList = MappingList$1;

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ$1 = base64Vlq;
var util$2 = util$5;
var ArraySet$1 = arraySet.ArraySet;
var MappingList = mappingList.MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator$1(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util$2.getArg(aArgs, 'file', null);
  this._sourceRoot = util$2.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util$2.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet$1();
  this._names = new ArraySet$1();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator$1.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator$1.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator$1({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util$2.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util$2.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator$1.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util$2.getArg(aArgs, 'generated');
    var original = util$2.getArg(aArgs, 'original', null);
    var source = util$2.getArg(aArgs, 'source', null);
    var name = util$2.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator$1.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util$2.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util$2.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util$2.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator$1.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util$2.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet$1();
    var newNames = new ArraySet$1();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util$2.join(aSourceMapPath, mapping.source);
          }
          if (sourceRoot != null) {
            mapping.source = util$2.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util$2.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util$2.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator$1.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator$1.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = '';

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util$2.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ$1.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ$1.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ$1.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ$1.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ$1.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator$1.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util$2.relative(aSourceRoot, source);
      }
      var key = util$2.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator$1.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator$1.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

sourceMapGenerator.SourceMapGenerator = SourceMapGenerator$1;

var sourceMapConsumer = {};

var binarySearch$1 = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

(function (exports) {
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};
}(binarySearch$1));

var quickSort$1 = {};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
quickSort$1.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util$1 = util$5;
var binarySearch = binarySearch$1;
var ArraySet = arraySet.ArraySet;
var base64VLQ = base64Vlq;
var quickSort = quickSort$1.quickSort;

function SourceMapConsumer$1(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util$1.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer$1.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
};

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer$1.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer$1.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer$1.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer$1.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer$1.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer$1.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer$1.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer$1.GENERATED_ORDER = 1;
SourceMapConsumer$1.ORIGINAL_ORDER = 2;

SourceMapConsumer$1.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer$1.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer$1.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer$1.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer$1.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer$1.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util$1.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer$1.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util$1.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util$1.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util$1.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util$1.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util$1.getArg(mapping, 'generatedLine', null),
            column: util$1.getArg(mapping, 'generatedColumn', null),
            lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util$1.getArg(mapping, 'generatedLine', null),
            column: util$1.getArg(mapping, 'generatedColumn', null),
            lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

sourceMapConsumer.SourceMapConsumer = SourceMapConsumer$1;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util$1.parseSourceMapInput(aSourceMap);
  }

  var version = util$1.getArg(sourceMap, 'version');
  var sources = util$1.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util$1.getArg(sourceMap, 'names', []);
  var sourceRoot = util$1.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util$1.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util$1.getArg(sourceMap, 'mappings');
  var file = util$1.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util$1.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util$1.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util$1.isAbsolute(sourceRoot) && util$1.isAbsolute(source)
        ? util$1.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util$1.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer$1.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer$1;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util$1.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util$1.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util$1.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util$1.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util$1.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util$1.getArg(aArgs, 'line'),
      generatedColumn: util$1.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util$1.compareByGeneratedPositionsDeflated,
      util$1.getArg(aArgs, 'bias', SourceMapConsumer$1.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util$1.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util$1.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util$1.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util$1.getArg(mapping, 'originalLine', null),
          column: util$1.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util$1.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util$1.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util$1.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util$1.getArg(aArgs, 'line'),
      originalColumn: util$1.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util$1.compareByOriginalPositions,
      util$1.getArg(aArgs, 'bias', SourceMapConsumer$1.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util$1.getArg(mapping, 'generatedLine', null),
          column: util$1.getArg(mapping, 'generatedColumn', null),
          lastColumn: util$1.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

sourceMapConsumer.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util$1.parseSourceMapInput(aSourceMap);
  }

  var version = util$1.getArg(sourceMap, 'version');
  var sections = util$1.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util$1.getArg(s, 'offset');
    var offsetLine = util$1.getArg(offset, 'line');
    var offsetColumn = util$1.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer$1(util$1.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer$1.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer$1;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util$1.getArg(aArgs, 'line'),
      generatedColumn: util$1.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util$1.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util$1.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util$1.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util$1.compareByOriginalPositions);
  };

sourceMapConsumer.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
var util = util$5;

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
var SourceMapConsumer = sourceMapConsumer.SourceMapConsumer;

class ErrorMapper {
    static get consumer() {
        if (this._consumer == null) {
            this._consumer = new SourceMapConsumer(require('main.js.map'));
        }
        return this._consumer;
    }
    static sourceMappedStackTrace(error) {
        const stack = error instanceof Error ? error.stack : error;
        if (Object.prototype.hasOwnProperty.call(this.cache, stack)) {
            return this.cache[stack];
        }
        const re = /^\s+at\s+(.+?\s+)?\(?([0-z._\-\\\/]+):(\d+):(\d+)\)?$/gm;
        let match;
        let outStack = error.toString();
        while ((match = re.exec(stack))) {
            if (match[2] === 'main') {
                const pos = this.consumer.originalPositionFor({
                    column: parseInt(match[4], 10),
                    line: parseInt(match[3], 10),
                });
                if (pos.line != null) {
                    if (pos.name) {
                        outStack += `\n    at ${pos.name} (${pos.source}:${pos.line}:${pos.column})`;
                    }
                    else {
                        if (match[1]) {
                            outStack += `\n    at ${match[1]} (${pos.source}:${pos.line}:${pos.column})`;
                        }
                        else {
                            outStack += `\n    at ${pos.source}:${pos.line}:${pos.column}`;
                        }
                    }
                }
                else {
                    break;
                }
            }
            else {
                break;
            }
        }
        this.cache[stack] = outStack;
        return outStack;
    }
    static wrapLoop(loop) {
        return () => {
            try {
                loop();
            }
            catch (e) {
                if (e instanceof Error) {
                    if ('sim' in Game.rooms) {
                        const message = `Source maps don't work in the simulator - displaying original error`;
                        console.log(`<p style='color:#bb3d3d;'>${message}<br>${_.escape(e.stack)}</p>`);
                    }
                    else {
                        console.log(`<p style='color:#bb3d3d;'>${_.escape(this.sourceMappedStackTrace(e))}</p>`);
                    }
                }
                else {
                    throw e;
                }
            }
        };
    }
}
ErrorMapper.cache = {};

class PlayerManager {
    constructor() { }
    run() {
        for (const playerName in Memory.players) {
            const player = Memory.players[playerName];
            if (player.data[PlayerData.hate] > 0)
                player.data[PlayerData.hate] -= 1 + player.data[PlayerData.lastAttack] * 0.002;
            player.data[PlayerData.lastAttack] += 1;
        }
    }
}
const playerManager = new PlayerManager();

global.profiler = initProfiler();
const loop = ErrorMapper.wrapLoop(() => {
    if (Game.cpu.bucket < Math.max(Game.cpu.limit, 100)) {
        customLog('Skipping tick due to low bucket, bucket remaining', Game.cpu.bucket, {
            textColor: customColors.white,
            bgColor: customColors.red,
        });
        console.log(global.logs);
        return;
    }
    memHack.run();
    internationalManager.update();
    if (Memory.CPULogging === true)
        var managerCPUStart = Game.cpu.getUsed();
    if (Memory.me === 'PandaMaster')
        ExecutePandaMasterCode();
    migrationManager.run();
    respawnManager.run();
    configManager.run();
    tickConfig.run();
    playerManager.run();
    creepOrganizer.run();
    powerCreepOrganizer.run();
    internationalManager.constructionSiteManager();
    internationalManager.orderManager();
    allyManager.tickConfig();
    allyManager.getAllyRequests();
    if (Memory.CPULogging === true) {
        const cpuUsed = Game.cpu.getUsed() - managerCPUStart;
        customLog('International Manager', cpuUsed.toFixed(2), {
            textColor: customColors.white,
            bgColor: customColors.lightBlue,
        });
        const statName = 'imcu';
        globalStatsUpdater('', statName, cpuUsed, true);
    }
    roomsManager();
    internationalManager.mapVisualsManager();
    internationalManager.advancedGeneratePixel();
    internationalManager.advancedSellPixels();
    internationalManager.endTickManager();
});

exports.loop = loop;
//# sourceMappingURL=main.js.map
